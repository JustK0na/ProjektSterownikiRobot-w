
SRLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eec  08007eec  0000911c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007eec  08007eec  00008eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef4  08007ef4  0000911c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef4  08007ef4  00008ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08007efc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000911c  2**0
                  CONTENTS
 10 .bss          00000488  2000011c  2000011c  0000911c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  200005a4  0000911c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017950  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032cb  00000000  00000000  00020a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  00023d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  00025210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253fe  00000000  00000000  0002621c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fd9  00000000  00000000  0004b61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd145  00000000  00000000  000625f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f738  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005700  00000000  00000000  0013f77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00144e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000011c 	.word	0x2000011c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080063fc 	.word	0x080063fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000120 	.word	0x20000120
 80001e8:	080063fc 	.word	0x080063fc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <draw_maze>:
static void MX_LTDC_Init(void);
static void MX_SPI5_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void draw_maze(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
  for (int y = 0; y < MAZE_HEIGHT; y++) {
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e033      	b.n	800058c <draw_maze+0x74>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	e02a      	b.n	8000580 <draw_maze+0x68>
      uint16_t color = (maze[y][x] == 1) ? LCD_COLOR_DARKBLUE : LCD_COLOR_BLACK;
 800052a:	491c      	ldr	r1, [pc, #112]	@ (800059c <draw_maze+0x84>)
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	18ca      	adds	r2, r1, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d101      	bne.n	8000546 <draw_maze+0x2e>
 8000542:	2380      	movs	r3, #128	@ 0x80
 8000544:	e000      	b.n	8000548 <draw_maze+0x30>
 8000546:	2300      	movs	r3, #0
 8000548:	80fb      	strh	r3, [r7, #6]
      BSP_LCD_SetTextColor(color);
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fb6b 	bl	8001c28 <BSP_LCD_SetTextColor>
      BSP_LCD_FillRect(MAZE_ORIGIN_X + x * CELL_SIZE,
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	3301      	adds	r3, #1
 8000556:	b29b      	uxth	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	0092      	lsls	r2, r2, #2
 800055c:	4413      	add	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	b298      	uxth	r0, r3
                       MAZE_ORIGIN_Y + y * CELL_SIZE,
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
      BSP_LCD_FillRect(MAZE_ORIGIN_X + x * CELL_SIZE,
 8000566:	b29b      	uxth	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	0092      	lsls	r2, r2, #2
 800056c:	4413      	add	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	b299      	uxth	r1, r3
 8000572:	2314      	movs	r3, #20
 8000574:	2214      	movs	r2, #20
 8000576:	f001 fcd9 	bl	8001f2c <BSP_LCD_FillRect>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	3301      	adds	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b0b      	cmp	r3, #11
 8000584:	ddd1      	ble.n	800052a <draw_maze+0x12>
  for (int y = 0; y < MAZE_HEIGHT; y++) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b0f      	cmp	r3, #15
 8000590:	ddc8      	ble.n	8000524 <draw_maze+0xc>
                       CELL_SIZE, CELL_SIZE);
    }
  }
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008

080005a0 <draw_ball>:
void draw_ball(Ball *b)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  int center_x = MAZE_ORIGIN_X + b->x * CELL_SIZE + CELL_SIZE / 2;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	4613      	mov	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	330a      	adds	r3, #10
 80005b8:	60fb      	str	r3, [r7, #12]
  int center_y = MAZE_ORIGIN_Y + b->y * CELL_SIZE + CELL_SIZE / 2;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	330a      	adds	r3, #10
 80005ca:	60bb      	str	r3, [r7, #8]
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <draw_ball+0x4c>)
 80005ce:	f001 fb2b 	bl	8001c28 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(center_x, center_y, BALL_RADIUS);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	b291      	uxth	r1, r2
 80005da:	2206      	movs	r2, #6
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fcff 	bl	8001fe0 <BSP_LCD_FillCircle>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	ffff0000 	.word	0xffff0000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f002 f8a1 	bl	800273c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f853 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fa93 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000602:	f000 f8c1 	bl	8000788 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000606:	f000 fa41 	bl	8000a8c <MX_FMC_Init>
  MX_I2C3_Init();
 800060a:	f000 f8ef 	bl	80007ec <MX_I2C3_Init>
  MX_LTDC_Init();
 800060e:	f000 f92d 	bl	800086c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000612:	f000 f9db 	bl	80009cc <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000616:	f000 fa0f 	bl	8000a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800061a:	f001 fa0f 	bl	8001a3c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 800061e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000622:	2000      	movs	r0, #0
 8000624:	f001 fa8c 	bl	8001b40 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8000628:	2000      	movs	r0, #0
 800062a:	f001 faed 	bl	8001c08 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800062e:	f001 fd77 	bl	8002120 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000632:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000636:	f001 fb29 	bl	8001c8c <BSP_LCD_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  draw_maze();
 800063a:	f7ff ff6d 	bl	8000518 <draw_maze>
  draw_ball(&ball);
 800063e:	4816      	ldr	r0, [pc, #88]	@ (8000698 <main+0xa8>)
 8000640:	f7ff ffae 	bl	80005a0 <draw_ball>
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000644:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000648:	4814      	ldr	r0, [pc, #80]	@ (800069c <main+0xac>)
 800064a:	f003 f93a 	bl	80038c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000652:	f002 f8e5 	bl	8002820 <HAL_Delay>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000656:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800065a:	f001 fae5 	bl	8001c28 <BSP_LCD_SetTextColor>
	  draw_ball(&ball);
 800065e:	480e      	ldr	r0, [pc, #56]	@ (8000698 <main+0xa8>)
 8000660:	f7ff ff9e 	bl	80005a0 <draw_ball>
	  int new_x = ball.x;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <main+0xa8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	607b      	str	r3, [r7, #4]
	  int new_y = ball.y + 1;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <main+0xa8>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	603b      	str	r3, [r7, #0]

	  if (maze[new_y][new_x] == 0) {
 8000672:	490b      	ldr	r1, [pc, #44]	@ (80006a0 <main+0xb0>)
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	18ca      	adds	r2, r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <main+0xa0>
	      ball.y = new_y;
 800068a:	4a03      	ldr	r2, [pc, #12]	@ (8000698 <main+0xa8>)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	6053      	str	r3, [r2, #4]
	  }

	  draw_ball(&ball);
 8000690:	4801      	ldr	r0, [pc, #4]	@ (8000698 <main+0xa8>)
 8000692:	f7ff ff85 	bl	80005a0 <draw_ball>
  {
 8000696:	e7d5      	b.n	8000644 <main+0x54>
 8000698:	20000000 	.word	0x20000000
 800069c:	40021800 	.word	0x40021800
 80006a0:	20000008 	.word	0x20000008

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fe76 	bl	80063a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <SystemClock_Config+0xdc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000780 <SystemClock_Config+0xdc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemClock_Config+0xdc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <SystemClock_Config+0xe0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <SystemClock_Config+0xe0>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemClock_Config+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000718:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000722:	2303      	movs	r3, #3
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fd6c 	bl	8004208 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000736:	f000 fa8f 	bl	8000c58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073a:	f003 fd15 	bl	8004168 <HAL_PWREx_EnableOverDrive>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000744:	f000 fa88 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f003 ffc6 	bl	80046f8 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000772:	f000 fa71 	bl	8000c58 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 800078e:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <MX_DMA2D_Init+0x60>)
 8000790:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 800079a:	2202      	movs	r2, #2
 800079c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007bc:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007be:	f002 fb23 	bl	8002e08 <HAL_DMA2D_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007c8:	f000 fa46 	bl	8000c58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007cc:	2101      	movs	r1, #1
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_DMA2D_Init+0x5c>)
 80007d0:	f002 fc78 	bl	80030c4 <HAL_DMA2D_ConfigLayer>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007da:	f000 fa3d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000138 	.word	0x20000138
 80007e8:	4002b000 	.word	0x4002b000

080007ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_I2C3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_I2C3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_I2C3_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <MX_I2C3_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_I2C3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_I2C3_Init+0x74>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_I2C3_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_I2C3_Init+0x74>)
 800082a:	f003 f865 	bl	80038f8 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fa10 	bl	8000c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4809      	ldr	r0, [pc, #36]	@ (8000860 <MX_I2C3_Init+0x74>)
 800083c:	f003 f9a0 	bl	8003b80 <HAL_I2CEx_ConfigAnalogFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000846:	f000 fa07 	bl	8000c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_I2C3_Init+0x74>)
 800084e:	f003 f9d3 	bl	8003bf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000858:	f000 f9fe 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000178 	.word	0x20000178
 8000864:	40005c00 	.word	0x40005c00
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09a      	sub	sp, #104	@ 0x68
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000872:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000876:	2234      	movs	r2, #52	@ 0x34
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f005 fd92 	bl	80063a4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000880:	463b      	mov	r3, r7
 8000882:	2234      	movs	r2, #52	@ 0x34
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 fd8c 	bl	80063a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800088c:	4b4d      	ldr	r3, [pc, #308]	@ (80009c4 <MX_LTDC_Init+0x158>)
 800088e:	4a4e      	ldr	r2, [pc, #312]	@ (80009c8 <MX_LTDC_Init+0x15c>)
 8000890:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000892:	4b4c      	ldr	r3, [pc, #304]	@ (80009c4 <MX_LTDC_Init+0x158>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000898:	4b4a      	ldr	r3, [pc, #296]	@ (80009c4 <MX_LTDC_Init+0x158>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800089e:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008a4:	4b47      	ldr	r3, [pc, #284]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80008aa:	4b46      	ldr	r3, [pc, #280]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80008b0:	4b44      	ldr	r3, [pc, #272]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80008b6:	4b43      	ldr	r3, [pc, #268]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008b8:	220e      	movs	r2, #14
 80008ba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80008bc:	4b41      	ldr	r3, [pc, #260]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008be:	2205      	movs	r2, #5
 80008c0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80008c2:	4b40      	ldr	r3, [pc, #256]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008c4:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80008ca:	4b3e      	ldr	r3, [pc, #248]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008cc:	22f5      	movs	r2, #245	@ 0xf5
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 80008d0:	4b3c      	ldr	r3, [pc, #240]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008d2:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80008d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 80008d8:	4b3a      	ldr	r3, [pc, #232]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008da:	22f7      	movs	r2, #247	@ 0xf7
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008de:	4b39      	ldr	r3, [pc, #228]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008e6:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008ee:	4b35      	ldr	r3, [pc, #212]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008f6:	4833      	ldr	r0, [pc, #204]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80008f8:	f003 f9bd 	bl	8003c76 <HAL_LTDC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8000902:	f000 f9a9 	bl	8000c58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000916:	2300      	movs	r3, #0
 8000918:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000926:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000928:	2305      	movs	r3, #5
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800094a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	481c      	ldr	r0, [pc, #112]	@ (80009c4 <MX_LTDC_Init+0x158>)
 8000954:	f003 fa2c 	bl	8003db0 <HAL_LTDC_ConfigLayer>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 800095e:	f000 f97b 	bl	8000c58 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800097e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000982:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000984:	2305      	movs	r3, #5
 8000986:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	2201      	movs	r2, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_LTDC_Init+0x158>)
 80009ae:	f003 f9ff 	bl	8003db0 <HAL_LTDC_ConfigLayer>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 80009b8:	f000 f94e 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3768      	adds	r7, #104	@ 0x68
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001cc 	.word	0x200001cc
 80009c8:	40016800 	.word	0x40016800

080009cc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <MX_SPI5_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_SPI5_Init+0x64>)
 80009f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_SPI5_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_SPI5_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_SPI5_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MX_SPI5_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_SPI5_Init+0x64>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_SPI5_Init+0x64>)
 8000a1e:	f004 fadc 	bl	8004fda <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a28:	f000 f916 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000274 	.word	0x20000274
 8000a34:	40015000 	.word	0x40015000

08000a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_USART1_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f005 f8ba 	bl	8005be8 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f8ed 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200002cc 	.word	0x200002cc
 8000a88:	40011000 	.word	0x40011000

08000a8c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <MX_FMC_Init+0x98>)
 8000aa8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000abe:	2210      	movs	r2, #16
 8000ac0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000ac4:	2240      	movs	r2, #64	@ 0x40
 8000ac6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000aca:	2280      	movs	r2, #128	@ 0x80
 8000acc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000aea:	2310      	movs	r3, #16
 8000aec:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000aee:	2310      	movs	r3, #16
 8000af0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000af2:	2310      	movs	r3, #16
 8000af4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000af6:	2310      	movs	r3, #16
 8000af8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000afa:	2310      	movs	r3, #16
 8000afc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000afe:	2310      	movs	r3, #16
 8000b00:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <MX_FMC_Init+0x94>)
 8000b08:	f004 f9d6 	bl	8004eb8 <HAL_SDRAM_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000b12:	f000 f8a1 	bl	8000c58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000314 	.word	0x20000314
 8000b24:	a0000140 	.word	0xa0000140

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	@ 0x38
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	4b43      	ldr	r3, [pc, #268]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a42      	ldr	r2, [pc, #264]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b40      	ldr	r3, [pc, #256]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a3b      	ldr	r2, [pc, #236]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b39      	ldr	r3, [pc, #228]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a34      	ldr	r2, [pc, #208]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b32      	ldr	r3, [pc, #200]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a26      	ldr	r2, [pc, #152]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a11      	ldr	r2, [pc, #68]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_GPIO_Init+0x128>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <MX_GPIO_Init+0x12c>)
 8000c26:	f002 fe33 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_GPIO_Init+0x12c>)
 8000c44:	f002 fb6c 	bl	8003320 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3738      	adds	r7, #56	@ 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40021800 	.word	0x40021800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <HAL_DMA2D_MspInit+0x3c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_DMA2D_MspInit+0x2e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_DMA2D_MspInit+0x40>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a09      	ldr	r2, [pc, #36]	@ (8000cf4 <HAL_DMA2D_MspInit+0x40>)
 8000cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <HAL_DMA2D_MspInit+0x40>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	4002b000 	.word	0x4002b000
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <HAL_I2C_MspInit+0xc4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d14b      	bne.n	8000db2 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a27      	ldr	r2, [pc, #156]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b25      	ldr	r3, [pc, #148]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d64:	2304      	movs	r3, #4
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4815      	ldr	r0, [pc, #84]	@ (8000dc4 <HAL_I2C_MspInit+0xcc>)
 8000d70:	f002 fad6 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d86:	2304      	movs	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <HAL_I2C_MspInit+0xd0>)
 8000d92:	f002 fac5 	bl	8003320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_I2C_MspInit+0xc8>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40005c00 	.word	0x40005c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09a      	sub	sp, #104	@ 0x68
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de8:	2230      	movs	r2, #48	@ 0x30
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fad9 	bl	80063a4 <memset>
  if(hltdc->Instance==LTDC)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a81      	ldr	r2, [pc, #516]	@ (8000ffc <HAL_LTDC_MspInit+0x230>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	f040 80fa 	bne.w	8000ff2 <HAL_LTDC_MspInit+0x226>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8000e02:	2364      	movs	r3, #100	@ 0x64
 8000e04:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e06:	2305      	movs	r3, #5
 8000e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fe8f 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000e20:	f7ff ff1a 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	4b75      	ldr	r3, [pc, #468]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2c:	4a74      	ldr	r2, [pc, #464]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e32:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e34:	4b72      	ldr	r3, [pc, #456]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	4b6e      	ldr	r3, [pc, #440]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	4a6d      	ldr	r2, [pc, #436]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e50:	4b6b      	ldr	r3, [pc, #428]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	4b67      	ldr	r3, [pc, #412]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	4a66      	ldr	r2, [pc, #408]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6c:	4b64      	ldr	r3, [pc, #400]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	4b60      	ldr	r3, [pc, #384]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a5f      	ldr	r2, [pc, #380]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e88:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	4b59      	ldr	r3, [pc, #356]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a58      	ldr	r2, [pc, #352]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b56      	ldr	r3, [pc, #344]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b52      	ldr	r3, [pc, #328]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	4a51      	ldr	r2, [pc, #324]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000edc:	4b48      	ldr	r3, [pc, #288]	@ (8001000 <HAL_LTDC_MspInit+0x234>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000efa:	230e      	movs	r3, #14
 8000efc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000efe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f02:	4619      	mov	r1, r3
 8000f04:	483f      	ldr	r0, [pc, #252]	@ (8001004 <HAL_LTDC_MspInit+0x238>)
 8000f06:	f002 fa0b 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000f0a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000f0e:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f24:	4619      	mov	r1, r3
 8000f26:	4838      	ldr	r0, [pc, #224]	@ (8001008 <HAL_LTDC_MspInit+0x23c>)
 8000f28:	f002 f9fa 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f44:	4619      	mov	r1, r3
 8000f46:	4831      	ldr	r0, [pc, #196]	@ (800100c <HAL_LTDC_MspInit+0x240>)
 8000f48:	f002 f9ea 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000f4c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f50:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	230e      	movs	r3, #14
 8000f60:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f66:	4619      	mov	r1, r3
 8000f68:	4828      	ldr	r0, [pc, #160]	@ (800100c <HAL_LTDC_MspInit+0x240>)
 8000f6a:	f002 f9d9 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000f6e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000f72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f80:	230e      	movs	r3, #14
 8000f82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4821      	ldr	r0, [pc, #132]	@ (8001010 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	f002 f9c8 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f90:	23c0      	movs	r3, #192	@ 0xc0
 8000f92:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa0:	230e      	movs	r3, #14
 8000fa2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481a      	ldr	r0, [pc, #104]	@ (8001014 <HAL_LTDC_MspInit+0x248>)
 8000fac:	f002 f9b8 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4813      	ldr	r0, [pc, #76]	@ (8001018 <HAL_LTDC_MspInit+0x24c>)
 8000fcc:	f002 f9a8 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fd4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fea:	4619      	mov	r1, r3
 8000fec:	4808      	ldr	r0, [pc, #32]	@ (8001010 <HAL_LTDC_MspInit+0x244>)
 8000fee:	f002 f997 	bl	8003320 <HAL_GPIO_Init>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3768      	adds	r7, #104	@ 0x68
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40016800 	.word	0x40016800
 8001000:	40023800 	.word	0x40023800
 8001004:	40021400 	.word	0x40021400
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40021800 	.word	0x40021800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00

0800101c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <HAL_SPI_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12c      	bne.n	8001098 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <HAL_SPI_MspInit+0x88>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_SPI_MspInit+0x88>)
 8001048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_SPI_MspInit+0x88>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_SPI_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <HAL_SPI_MspInit+0x88>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_SPI_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001076:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001088:	2305      	movs	r3, #5
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <HAL_SPI_MspInit+0x8c>)
 8001094:	f002 f944 	bl	8003320 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40015000 	.word	0x40015000
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40021400 	.word	0x40021400

080010ac <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_SPI_MspDeInit+0x30>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10a      	bne.n	80010d4 <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_SPI_MspDeInit+0x34>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_SPI_MspDeInit+0x34>)
 80010c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80010ca:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <HAL_SPI_MspDeInit+0x38>)
 80010d0:	f002 fad2 	bl	8003678 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40015000 	.word	0x40015000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40021400 	.word	0x40021400

080010e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	@ (800116c <HAL_UART_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <HAL_UART_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a17      	ldr	r2, [pc, #92]	@ (8001170 <HAL_UART_MspInit+0x88>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_UART_MspInit+0x88>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <HAL_UART_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a10      	ldr	r2, [pc, #64]	@ (8001170 <HAL_UART_MspInit+0x88>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_UART_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001142:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001154:	2307      	movs	r3, #7
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <HAL_UART_MspInit+0x8c>)
 8001160:	f002 f8de 	bl	8003320 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	@ 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40011000 	.word	0x40011000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800118c:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <HAL_FMC_MspInit+0x104>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d16f      	bne.n	8001274 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001194:	4b39      	ldr	r3, [pc, #228]	@ (800127c <HAL_FMC_MspInit+0x104>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_FMC_MspInit+0x108>)
 80011a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a2:	4a37      	ldr	r2, [pc, #220]	@ (8001280 <HAL_FMC_MspInit+0x108>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_FMC_MspInit+0x108>)
 80011ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011b6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	482c      	ldr	r0, [pc, #176]	@ (8001284 <HAL_FMC_MspInit+0x10c>)
 80011d2:	f002 f8a5 	bl	8003320 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d6:	2301      	movs	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e6:	230c      	movs	r3, #12
 80011e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4826      	ldr	r0, [pc, #152]	@ (8001288 <HAL_FMC_MspInit+0x110>)
 80011f0:	f002 f896 	bl	8003320 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80011f4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	481f      	ldr	r0, [pc, #124]	@ (800128c <HAL_FMC_MspInit+0x114>)
 8001210:	f002 f886 	bl	8003320 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001214:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001218:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <HAL_FMC_MspInit+0x118>)
 8001230:	f002 f876 	bl	8003320 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001234:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001238:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001246:	230c      	movs	r3, #12
 8001248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4811      	ldr	r0, [pc, #68]	@ (8001294 <HAL_FMC_MspInit+0x11c>)
 8001250:	f002 f866 	bl	8003320 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001254:	2360      	movs	r3, #96	@ 0x60
 8001256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001264:	230c      	movs	r3, #12
 8001266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	480a      	ldr	r0, [pc, #40]	@ (8001298 <HAL_FMC_MspInit+0x120>)
 800126e:	f002 f857 	bl	8003320 <HAL_GPIO_Init>
 8001272:	e000      	b.n	8001276 <HAL_FMC_MspInit+0xfe>
    return;
 8001274:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000348 	.word	0x20000348
 8001280:	40023800 	.word	0x40023800
 8001284:	40021400 	.word	0x40021400
 8001288:	40020800 	.word	0x40020800
 800128c:	40021800 	.word	0x40021800
 8001290:	40021000 	.word	0x40021000
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012a4:	f7ff ff68 	bl	8001178 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001306:	f001 fa6b 	bl	80027e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001338:	f7ff ffea 	bl	8001310 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	@ (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001362:	f005 f827 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff f943 	bl	80005f0 <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800136c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001378:	08007efc 	.word	0x08007efc
  ldr r2, =_sbss
 800137c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001380:	200005a4 	.word	0x200005a4

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>

08001386 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800138a:	f000 fa5d 	bl	8001848 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800138e:	20ca      	movs	r0, #202	@ 0xca
 8001390:	f000 f95d 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001394:	20c3      	movs	r0, #195	@ 0xc3
 8001396:	f000 f967 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800139a:	2008      	movs	r0, #8
 800139c:	f000 f964 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80013a0:	2050      	movs	r0, #80	@ 0x50
 80013a2:	f000 f961 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80013a6:	20cf      	movs	r0, #207	@ 0xcf
 80013a8:	f000 f951 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f95b 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80013b2:	20c1      	movs	r0, #193	@ 0xc1
 80013b4:	f000 f958 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80013b8:	2030      	movs	r0, #48	@ 0x30
 80013ba:	f000 f955 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80013be:	20ed      	movs	r0, #237	@ 0xed
 80013c0:	f000 f945 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80013c4:	2064      	movs	r0, #100	@ 0x64
 80013c6:	f000 f94f 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f94c 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80013d0:	2012      	movs	r0, #18
 80013d2:	f000 f949 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80013d6:	2081      	movs	r0, #129	@ 0x81
 80013d8:	f000 f946 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80013dc:	20e8      	movs	r0, #232	@ 0xe8
 80013de:	f000 f936 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80013e2:	2085      	movs	r0, #133	@ 0x85
 80013e4:	f000 f940 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f93d 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80013ee:	2078      	movs	r0, #120	@ 0x78
 80013f0:	f000 f93a 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80013f4:	20cb      	movs	r0, #203	@ 0xcb
 80013f6:	f000 f92a 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80013fa:	2039      	movs	r0, #57	@ 0x39
 80013fc:	f000 f934 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001400:	202c      	movs	r0, #44	@ 0x2c
 8001402:	f000 f931 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f92e 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800140c:	2034      	movs	r0, #52	@ 0x34
 800140e:	f000 f92b 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001412:	2002      	movs	r0, #2
 8001414:	f000 f928 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001418:	20f7      	movs	r0, #247	@ 0xf7
 800141a:	f000 f918 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800141e:	2020      	movs	r0, #32
 8001420:	f000 f922 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001424:	20ea      	movs	r0, #234	@ 0xea
 8001426:	f000 f912 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f91c 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001430:	2000      	movs	r0, #0
 8001432:	f000 f919 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001436:	20b1      	movs	r0, #177	@ 0xb1
 8001438:	f000 f909 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 f913 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001442:	201b      	movs	r0, #27
 8001444:	f000 f910 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001448:	20b6      	movs	r0, #182	@ 0xb6
 800144a:	f000 f900 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800144e:	200a      	movs	r0, #10
 8001450:	f000 f90a 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001454:	20a2      	movs	r0, #162	@ 0xa2
 8001456:	f000 f907 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800145a:	20c0      	movs	r0, #192	@ 0xc0
 800145c:	f000 f8f7 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001460:	2010      	movs	r0, #16
 8001462:	f000 f901 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001466:	20c1      	movs	r0, #193	@ 0xc1
 8001468:	f000 f8f1 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800146c:	2010      	movs	r0, #16
 800146e:	f000 f8fb 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001472:	20c5      	movs	r0, #197	@ 0xc5
 8001474:	f000 f8eb 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001478:	2045      	movs	r0, #69	@ 0x45
 800147a:	f000 f8f5 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800147e:	2015      	movs	r0, #21
 8001480:	f000 f8f2 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001484:	20c7      	movs	r0, #199	@ 0xc7
 8001486:	f000 f8e2 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800148a:	2090      	movs	r0, #144	@ 0x90
 800148c:	f000 f8ec 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001490:	2036      	movs	r0, #54	@ 0x36
 8001492:	f000 f8dc 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001496:	20c8      	movs	r0, #200	@ 0xc8
 8001498:	f000 f8e6 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800149c:	20f2      	movs	r0, #242	@ 0xf2
 800149e:	f000 f8d6 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f8e0 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80014a8:	20b0      	movs	r0, #176	@ 0xb0
 80014aa:	f000 f8d0 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80014ae:	20c2      	movs	r0, #194	@ 0xc2
 80014b0:	f000 f8da 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80014b4:	20b6      	movs	r0, #182	@ 0xb6
 80014b6:	f000 f8ca 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 f8d4 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80014c0:	20a7      	movs	r0, #167	@ 0xa7
 80014c2:	f000 f8d1 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80014c6:	2027      	movs	r0, #39	@ 0x27
 80014c8:	f000 f8ce 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f000 f8cb 	bl	8001668 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80014d2:	202a      	movs	r0, #42	@ 0x2a
 80014d4:	f000 f8bb 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f8c5 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f8c2 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f8bf 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80014ea:	20ef      	movs	r0, #239	@ 0xef
 80014ec:	f000 f8bc 	bl	8001668 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80014f0:	202b      	movs	r0, #43	@ 0x2b
 80014f2:	f000 f8ac 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f8b6 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f8b3 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001502:	2001      	movs	r0, #1
 8001504:	f000 f8b0 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001508:	203f      	movs	r0, #63	@ 0x3f
 800150a:	f000 f8ad 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800150e:	20f6      	movs	r0, #246	@ 0xf6
 8001510:	f000 f89d 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001514:	2001      	movs	r0, #1
 8001516:	f000 f8a7 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f8a4 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001520:	2006      	movs	r0, #6
 8001522:	f000 f8a1 	bl	8001668 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001526:	202c      	movs	r0, #44	@ 0x2c
 8001528:	f000 f891 	bl	800164e <ili9341_WriteReg>
  LCD_Delay(200);
 800152c:	20c8      	movs	r0, #200	@ 0xc8
 800152e:	f000 fa79 	bl	8001a24 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001532:	2026      	movs	r0, #38	@ 0x26
 8001534:	f000 f88b 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001538:	2001      	movs	r0, #1
 800153a:	f000 f895 	bl	8001668 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800153e:	20e0      	movs	r0, #224	@ 0xe0
 8001540:	f000 f885 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001544:	200f      	movs	r0, #15
 8001546:	f000 f88f 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800154a:	2029      	movs	r0, #41	@ 0x29
 800154c:	f000 f88c 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001550:	2024      	movs	r0, #36	@ 0x24
 8001552:	f000 f889 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001556:	200c      	movs	r0, #12
 8001558:	f000 f886 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800155c:	200e      	movs	r0, #14
 800155e:	f000 f883 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001562:	2009      	movs	r0, #9
 8001564:	f000 f880 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001568:	204e      	movs	r0, #78	@ 0x4e
 800156a:	f000 f87d 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800156e:	2078      	movs	r0, #120	@ 0x78
 8001570:	f000 f87a 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001574:	203c      	movs	r0, #60	@ 0x3c
 8001576:	f000 f877 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800157a:	2009      	movs	r0, #9
 800157c:	f000 f874 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001580:	2013      	movs	r0, #19
 8001582:	f000 f871 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001586:	2005      	movs	r0, #5
 8001588:	f000 f86e 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800158c:	2017      	movs	r0, #23
 800158e:	f000 f86b 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001592:	2011      	movs	r0, #17
 8001594:	f000 f868 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f000 f865 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800159e:	20e1      	movs	r0, #225	@ 0xe1
 80015a0:	f000 f855 	bl	800164e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f85f 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80015aa:	2016      	movs	r0, #22
 80015ac:	f000 f85c 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015b0:	201b      	movs	r0, #27
 80015b2:	f000 f859 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80015b6:	2004      	movs	r0, #4
 80015b8:	f000 f856 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80015bc:	2011      	movs	r0, #17
 80015be:	f000 f853 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 f850 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80015c8:	2031      	movs	r0, #49	@ 0x31
 80015ca:	f000 f84d 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80015ce:	2033      	movs	r0, #51	@ 0x33
 80015d0:	f000 f84a 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80015d4:	2042      	movs	r0, #66	@ 0x42
 80015d6:	f000 f847 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80015da:	2005      	movs	r0, #5
 80015dc:	f000 f844 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80015e0:	200c      	movs	r0, #12
 80015e2:	f000 f841 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80015e6:	200a      	movs	r0, #10
 80015e8:	f000 f83e 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80015ec:	2028      	movs	r0, #40	@ 0x28
 80015ee:	f000 f83b 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80015f2:	202f      	movs	r0, #47	@ 0x2f
 80015f4:	f000 f838 	bl	8001668 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80015f8:	200f      	movs	r0, #15
 80015fa:	f000 f835 	bl	8001668 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80015fe:	2011      	movs	r0, #17
 8001600:	f000 f825 	bl	800164e <ili9341_WriteReg>
  LCD_Delay(200);
 8001604:	20c8      	movs	r0, #200	@ 0xc8
 8001606:	f000 fa0d 	bl	8001a24 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800160a:	2029      	movs	r0, #41	@ 0x29
 800160c:	f000 f81f 	bl	800164e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001610:	202c      	movs	r0, #44	@ 0x2c
 8001612:	f000 f81c 	bl	800164e <ili9341_WriteReg>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}

0800161a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800161e:	f000 f913 	bl	8001848 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001622:	2103      	movs	r1, #3
 8001624:	20d3      	movs	r0, #211	@ 0xd3
 8001626:	f000 f82c 	bl	8001682 <ili9341_ReadData>
 800162a:	4603      	mov	r3, r0
 800162c:	b29b      	uxth	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}

08001632 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001636:	2029      	movs	r0, #41	@ 0x29
 8001638:	f000 f809 	bl	800164e <ili9341_WriteReg>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001644:	2028      	movs	r0, #40	@ 0x28
 8001646:	f000 f802 	bl	800164e <ili9341_WriteReg>
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}

0800164e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f98e 	bl	800197c <LCD_IO_WriteReg>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f95f 	bl	8001938 <LCD_IO_WriteData>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	460a      	mov	r2, r1
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	4613      	mov	r3, r2
 8001690:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001692:	797a      	ldrb	r2, [r7, #5]
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f000 f991 	bl	80019c0 <LCD_IO_ReadData>
 800169e:	4603      	mov	r3, r0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80016ac:	23f0      	movs	r3, #240	@ 0xf0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80016bc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80016d0:	4819      	ldr	r0, [pc, #100]	@ (8001738 <SPIx_Init+0x6c>)
 80016d2:	f004 f939 	bl	8005948 <HAL_SPI_GetState>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d12b      	bne.n	8001734 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <SPIx_Init+0x6c>)
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <SPIx_Init+0x70>)
 80016e0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <SPIx_Init+0x6c>)
 80016e4:	2218      	movs	r2, #24
 80016e6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <SPIx_Init+0x6c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <SPIx_Init+0x6c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80016f4:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <SPIx_Init+0x6c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <SPIx_Init+0x6c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <SPIx_Init+0x6c>)
 8001702:	2207      	movs	r2, #7
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <SPIx_Init+0x6c>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <SPIx_Init+0x6c>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <SPIx_Init+0x6c>)
 8001714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001718:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <SPIx_Init+0x6c>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SPIx_Init+0x6c>)
 8001722:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001726:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001728:	4803      	ldr	r0, [pc, #12]	@ (8001738 <SPIx_Init+0x6c>)
 800172a:	f000 f853 	bl	80017d4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800172e:	4802      	ldr	r0, [pc, #8]	@ (8001738 <SPIx_Init+0x6c>)
 8001730:	f003 fc53 	bl	8004fda <HAL_SPI_Init>
  }
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000034c 	.word	0x2000034c
 800173c:	40015000 	.word	0x40015000

08001740 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <SPIx_Read+0x38>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	4808      	ldr	r0, [pc, #32]	@ (800177c <SPIx_Read+0x3c>)
 800175c:	f003 fe32 	bl	80053c4 <HAL_SPI_Receive>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800176a:	f000 f827 	bl	80017bc <SPIx_Error>
  }

  return readvalue;
 800176e:	68bb      	ldr	r3, [r7, #8]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000104 	.word	0x20000104
 800177c:	2000034c 	.word	0x2000034c

08001780 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <SPIx_Write+0x34>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	1db9      	adds	r1, r7, #6
 8001794:	2201      	movs	r2, #1
 8001796:	4808      	ldr	r0, [pc, #32]	@ (80017b8 <SPIx_Write+0x38>)
 8001798:	f003 fcd0 	bl	800513c <HAL_SPI_Transmit>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80017a6:	f000 f809 	bl	80017bc <SPIx_Error>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000104 	.word	0x20000104
 80017b8:	2000034c 	.word	0x2000034c

080017bc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <SPIx_Error+0x14>)
 80017c2:	f003 fc93 	bl	80050ec <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80017c6:	f7ff ff81 	bl	80016cc <SPIx_Init>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000034c 	.word	0x2000034c

080017d4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <SPIx_MspInit+0x6c>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <SPIx_MspInit+0x6c>)
 80017e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80017ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <SPIx_MspInit+0x6c>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <SPIx_MspInit+0x6c>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <SPIx_MspInit+0x6c>)
 8001802:	f043 0320 	orr.w	r3, r3, #32
 8001806:	6313      	str	r3, [r2, #48]	@ 0x30
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <SPIx_MspInit+0x6c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001814:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001822:	2301      	movs	r3, #1
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001826:	2305      	movs	r3, #5
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <SPIx_MspInit+0x70>)
 8001832:	f001 fd75 	bl	8003320 <HAL_GPIO_Init>
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40021400 	.word	0x40021400

08001848 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800184e:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <LCD_IO_Init+0xe0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d164      	bne.n	8001920 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <LCD_IO_Init+0xe0>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	4b32      	ldr	r3, [pc, #200]	@ (800192c <LCD_IO_Init+0xe4>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	4a31      	ldr	r2, [pc, #196]	@ (800192c <LCD_IO_Init+0xe4>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6313      	str	r3, [r2, #48]	@ 0x30
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <LCD_IO_Init+0xe4>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	4827      	ldr	r0, [pc, #156]	@ (8001930 <LCD_IO_Init+0xe8>)
 8001892:	f001 fd45 	bl	8003320 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <LCD_IO_Init+0xe4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a23      	ldr	r2, [pc, #140]	@ (800192c <LCD_IO_Init+0xe4>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <LCD_IO_Init+0xe4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	4819      	ldr	r0, [pc, #100]	@ (8001930 <LCD_IO_Init+0xe8>)
 80018cc:	f001 fd28 	bl	8003320 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <LCD_IO_Init+0xe4>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <LCD_IO_Init+0xe4>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <LCD_IO_Init+0xe4>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80018ec:	2304      	movs	r3, #4
 80018ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	480c      	ldr	r0, [pc, #48]	@ (8001934 <LCD_IO_Init+0xec>)
 8001904:	f001 fd0c 	bl	8003320 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001908:	2200      	movs	r2, #0
 800190a:	2104      	movs	r1, #4
 800190c:	4809      	ldr	r0, [pc, #36]	@ (8001934 <LCD_IO_Init+0xec>)
 800190e:	f001 ffbf 	bl	8003890 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001912:	2201      	movs	r2, #1
 8001914:	2104      	movs	r1, #4
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <LCD_IO_Init+0xec>)
 8001918:	f001 ffba 	bl	8003890 <HAL_GPIO_WritePin>

    SPIx_Init();
 800191c:	f7ff fed6 	bl	80016cc <SPIx_Init>
  }
}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200003a4 	.word	0x200003a4
 800192c:	40023800 	.word	0x40023800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40020800 	.word	0x40020800

08001938 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <LCD_IO_WriteData+0x3c>)
 800194a:	f001 ffa1 	bl	8003890 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	4809      	ldr	r0, [pc, #36]	@ (8001978 <LCD_IO_WriteData+0x40>)
 8001954:	f001 ff9c 	bl	8003890 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff10 	bl	8001780 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001960:	2201      	movs	r2, #1
 8001962:	2104      	movs	r1, #4
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <LCD_IO_WriteData+0x40>)
 8001966:	f001 ff93 	bl	8003890 <HAL_GPIO_WritePin>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40020800 	.word	0x40020800

0800197c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800198c:	480a      	ldr	r0, [pc, #40]	@ (80019b8 <LCD_IO_WriteReg+0x3c>)
 800198e:	f001 ff7f 	bl	8003890 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001992:	2200      	movs	r2, #0
 8001994:	2104      	movs	r1, #4
 8001996:	4809      	ldr	r0, [pc, #36]	@ (80019bc <LCD_IO_WriteReg+0x40>)
 8001998:	f001 ff7a 	bl	8003890 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff feed 	bl	8001780 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80019a6:	2201      	movs	r2, #1
 80019a8:	2104      	movs	r1, #4
 80019aa:	4804      	ldr	r0, [pc, #16]	@ (80019bc <LCD_IO_WriteReg+0x40>)
 80019ac:	f001 ff70 	bl	8003890 <HAL_GPIO_WritePin>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40020800 	.word	0x40020800

080019c0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	80fb      	strh	r3, [r7, #6]
 80019cc:	4613      	mov	r3, r2
 80019ce:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80019d4:	2200      	movs	r2, #0
 80019d6:	2104      	movs	r1, #4
 80019d8:	4810      	ldr	r0, [pc, #64]	@ (8001a1c <LCD_IO_ReadData+0x5c>)
 80019da:	f001 ff59 	bl	8003890 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e4:	480e      	ldr	r0, [pc, #56]	@ (8001a20 <LCD_IO_ReadData+0x60>)
 80019e6:	f001 ff53 	bl	8003890 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fec7 	bl	8001780 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80019f2:	797b      	ldrb	r3, [r7, #5]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fea3 	bl	8001740 <SPIx_Read>
 80019fa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a02:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <LCD_IO_ReadData+0x60>)
 8001a04:	f001 ff44 	bl	8003890 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <LCD_IO_ReadData+0x5c>)
 8001a0e:	f001 ff3f 	bl	8003890 <HAL_GPIO_WritePin>

  return readvalue;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00

08001a24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fef7 	bl	8002820 <HAL_Delay>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a42:	4a2e      	ldr	r2, [pc, #184]	@ (8001afc <BSP_LCD_Init+0xc0>)
 8001a44:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a48:	2209      	movs	r2, #9
 8001a4a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a54:	221d      	movs	r2, #29
 8001a56:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a60:	f240 120d 	movw	r2, #269	@ 0x10d
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a68:	f240 1243 	movw	r2, #323	@ 0x143
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a70:	f240 1217 	movw	r2, #279	@ 0x117
 8001a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a78:	f240 1247 	movw	r2, #327	@ 0x147
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <BSP_LCD_Init+0xc4>)
 8001a98:	2208      	movs	r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <BSP_LCD_Init+0xc4>)
 8001a9e:	22c0      	movs	r2, #192	@ 0xc0
 8001aa0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <BSP_LCD_Init+0xc4>)
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <BSP_LCD_Init+0xc4>)
 8001aaa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001ab0:	4813      	ldr	r0, [pc, #76]	@ (8001b00 <BSP_LCD_Init+0xc4>)
 8001ab2:	f003 f841 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001ace:	f000 fb37 	bl	8002140 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001ad2:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <BSP_LCD_Init+0xbc>)
 8001ad4:	f002 f8cf 	bl	8003c76 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <BSP_LCD_Init+0xc8>)
 8001ada:	4a0b      	ldr	r2, [pc, #44]	@ (8001b08 <BSP_LCD_Init+0xcc>)
 8001adc:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <BSP_LCD_Init+0xc8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001ae6:	f000 fc5f 	bl	80023a8 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001aea:	4808      	ldr	r0, [pc, #32]	@ (8001b0c <BSP_LCD_Init+0xd0>)
 8001aec:	f000 f8b4 	bl	8001c58 <BSP_LCD_SetFont>

  return LCD_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200003a8 	.word	0x200003a8
 8001afc:	40016800 	.word	0x40016800
 8001b00:	20000490 	.word	0x20000490
 8001b04:	200004dc 	.word	0x200004dc
 8001b08:	200000cc 	.word	0x200000cc
 8001b0c:	20000108 	.word	0x20000108

08001b10 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <BSP_LCD_GetXSize+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	4798      	blx	r3
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200004dc 	.word	0x200004dc

08001b28 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <BSP_LCD_GetYSize+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b32:	4798      	blx	r3
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200004dc 	.word	0x200004dc

08001b40 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	@ 0x40
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001b50:	f7ff ffde 	bl	8001b10 <BSP_LCD_GetXSize>
 8001b54:	4603      	mov	r3, r0
 8001b56:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001b5c:	f7ff ffe4 	bl	8001b28 <BSP_LCD_GetYSize>
 8001b60:	4603      	mov	r3, r0
 8001b62:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001b6c:	23ff      	movs	r3, #255	@ 0xff
 8001b6e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001b90:	f7ff ffbe 	bl	8001b10 <BSP_LCD_GetXSize>
 8001b94:	4603      	mov	r3, r0
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001b98:	f7ff ffc6 	bl	8001b28 <BSP_LCD_GetYSize>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4814      	ldr	r0, [pc, #80]	@ (8001bfc <BSP_LCD_LayerDefaultInit+0xbc>)
 8001baa:	f002 f901 	bl	8003db0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001bae:	88fa      	ldrh	r2, [r7, #6]
 8001bb0:	4913      	ldr	r1, [pc, #76]	@ (8001c00 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	490e      	ldr	r1, [pc, #56]	@ (8001c00 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001bd6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	4909      	ldr	r1, [pc, #36]	@ (8001c00 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001bea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <BSP_LCD_LayerDefaultInit+0xbc>)
 8001bee:	f002 f91d 	bl	8003e2c <HAL_LTDC_EnableDither>
}
 8001bf2:	bf00      	nop
 8001bf4:	3740      	adds	r7, #64	@ 0x40
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200003a8 	.word	0x200003a8
 8001c00:	200004c4 	.word	0x200004c4
 8001c04:	20000108 	.word	0x20000108

08001c08 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <BSP_LCD_SelectLayer+0x1c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200004c0 	.word	0x200004c0

08001c28 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <BSP_LCD_SetTextColor+0x28>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <BSP_LCD_SetTextColor+0x2c>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	200004c0 	.word	0x200004c0
 8001c54:	200004c4 	.word	0x200004c4

08001c58 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <BSP_LCD_SetFont+0x2c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <BSP_LCD_SetFont+0x30>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3308      	adds	r3, #8
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200004c0 	.word	0x200004c0
 8001c88:	200004c4 	.word	0x200004c4

08001c8c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <BSP_LCD_Clear+0x48>)
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <BSP_LCD_Clear+0x48>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <BSP_LCD_Clear+0x4c>)
 8001c9e:	2134      	movs	r1, #52	@ 0x34
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	335c      	adds	r3, #92	@ 0x5c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461e      	mov	r6, r3
 8001cac:	f7ff ff30 	bl	8001b10 <BSP_LCD_GetXSize>
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	f7ff ff39 	bl	8001b28 <BSP_LCD_GetYSize>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	462a      	mov	r2, r5
 8001cc4:	4631      	mov	r1, r6
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f000 fb36 	bl	8002338 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd4:	200004c0 	.word	0x200004c0
 8001cd8:	200003a8 	.word	0x200003a8

08001cdc <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001cdc:	b5b0      	push	{r4, r5, r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <BSP_LCD_DrawHLine+0x70>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <BSP_LCD_DrawHLine+0x74>)
 8001cf8:	2134      	movs	r1, #52	@ 0x34
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	335c      	adds	r3, #92	@ 0x5c
 8001d02:	681c      	ldr	r4, [r3, #0]
 8001d04:	f7ff ff04 	bl	8001b10 <BSP_LCD_GetXSize>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	fb03 f202 	mul.w	r2, r3, r2
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4423      	add	r3, r4
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <BSP_LCD_DrawHLine+0x70>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	887c      	ldrh	r4, [r7, #2]
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <BSP_LCD_DrawHLine+0x70>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4d0b      	ldr	r5, [pc, #44]	@ (8001d54 <BSP_LCD_DrawHLine+0x78>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	442b      	add	r3, r5
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	2300      	movs	r3, #0
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	f000 fafb 	bl	8002338 <FillBuffer>
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200004c0 	.word	0x200004c0
 8001d50:	200003a8 	.word	0x200003a8
 8001d54:	200004c4 	.word	0x200004c4

08001d58 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
 8001d62:	460b      	mov	r3, r1
 8001d64:	80bb      	strh	r3, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	f1c3 0303 	rsb	r3, r3, #3
 8001d72:	617b      	str	r3, [r7, #20]
  curx = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 8001d7c:	e0c7      	b.n	8001f0e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4413      	add	r3, r2
 8001d86:	b298      	uxth	r0, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b299      	uxth	r1, r3
 8001d92:	4b64      	ldr	r3, [pc, #400]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4c64      	ldr	r4, [pc, #400]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4423      	add	r3, r4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	f000 faa1 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	88fa      	ldrh	r2, [r7, #6]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	b298      	uxth	r0, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	88ba      	ldrh	r2, [r7, #4]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	b299      	uxth	r1, r3
 8001dbe:	4b59      	ldr	r3, [pc, #356]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4c59      	ldr	r4, [pc, #356]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4423      	add	r3, r4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f000 fa8b 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b298      	uxth	r0, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	88ba      	ldrh	r2, [r7, #4]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	b299      	uxth	r1, r3
 8001dea:	4b4e      	ldr	r3, [pc, #312]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4c4e      	ldr	r4, [pc, #312]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4423      	add	r3, r4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f000 fa75 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	88ba      	ldrh	r2, [r7, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	b299      	uxth	r1, r3
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4c43      	ldr	r4, [pc, #268]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4423      	add	r3, r4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f000 fa5f 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4413      	add	r3, r2
 8001e36:	b298      	uxth	r0, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b299      	uxth	r1, r3
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4c38      	ldr	r4, [pc, #224]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4423      	add	r3, r4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f000 fa49 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	88fa      	ldrh	r2, [r7, #6]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b298      	uxth	r0, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	88bb      	ldrh	r3, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4c2d      	ldr	r4, [pc, #180]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4423      	add	r3, r4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f000 fa33 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b298      	uxth	r0, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4c22      	ldr	r4, [pc, #136]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4423      	add	r3, r4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f000 fa1d 	bl	80022ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	b298      	uxth	r0, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b299      	uxth	r1, r3
 8001ec6:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <BSP_LCD_DrawCircle+0x1cc>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4c17      	ldr	r4, [pc, #92]	@ (8001f28 <BSP_LCD_DrawCircle+0x1d0>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4423      	add	r3, r4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f000 fa07 	bl	80022ec <BSP_LCD_DrawPixel>

    if (d < 0)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da06      	bge.n	8001ef2 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	009a      	lsls	r2, r3, #2
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4413      	add	r3, r2
 8001eec:	3306      	adds	r3, #6
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e00a      	b.n	8001f08 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	009a      	lsls	r2, r3, #2
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	4413      	add	r3, r2
 8001efe:	330a      	adds	r3, #10
 8001f00:	617b      	str	r3, [r7, #20]
      cury--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	f67f af33 	bls.w	8001d7e <BSP_LCD_DrawCircle+0x26>
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200004c0 	.word	0x200004c0
 8001f28:	200004c4 	.word	0x200004c4

08001f2c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af02      	add	r7, sp, #8
 8001f34:	4604      	mov	r4, r0
 8001f36:	4608      	mov	r0, r1
 8001f38:	4611      	mov	r1, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4623      	mov	r3, r4
 8001f3e:	80fb      	strh	r3, [r7, #6]
 8001f40:	4603      	mov	r3, r0
 8001f42:	80bb      	strh	r3, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001f50:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <BSP_LCD_FillRect+0xa8>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4920      	ldr	r1, [pc, #128]	@ (8001fd8 <BSP_LCD_FillRect+0xac>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fe60 	bl	8001c28 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001f68:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <BSP_LCD_FillRect+0xa8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <BSP_LCD_FillRect+0xb0>)
 8001f6e:	2134      	movs	r1, #52	@ 0x34
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	335c      	adds	r3, #92	@ 0x5c
 8001f78:	681c      	ldr	r4, [r3, #0]
 8001f7a:	f7ff fdc9 	bl	8001b10 <BSP_LCD_GetXSize>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	88bb      	ldrh	r3, [r7, #4]
 8001f82:	fb03 f202 	mul.w	r2, r3, r2
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4423      	add	r3, r4
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <BSP_LCD_FillRect+0xa8>)
 8001f92:	681c      	ldr	r4, [r3, #0]
 8001f94:	68fd      	ldr	r5, [r7, #12]
 8001f96:	887e      	ldrh	r6, [r7, #2]
 8001f98:	f8b7 8000 	ldrh.w	r8, [r7]
 8001f9c:	f7ff fdb8 	bl	8001b10 <BSP_LCD_GetXSize>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	1ad1      	subs	r1, r2, r3
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <BSP_LCD_FillRect+0xa8>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <BSP_LCD_FillRect+0xac>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	9100      	str	r1, [sp, #0]
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 f9b8 	bl	8002338 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200004c0 	.word	0x200004c0
 8001fd8:	200004c4 	.word	0x200004c4
 8001fdc:	200003a8 	.word	0x200003a8

08001fe0 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
 8001fea:	460b      	mov	r3, r1
 8001fec:	80bb      	strh	r3, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	f1c3 0303 	rsb	r3, r3, #3
 8001ffa:	617b      	str	r3, [r7, #20]

  curx = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002004:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <BSP_LCD_FillCircle+0x138>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4944      	ldr	r1, [pc, #272]	@ (800211c <BSP_LCD_FillCircle+0x13c>)
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fe06 	bl	8001c28 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800201c:	e061      	b.n	80020e2 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d021      	beq.n	8002068 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	b29b      	uxth	r3, r3
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b298      	uxth	r0, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	b29a      	uxth	r2, r3
 8002032:	88bb      	ldrh	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	b299      	uxth	r1, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	b29b      	uxth	r3, r3
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	f7ff fe4b 	bl	8001cdc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	b29b      	uxth	r3, r3
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	b298      	uxth	r0, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	b29b      	uxth	r3, r3
 8002054:	88ba      	ldrh	r2, [r7, #4]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	b299      	uxth	r1, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	b29b      	uxth	r3, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff fe3a 	bl	8001cdc <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d021      	beq.n	80020b2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	b29b      	uxth	r3, r3
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b298      	uxth	r0, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	b29b      	uxth	r3, r3
 800207c:	88ba      	ldrh	r2, [r7, #4]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	b299      	uxth	r1, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	b29b      	uxth	r3, r3
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	f7ff fe26 	bl	8001cdc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	b29b      	uxth	r3, r3
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	b298      	uxth	r0, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	b29a      	uxth	r2, r3
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	b299      	uxth	r1, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	f7ff fe15 	bl	8001cdc <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	da06      	bge.n	80020c6 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4413      	add	r3, r2
 80020c0:	3306      	adds	r3, #6
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	009a      	lsls	r2, r3, #2
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	4413      	add	r3, r2
 80020d2:	330a      	adds	r3, #10
 80020d4:	617b      	str	r3, [r7, #20]
      cury--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	3301      	adds	r3, #1
 80020e0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d999      	bls.n	800201e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <BSP_LCD_FillCircle+0x138>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	490b      	ldr	r1, [pc, #44]	@ (800211c <BSP_LCD_FillCircle+0x13c>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fd93 	bl	8001c28 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	88b9      	ldrh	r1, [r7, #4]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fe25 	bl	8001d58 <BSP_LCD_DrawCircle>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200004c0 	.word	0x200004c0
 800211c:	200004c4 	.word	0x200004c4

08002120 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <BSP_LCD_DisplayOn+0x1c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800212e:	4b03      	ldr	r3, [pc, #12]	@ (800213c <BSP_LCD_DisplayOn+0x1c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4798      	blx	r3
  }
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200004dc 	.word	0x200004dc

08002140 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	@ 0x38
 8002144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	4b61      	ldr	r3, [pc, #388]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	4a60      	ldr	r2, [pc, #384]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002150:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002154:	6453      	str	r3, [r2, #68]	@ 0x44
 8002156:	4b5e      	ldr	r3, [pc, #376]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	4b5a      	ldr	r3, [pc, #360]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a59      	ldr	r2, [pc, #356]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 800216c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b57      	ldr	r3, [pc, #348]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	4b4c      	ldr	r3, [pc, #304]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a4b      	ldr	r2, [pc, #300]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b49      	ldr	r3, [pc, #292]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b45      	ldr	r3, [pc, #276]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a44      	ldr	r2, [pc, #272]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b42      	ldr	r3, [pc, #264]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a3d      	ldr	r2, [pc, #244]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a36      	ldr	r2, [pc, #216]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 8002214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <BSP_LCD_MspInit+0x190>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002226:	f641 0358 	movw	r3, #6232	@ 0x1858
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002234:	2302      	movs	r3, #2
 8002236:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002238:	230e      	movs	r3, #14
 800223a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800223c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	4824      	ldr	r0, [pc, #144]	@ (80022d4 <BSP_LCD_MspInit+0x194>)
 8002244:	f001 f86c 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002248:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800224e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002252:	4619      	mov	r1, r3
 8002254:	4820      	ldr	r0, [pc, #128]	@ (80022d8 <BSP_LCD_MspInit+0x198>)
 8002256:	f001 f863 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800225a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	481d      	ldr	r0, [pc, #116]	@ (80022dc <BSP_LCD_MspInit+0x19c>)
 8002268:	f001 f85a 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800226c:	2348      	movs	r3, #72	@ 0x48
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	481a      	ldr	r0, [pc, #104]	@ (80022e0 <BSP_LCD_MspInit+0x1a0>)
 8002278:	f001 f852 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800227c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4816      	ldr	r0, [pc, #88]	@ (80022e4 <BSP_LCD_MspInit+0x1a4>)
 800228a:	f001 f849 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800228e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	4813      	ldr	r0, [pc, #76]	@ (80022e8 <BSP_LCD_MspInit+0x1a8>)
 800229c:	f001 f840 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80022a0:	2303      	movs	r3, #3
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80022a4:	2309      	movs	r3, #9
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80022a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	480a      	ldr	r0, [pc, #40]	@ (80022d8 <BSP_LCD_MspInit+0x198>)
 80022b0:	f001 f836 	bl	8003320 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80022b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80022ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022be:	4619      	mov	r1, r3
 80022c0:	4809      	ldr	r0, [pc, #36]	@ (80022e8 <BSP_LCD_MspInit+0x1a8>)
 80022c2:	f001 f82d 	bl	8003320 <HAL_GPIO_Init>
}
 80022c6:	bf00      	nop
 80022c8:	3738      	adds	r7, #56	@ 0x38
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800

080022ec <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	603a      	str	r2, [r7, #0]
 80022f6:	80fb      	strh	r3, [r7, #6]
 80022f8:	460b      	mov	r3, r1
 80022fa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <BSP_LCD_DrawPixel+0x44>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0c      	ldr	r2, [pc, #48]	@ (8002334 <BSP_LCD_DrawPixel+0x48>)
 8002302:	2134      	movs	r1, #52	@ 0x34
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	335c      	adds	r3, #92	@ 0x5c
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	88bd      	ldrh	r5, [r7, #4]
 8002310:	f7ff fbfe 	bl	8001b10 <BSP_LCD_GetXSize>
 8002314:	4603      	mov	r3, r0
 8002316:	fb03 f205 	mul.w	r2, r3, r5
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4423      	add	r3, r4
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	200004c0 	.word	0x200004c0
 8002334:	200003a8 	.word	0x200003a8

08002338 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <FillBuffer+0x68>)
 8002348:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800234c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <FillBuffer+0x68>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002354:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <FillBuffer+0x68>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800235a:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <FillBuffer+0x68>)
 800235c:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <FillBuffer+0x6c>)
 800235e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002360:	480f      	ldr	r0, [pc, #60]	@ (80023a0 <FillBuffer+0x68>)
 8002362:	f000 fd51 	bl	8002e08 <HAL_DMA2D_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d115      	bne.n	8002398 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <FillBuffer+0x68>)
 8002370:	f000 fea8 	bl	80030c4 <HAL_DMA2D_ConfigLayer>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69f9      	ldr	r1, [r7, #28]
 8002384:	4806      	ldr	r0, [pc, #24]	@ (80023a0 <FillBuffer+0x68>)
 8002386:	f000 fd88 	bl	8002e9a <HAL_DMA2D_Start>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002390:	210a      	movs	r1, #10
 8002392:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <FillBuffer+0x68>)
 8002394:	f000 fdac 	bl	8002ef0 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000450 	.word	0x20000450
 80023a4:	4002b000 	.word	0x4002b000

080023a8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80023ac:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002458 <BSP_SDRAM_Init+0xb0>)
 80023b0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023ba:	2207      	movs	r2, #7
 80023bc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80023be:	4b27      	ldr	r3, [pc, #156]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023c0:	2204      	movs	r2, #4
 80023c2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80023c4:	4b25      	ldr	r3, [pc, #148]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023c6:	2207      	movs	r2, #7
 80023c8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023cc:	2202      	movs	r2, #2
 80023ce:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023d2:	2202      	movs	r2, #2
 80023d4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 80023d8:	2202      	movs	r2, #2
 80023da:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023de:	2201      	movs	r2, #1
 80023e0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023ea:	2204      	movs	r2, #4
 80023ec:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023f0:	2210      	movs	r2, #16
 80023f2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023f6:	2240      	movs	r2, #64	@ 0x40
 80023f8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80023fa:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 80023fc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002400:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002402:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 8002404:	2200      	movs	r2, #0
 8002406:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 800240a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800240e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002410:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 8002418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800241e:	2100      	movs	r1, #0
 8002420:	480c      	ldr	r0, [pc, #48]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 8002422:	f000 f87f 	bl	8002524 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002426:	490d      	ldr	r1, [pc, #52]	@ (800245c <BSP_SDRAM_Init+0xb4>)
 8002428:	480a      	ldr	r0, [pc, #40]	@ (8002454 <BSP_SDRAM_Init+0xac>)
 800242a:	f002 fd45 	bl	8004eb8 <HAL_SDRAM_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <BSP_SDRAM_Init+0xb8>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e002      	b.n	8002442 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <BSP_SDRAM_Init+0xb8>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002442:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002446:	f000 f80d 	bl	8002464 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <BSP_SDRAM_Init+0xb8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200004e0 	.word	0x200004e0
 8002458:	a0000140 	.word	0xa0000140
 800245c:	20000514 	.word	0x20000514
 8002460:	20000110 	.word	0x20000110

08002464 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002470:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002478:	2208      	movs	r2, #8
 800247a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800247c:	4b27      	ldr	r3, [pc, #156]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800247e:	2201      	movs	r2, #1
 8002480:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002482:	4b26      	ldr	r3, [pc, #152]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800248c:	4923      	ldr	r1, [pc, #140]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800248e:	4824      	ldr	r0, [pc, #144]	@ (8002520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002490:	f002 fd46 	bl	8004f20 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002494:	2001      	movs	r0, #1
 8002496:	f000 f9c3 	bl	8002820 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024a2:	2208      	movs	r2, #8
 80024a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80024b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024b6:	4919      	ldr	r1, [pc, #100]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024b8:	4819      	ldr	r0, [pc, #100]	@ (8002520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80024ba:	f002 fd31 	bl	8004f20 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024c0:	2203      	movs	r2, #3
 80024c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024c6:	2208      	movs	r2, #8
 80024c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024cc:	2204      	movs	r2, #4
 80024ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80024d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024da:	4910      	ldr	r1, [pc, #64]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024dc:	4810      	ldr	r0, [pc, #64]	@ (8002520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80024de:	f002 fd1f 	bl	8004f20 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80024e2:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80024e6:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024ea:	2204      	movs	r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024f0:	2208      	movs	r2, #8
 80024f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a07      	ldr	r2, [pc, #28]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024fe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002504:	4905      	ldr	r1, [pc, #20]	@ (800251c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002506:	4806      	ldr	r0, [pc, #24]	@ (8002520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002508:	f002 fd0a 	bl	8004f20 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4804      	ldr	r0, [pc, #16]	@ (8002520 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002510:	f002 fd3b 	bl	8004f8a <HAL_SDRAM_ProgramRefreshRate>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000530 	.word	0x20000530
 8002520:	200004e0 	.word	0x200004e0

08002524 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b090      	sub	sp, #64	@ 0x40
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80ec 	beq.w	800270e <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800253a:	4b77      	ldr	r3, [pc, #476]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	4a76      	ldr	r2, [pc, #472]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6393      	str	r3, [r2, #56]	@ 0x38
 8002546:	4b74      	ldr	r3, [pc, #464]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
 8002556:	4b70      	ldr	r3, [pc, #448]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a6f      	ldr	r2, [pc, #444]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 800255c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b6d      	ldr	r3, [pc, #436]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	4b69      	ldr	r3, [pc, #420]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a68      	ldr	r2, [pc, #416]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b66      	ldr	r3, [pc, #408]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	4b62      	ldr	r3, [pc, #392]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a61      	ldr	r2, [pc, #388]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b5f      	ldr	r3, [pc, #380]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	4b54      	ldr	r3, [pc, #336]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a53      	ldr	r2, [pc, #332]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025cc:	f043 0310 	orr.w	r3, r3, #16
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b51      	ldr	r3, [pc, #324]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025e8:	f043 0320 	orr.w	r3, r3, #32
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b46      	ldr	r3, [pc, #280]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 8002604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <BSP_SDRAM_MspInit+0x1f4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800261a:	2302      	movs	r3, #2
 800261c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002622:	230c      	movs	r3, #12
 8002624:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002626:	2360      	movs	r3, #96	@ 0x60
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800262a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800262e:	4619      	mov	r1, r3
 8002630:	483a      	ldr	r0, [pc, #232]	@ (800271c <BSP_SDRAM_MspInit+0x1f8>)
 8002632:	f000 fe75 	bl	8003320 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002636:	2301      	movs	r3, #1
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800263a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800263e:	4619      	mov	r1, r3
 8002640:	4837      	ldr	r0, [pc, #220]	@ (8002720 <BSP_SDRAM_MspInit+0x1fc>)
 8002642:	f000 fe6d 	bl	8003320 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002646:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800264c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002650:	4619      	mov	r1, r3
 8002652:	4834      	ldr	r0, [pc, #208]	@ (8002724 <BSP_SDRAM_MspInit+0x200>)
 8002654:	f000 fe64 	bl	8003320 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002658:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800265e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	4830      	ldr	r0, [pc, #192]	@ (8002728 <BSP_SDRAM_MspInit+0x204>)
 8002666:	f000 fe5b 	bl	8003320 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800266a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002670:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002674:	4619      	mov	r1, r3
 8002676:	482d      	ldr	r0, [pc, #180]	@ (800272c <BSP_SDRAM_MspInit+0x208>)
 8002678:	f000 fe52 	bl	8003320 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800267c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002686:	4619      	mov	r1, r3
 8002688:	4829      	ldr	r0, [pc, #164]	@ (8002730 <BSP_SDRAM_MspInit+0x20c>)
 800268a:	f000 fe49 	bl	8003320 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800268e:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800269a:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 800269c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026a0:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80026a2:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026a8:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026b0:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80026b2:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026b8:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026c6:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026d0:	2203      	movs	r2, #3
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026e2:	4a15      	ldr	r2, [pc, #84]	@ (8002738 <BSP_SDRAM_MspInit+0x214>)
 80026e4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ec:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 80026f2:	4810      	ldr	r0, [pc, #64]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026f4:	f000 fa78 	bl	8002be8 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80026f8:	480e      	ldr	r0, [pc, #56]	@ (8002734 <BSP_SDRAM_MspInit+0x210>)
 80026fa:	f000 f9c7 	bl	8002a8c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	210f      	movs	r1, #15
 8002702:	2038      	movs	r0, #56	@ 0x38
 8002704:	f000 f98b 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002708:	2038      	movs	r0, #56	@ 0x38
 800270a:	f000 f9a4 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800270e:	bf00      	nop
 8002710:	3740      	adds	r7, #64	@ 0x40
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	20000540 	.word	0x20000540
 8002738:	40026410 	.word	0x40026410

0800273c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002740:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0d      	ldr	r2, [pc, #52]	@ (800277c <HAL_Init+0x40>)
 8002746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800274a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_Init+0x40>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_Init+0x40>)
 8002752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <HAL_Init+0x40>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002764:	2003      	movs	r0, #3
 8002766:	f000 f94f 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800276a:	200f      	movs	r0, #15
 800276c:	f000 f808 	bl	8002780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002770:	f7fe fa78 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <HAL_InitTick+0x54>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <HAL_InitTick+0x58>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002796:	fbb3 f3f1 	udiv	r3, r3, r1
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f967 	bl	8002a72 <HAL_SYSTICK_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00e      	b.n	80027cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d80a      	bhi.n	80027ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b4:	2200      	movs	r2, #0
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027bc:	f000 f92f 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c0:	4a06      	ldr	r2, [pc, #24]	@ (80027dc <HAL_InitTick+0x5c>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200000c8 	.word	0x200000c8
 80027d8:	20000118 	.word	0x20000118
 80027dc:	20000114 	.word	0x20000114

080027e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_IncTick+0x20>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_IncTick+0x24>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <HAL_IncTick+0x24>)
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000118 	.word	0x20000118
 8002804:	200005a0 	.word	0x200005a0

08002808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return uwTick;
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <HAL_GetTick+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	200005a0 	.word	0x200005a0

08002820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff ffee 	bl	8002808 <HAL_GetTick>
 800282c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002838:	d005      	beq.n	8002846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283a:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <HAL_Delay+0x44>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002846:	bf00      	nop
 8002848:	f7ff ffde 	bl	8002808 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d8f7      	bhi.n	8002848 <HAL_Delay+0x28>
  {
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000118 	.word	0x20000118

08002868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002884:	4013      	ands	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289a:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	60d3      	str	r3, [r2, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <__NVIC_GetPriorityGrouping+0x18>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 0307 	and.w	r3, r3, #7
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	db0b      	blt.n	80028f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	4907      	ldr	r1, [pc, #28]	@ (8002904 <__NVIC_EnableIRQ+0x38>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2001      	movs	r0, #1
 80028ee:	fa00 f202 	lsl.w	r2, r0, r2
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	@ (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	@ (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf28      	it	cs
 800297a:	2304      	movcs	r3, #4
 800297c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	2b06      	cmp	r3, #6
 8002984:	d902      	bls.n	800298c <NVIC_EncodePriority+0x30>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3b03      	subs	r3, #3
 800298a:	e000      	b.n	800298e <NVIC_EncodePriority+0x32>
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	401a      	ands	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43d9      	mvns	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	4313      	orrs	r3, r2
         );
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	@ 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029e8:	f7ff ff8e 	bl	8002908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff29 	bl	8002868 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff3e 	bl	80028b0 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff8e 	bl	800295c <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5d 	bl	8002908 <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff31 	bl	80028cc <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa2 	bl	80029c4 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff feb6 	bl	8002808 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e099      	b.n	8002bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac8:	e00f      	b.n	8002aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aca:	f7ff fe9d 	bl	8002808 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d908      	bls.n	8002aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e078      	b.n	8002bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e8      	bne.n	8002aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <HAL_DMA_Init+0x158>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d107      	bne.n	8002b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0307 	bic.w	r3, r3, #7
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d117      	bne.n	8002bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8bd 	bl	8002d10 <DMA_CheckFifoParam>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2240      	movs	r2, #64	@ 0x40
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002baa:	2301      	movs	r3, #1
 8002bac:	e016      	b.n	8002bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f874 	bl	8002ca4 <DMA_CalcBaseAndBitshift>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	223f      	movs	r2, #63	@ 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	f010803f 	.word	0xf010803f

08002be8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e050      	b.n	8002c9c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	e048      	b.n	8002c9c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2221      	movs	r2, #33	@ 0x21
 8002c48:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f82a 	bl	8002ca4 <DMA_CalcBaseAndBitshift>
 8002c50:	4603      	mov	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	223f      	movs	r2, #63	@ 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3b10      	subs	r3, #16
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <DMA_CalcBaseAndBitshift+0x64>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cbe:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <DMA_CalcBaseAndBitshift+0x68>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d909      	bls.n	8002ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ce4:	e007      	b.n	8002cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	aaaaaaab 	.word	0xaaaaaaab
 8002d0c:	08007ee4 	.word	0x08007ee4

08002d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11f      	bne.n	8002d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d856      	bhi.n	8002dde <DMA_CheckFifoParam+0xce>
 8002d30:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <DMA_CheckFifoParam+0x28>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d5b 	.word	0x08002d5b
 8002d40:	08002d49 	.word	0x08002d49
 8002d44:	08002ddf 	.word	0x08002ddf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d046      	beq.n	8002de2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e043      	b.n	8002de2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d62:	d140      	bne.n	8002de6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e03d      	b.n	8002de6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d72:	d121      	bne.n	8002db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d837      	bhi.n	8002dea <DMA_CheckFifoParam+0xda>
 8002d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d80 <DMA_CheckFifoParam+0x70>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002d97 	.word	0x08002d97
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	08002da9 	.word	0x08002da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e030      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d025      	beq.n	8002dee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da6:	e022      	b.n	8002dee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002db0:	d11f      	bne.n	8002df2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002db6:	e01c      	b.n	8002df2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d903      	bls.n	8002dc6 <DMA_CheckFifoParam+0xb6>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d003      	beq.n	8002dcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dc4:	e018      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dca:	e015      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e00b      	b.n	8002df6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dde:	bf00      	nop
 8002de0:	e00a      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      break;
 8002de2:	bf00      	nop
 8002de4:	e008      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      break;
 8002de6:	bf00      	nop
 8002de8:	e006      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dea:	bf00      	nop
 8002dec:	e004      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <DMA_CheckFifoParam+0xe8>
      break;
 8002df6:	bf00      	nop
    }
  } 
  
  return status; 
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop

08002e08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e03b      	b.n	8002e92 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd ff40 	bl	8000cb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	f023 0107 	bic.w	r1, r3, #7
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68d1      	ldr	r1, [r2, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af02      	add	r7, sp, #8
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DMA2D_Start+0x1c>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e018      	b.n	8002ee8 <HAL_DMA2D_Start+0x4e>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f989 	bl	80031e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d056      	beq.n	8002fba <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f0c:	f7ff fc7c 	bl	8002808 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002f12:	e04b      	b.n	8002fac <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d023      	beq.n	8002f6e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	f043 0202 	orr.w	r2, r3, #2
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2221      	movs	r2, #33	@ 0x21
 8002f58:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0a5      	b.n	80030ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f74:	d01a      	beq.n	8002fac <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7ff fc47 	bl	8002808 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <HAL_DMA2D_PollForTransfer+0x9c>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10f      	bne.n	8002fac <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e086      	b.n	80030ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ac      	beq.n	8002f14 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d061      	beq.n	80030a0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fdc:	f7ff fc14 	bl	8002808 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002fe2:	e056      	b.n	8003092 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02e      	beq.n	8003054 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2229      	movs	r2, #41	@ 0x29
 800303e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2204      	movs	r2, #4
 8003044:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e032      	b.n	80030ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800305a:	d01a      	beq.n	8003092 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800305c:	f7ff fbd4 	bl	8002808 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <HAL_DMA2D_PollForTransfer+0x182>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2203      	movs	r2, #3
 8003082:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e013      	b.n	80030ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0a1      	beq.n	8002fe4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2212      	movs	r2, #18
 80030a6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_DMA2D_ConfigLayer+0x20>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e079      	b.n	80031d8 <HAL_DMA2D_ConfigLayer+0x114>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	3318      	adds	r3, #24
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800310e:	4b35      	ldr	r3, [pc, #212]	@ (80031e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003110:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b0a      	cmp	r3, #10
 8003118:	d003      	beq.n	8003122 <HAL_DMA2D_ConfigLayer+0x5e>
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b09      	cmp	r3, #9
 8003120:	d107      	bne.n	8003132 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e005      	b.n	800313e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	061b      	lsls	r3, r3, #24
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d120      	bne.n	8003186 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	ea02 0103 	and.w	r1, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	430a      	orrs	r2, r1
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d003      	beq.n	8003176 <HAL_DMA2D_ConfigLayer+0xb2>
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d127      	bne.n	80031c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28
 8003184:	e01f      	b.n	80031c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	43db      	mvns	r3, r3
 8003190:	ea02 0103 	and.w	r1, r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	430a      	orrs	r2, r1
 800319c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b0a      	cmp	r3, #10
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	d106      	bne.n	80031c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80031c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	ff03000f 	.word	0xff03000f

080031e8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b08b      	sub	sp, #44	@ 0x2c
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	041a      	lsls	r2, r3, #16
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003220:	d174      	bne.n	800330c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003228:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003230:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003238:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d108      	bne.n	800325a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	431a      	orrs	r2, r3
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	4313      	orrs	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
 8003258:	e053      	b.n	8003302 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d106      	bne.n	8003270 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4313      	orrs	r3, r2
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
 800326e:	e048      	b.n	8003302 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d111      	bne.n	800329c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	0cdb      	lsrs	r3, r3, #19
 800327c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	0a9b      	lsrs	r3, r3, #10
 8003282:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	08db      	lsrs	r3, r3, #3
 8003288:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	02db      	lsls	r3, r3, #11
 8003292:	4313      	orrs	r3, r2
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
 800329a:	e032      	b.n	8003302 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d117      	bne.n	80032d4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	0fdb      	lsrs	r3, r3, #31
 80032a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	0cdb      	lsrs	r3, r3, #19
 80032ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	0adb      	lsrs	r3, r3, #11
 80032b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	431a      	orrs	r2, r3
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	03db      	lsls	r3, r3, #15
 80032ca:	4313      	orrs	r3, r2
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d2:	e016      	b.n	8003302 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	0f1b      	lsrs	r3, r3, #28
 80032d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	0d1b      	lsrs	r3, r3, #20
 80032de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	0b1b      	lsrs	r3, r3, #12
 80032e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	011a      	lsls	r2, r3, #4
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	431a      	orrs	r2, r3
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	031b      	lsls	r3, r3, #12
 80032fa:	4313      	orrs	r3, r2
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800330a:	e003      	b.n	8003314 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	60da      	str	r2, [r3, #12]
}
 8003314:	bf00      	nop
 8003316:	372c      	adds	r7, #44	@ 0x2c
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e177      	b.n	800362c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 8166 	bne.w	8003626 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d005      	beq.n	8003372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336e:	2b02      	cmp	r3, #2
 8003370:	d130      	bne.n	80033d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 0201 	and.w	r2, r3, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d017      	beq.n	8003410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d123      	bne.n	8003464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80c0 	beq.w	8003626 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b66      	ldr	r3, [pc, #408]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	4a65      	ldr	r2, [pc, #404]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80034b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034b6:	4b63      	ldr	r3, [pc, #396]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c2:	4a61      	ldr	r2, [pc, #388]	@ (8003648 <HAL_GPIO_Init+0x328>)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a58      	ldr	r2, [pc, #352]	@ (800364c <HAL_GPIO_Init+0x32c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d037      	beq.n	800355e <HAL_GPIO_Init+0x23e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_GPIO_Init+0x330>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d031      	beq.n	800355a <HAL_GPIO_Init+0x23a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a56      	ldr	r2, [pc, #344]	@ (8003654 <HAL_GPIO_Init+0x334>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02b      	beq.n	8003556 <HAL_GPIO_Init+0x236>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a55      	ldr	r2, [pc, #340]	@ (8003658 <HAL_GPIO_Init+0x338>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d025      	beq.n	8003552 <HAL_GPIO_Init+0x232>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a54      	ldr	r2, [pc, #336]	@ (800365c <HAL_GPIO_Init+0x33c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01f      	beq.n	800354e <HAL_GPIO_Init+0x22e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a53      	ldr	r2, [pc, #332]	@ (8003660 <HAL_GPIO_Init+0x340>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d019      	beq.n	800354a <HAL_GPIO_Init+0x22a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a52      	ldr	r2, [pc, #328]	@ (8003664 <HAL_GPIO_Init+0x344>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_GPIO_Init+0x226>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a51      	ldr	r2, [pc, #324]	@ (8003668 <HAL_GPIO_Init+0x348>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00d      	beq.n	8003542 <HAL_GPIO_Init+0x222>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a50      	ldr	r2, [pc, #320]	@ (800366c <HAL_GPIO_Init+0x34c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <HAL_GPIO_Init+0x21e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4f      	ldr	r2, [pc, #316]	@ (8003670 <HAL_GPIO_Init+0x350>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_GPIO_Init+0x21a>
 8003536:	2309      	movs	r3, #9
 8003538:	e012      	b.n	8003560 <HAL_GPIO_Init+0x240>
 800353a:	230a      	movs	r3, #10
 800353c:	e010      	b.n	8003560 <HAL_GPIO_Init+0x240>
 800353e:	2308      	movs	r3, #8
 8003540:	e00e      	b.n	8003560 <HAL_GPIO_Init+0x240>
 8003542:	2307      	movs	r3, #7
 8003544:	e00c      	b.n	8003560 <HAL_GPIO_Init+0x240>
 8003546:	2306      	movs	r3, #6
 8003548:	e00a      	b.n	8003560 <HAL_GPIO_Init+0x240>
 800354a:	2305      	movs	r3, #5
 800354c:	e008      	b.n	8003560 <HAL_GPIO_Init+0x240>
 800354e:	2304      	movs	r3, #4
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x240>
 8003552:	2303      	movs	r3, #3
 8003554:	e004      	b.n	8003560 <HAL_GPIO_Init+0x240>
 8003556:	2302      	movs	r3, #2
 8003558:	e002      	b.n	8003560 <HAL_GPIO_Init+0x240>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_GPIO_Init+0x240>
 800355e:	2300      	movs	r3, #0
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	f002 0203 	and.w	r2, r2, #3
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	4093      	lsls	r3, r2
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003570:	4935      	ldr	r1, [pc, #212]	@ (8003648 <HAL_GPIO_Init+0x328>)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	3302      	adds	r3, #2
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357e:	4b3d      	ldr	r3, [pc, #244]	@ (8003674 <HAL_GPIO_Init+0x354>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a2:	4a34      	ldr	r2, [pc, #208]	@ (8003674 <HAL_GPIO_Init+0x354>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a8:	4b32      	ldr	r3, [pc, #200]	@ (8003674 <HAL_GPIO_Init+0x354>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035cc:	4a29      	ldr	r2, [pc, #164]	@ (8003674 <HAL_GPIO_Init+0x354>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035d2:	4b28      	ldr	r3, [pc, #160]	@ (8003674 <HAL_GPIO_Init+0x354>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <HAL_GPIO_Init+0x354>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HAL_GPIO_Init+0x354>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003620:	4a14      	ldr	r2, [pc, #80]	@ (8003674 <HAL_GPIO_Init+0x354>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3301      	adds	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	f67f ae84 	bls.w	800333c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3724      	adds	r7, #36	@ 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40013800 	.word	0x40013800
 800364c:	40020000 	.word	0x40020000
 8003650:	40020400 	.word	0x40020400
 8003654:	40020800 	.word	0x40020800
 8003658:	40020c00 	.word	0x40020c00
 800365c:	40021000 	.word	0x40021000
 8003660:	40021400 	.word	0x40021400
 8003664:	40021800 	.word	0x40021800
 8003668:	40021c00 	.word	0x40021c00
 800366c:	40022000 	.word	0x40022000
 8003670:	40022400 	.word	0x40022400
 8003674:	40013c00 	.word	0x40013c00

08003678 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e0d9      	b.n	8003848 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003694:	2201      	movs	r2, #1
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	f040 80c9 	bne.w	8003842 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003860 <HAL_GPIO_DeInit+0x1e8>)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	220f      	movs	r2, #15
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a63      	ldr	r2, [pc, #396]	@ (8003864 <HAL_GPIO_DeInit+0x1ec>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d037      	beq.n	800374a <HAL_GPIO_DeInit+0xd2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a62      	ldr	r2, [pc, #392]	@ (8003868 <HAL_GPIO_DeInit+0x1f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_GPIO_DeInit+0xce>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a61      	ldr	r2, [pc, #388]	@ (800386c <HAL_GPIO_DeInit+0x1f4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d02b      	beq.n	8003742 <HAL_GPIO_DeInit+0xca>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a60      	ldr	r2, [pc, #384]	@ (8003870 <HAL_GPIO_DeInit+0x1f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d025      	beq.n	800373e <HAL_GPIO_DeInit+0xc6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a5f      	ldr	r2, [pc, #380]	@ (8003874 <HAL_GPIO_DeInit+0x1fc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01f      	beq.n	800373a <HAL_GPIO_DeInit+0xc2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003878 <HAL_GPIO_DeInit+0x200>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d019      	beq.n	8003736 <HAL_GPIO_DeInit+0xbe>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a5d      	ldr	r2, [pc, #372]	@ (800387c <HAL_GPIO_DeInit+0x204>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_DeInit+0xba>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a5c      	ldr	r2, [pc, #368]	@ (8003880 <HAL_GPIO_DeInit+0x208>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_GPIO_DeInit+0xb6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a5b      	ldr	r2, [pc, #364]	@ (8003884 <HAL_GPIO_DeInit+0x20c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_GPIO_DeInit+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a5a      	ldr	r2, [pc, #360]	@ (8003888 <HAL_GPIO_DeInit+0x210>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_GPIO_DeInit+0xae>
 8003722:	2309      	movs	r3, #9
 8003724:	e012      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 8003726:	230a      	movs	r3, #10
 8003728:	e010      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 800372a:	2308      	movs	r3, #8
 800372c:	e00e      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 800372e:	2307      	movs	r3, #7
 8003730:	e00c      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 8003732:	2306      	movs	r3, #6
 8003734:	e00a      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 8003736:	2305      	movs	r3, #5
 8003738:	e008      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 800373a:	2304      	movs	r3, #4
 800373c:	e006      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 800373e:	2303      	movs	r3, #3
 8003740:	e004      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 8003742:	2302      	movs	r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_GPIO_DeInit+0xd4>
 800374a:	2300      	movs	r3, #0
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	f002 0203 	and.w	r2, r2, #3
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	4093      	lsls	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	d132      	bne.n	80037c2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800375c:	4b4b      	ldr	r3, [pc, #300]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43db      	mvns	r3, r3
 8003764:	4949      	ldr	r1, [pc, #292]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 8003766:	4013      	ands	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800376a:	4b48      	ldr	r3, [pc, #288]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	43db      	mvns	r3, r3
 8003772:	4946      	ldr	r1, [pc, #280]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 8003774:	4013      	ands	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003778:	4b44      	ldr	r3, [pc, #272]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	4942      	ldr	r1, [pc, #264]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 8003782:	4013      	ands	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003786:	4b41      	ldr	r3, [pc, #260]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43db      	mvns	r3, r3
 800378e:	493f      	ldr	r1, [pc, #252]	@ (800388c <HAL_GPIO_DeInit+0x214>)
 8003790:	4013      	ands	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <HAL_GPIO_DeInit+0x1e8>)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	3302      	adds	r3, #2
 80037ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	43da      	mvns	r2, r3
 80037b4:	482a      	ldr	r0, [pc, #168]	@ (8003860 <HAL_GPIO_DeInit+0x1e8>)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	400a      	ands	r2, r1
 80037bc:	3302      	adds	r3, #2
 80037be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2103      	movs	r1, #3
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	08d2      	lsrs	r2, r2, #3
 80037f8:	4019      	ands	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2103      	movs	r1, #3
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	401a      	ands	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	2101      	movs	r1, #1
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2103      	movs	r1, #3
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	401a      	ands	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	f67f af22 	bls.w	8003694 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40013800 	.word	0x40013800
 8003864:	40020000 	.word	0x40020000
 8003868:	40020400 	.word	0x40020400
 800386c:	40020800 	.word	0x40020800
 8003870:	40020c00 	.word	0x40020c00
 8003874:	40021000 	.word	0x40021000
 8003878:	40021400 	.word	0x40021400
 800387c:	40021800 	.word	0x40021800
 8003880:	40021c00 	.word	0x40021c00
 8003884:	40022000 	.word	0x40022000
 8003888:	40022400 	.word	0x40022400
 800388c:	40013c00 	.word	0x40013c00

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038ac:	e003      	b.n	80038b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	041a      	lsls	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	041a      	lsls	r2, r3, #16
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43d9      	mvns	r1, r3
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	400b      	ands	r3, r1
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e12b      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd f9ea 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	@ 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800395a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800395c:	f001 f8c4 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a81      	ldr	r2, [pc, #516]	@ (8003b6c <HAL_I2C_Init+0x274>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d807      	bhi.n	800397c <HAL_I2C_Init+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a80      	ldr	r2, [pc, #512]	@ (8003b70 <HAL_I2C_Init+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e006      	b.n	800398a <HAL_I2C_Init+0x92>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b74 <HAL_I2C_Init+0x27c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0e7      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a78      	ldr	r2, [pc, #480]	@ (8003b78 <HAL_I2C_Init+0x280>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b6c <HAL_I2C_Init+0x274>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d802      	bhi.n	80039cc <HAL_I2C_Init+0xd4>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	e009      	b.n	80039e0 <HAL_I2C_Init+0xe8>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a69      	ldr	r2, [pc, #420]	@ (8003b7c <HAL_I2C_Init+0x284>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	3301      	adds	r3, #1
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	495c      	ldr	r1, [pc, #368]	@ (8003b6c <HAL_I2C_Init+0x274>)
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d819      	bhi.n	8003a34 <HAL_I2C_Init+0x13c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e59      	subs	r1, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a14:	400b      	ands	r3, r1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_I2C_Init+0x138>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2e:	e051      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e04f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d111      	bne.n	8003a60 <HAL_I2C_Init+0x168>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e012      	b.n	8003a86 <HAL_I2C_Init+0x18e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x196>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <HAL_I2C_Init+0x1bc>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e58      	subs	r0, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab2:	e00f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6809      	ldr	r1, [r1, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	000186a0 	.word	0x000186a0
 8003b70:	001e847f 	.word	0x001e847f
 8003b74:	003d08ff 	.word	0x003d08ff
 8003b78:	431bde83 	.word	0x431bde83
 8003b7c:	10624dd3 	.word	0x10624dd3

08003b80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d129      	bne.n	8003bea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2224      	movs	r2, #36	@ 0x24
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0210 	bic.w	r2, r2, #16
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d12a      	bne.n	8003c68 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2224      	movs	r2, #36	@ 0x24
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	f023 030f 	bic.w	r3, r3, #15
 8003c38:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	89fa      	ldrh	r2, [r7, #14]
 8003c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e08f      	b.n	8003da8 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd f895 	bl	8000dcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003cb8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6999      	ldr	r1, [r3, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a19      	ldr	r1, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0206 	orr.w	r2, r2, #6
 8003d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003db0:	b5b0      	push	{r4, r5, r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_LTDC_ConfigLayer+0x1a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e02c      	b.n	8003e24 <HAL_LTDC_ConfigLayer+0x74>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2134      	movs	r1, #52	@ 0x34
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4614      	mov	r4, r2
 8003dee:	461d      	mov	r5, r3
 8003df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f83b 	bl	8003e80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bdb0      	pop	{r4, r5, r7, pc}

08003e2c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_LTDC_EnableDither+0x16>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e016      	b.n	8003e70 <HAL_LTDC_EnableDither+0x44>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003e52:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <HAL_LTDC_EnableDither+0x50>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4a09      	ldr	r2, [pc, #36]	@ (8003e7c <HAL_LTDC_EnableDither+0x50>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40016800 	.word	0x40016800

08003e80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	@ 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	4413      	add	r3, r2
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	01db      	lsls	r3, r3, #7
 8003eac:	4413      	add	r3, r2
 8003eae:	3384      	adds	r3, #132	@ 0x84
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	01d2      	lsls	r2, r2, #7
 8003ebc:	440a      	add	r2, r1
 8003ebe:	3284      	adds	r2, #132	@ 0x84
 8003ec0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003ec4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ed6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ed8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	01db      	lsls	r3, r3, #7
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3384      	adds	r3, #132	@ 0x84
 8003ee8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003eee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003efe:	4413      	add	r3, r2
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	4413      	add	r3, r2
 8003f10:	3384      	adds	r3, #132	@ 0x84
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	01d2      	lsls	r2, r2, #7
 8003f1e:	440a      	add	r2, r1
 8003f20:	3284      	adds	r2, #132	@ 0x84
 8003f22:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003f26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f36:	4413      	add	r3, r2
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	01db      	lsls	r3, r3, #7
 8003f44:	440b      	add	r3, r1
 8003f46:	3384      	adds	r3, #132	@ 0x84
 8003f48:	4619      	mov	r1, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	01db      	lsls	r3, r3, #7
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3384      	adds	r3, #132	@ 0x84
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	4611      	mov	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	01d2      	lsls	r2, r2, #7
 8003f6a:	440a      	add	r2, r1
 8003f6c:	3284      	adds	r2, #132	@ 0x84
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	01db      	lsls	r3, r3, #7
 8003f7e:	4413      	add	r3, r2
 8003f80:	3384      	adds	r3, #132	@ 0x84
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fac:	461a      	mov	r2, r3
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	01db      	lsls	r3, r3, #7
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3384      	adds	r3, #132	@ 0x84
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	01db      	lsls	r3, r3, #7
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3384      	adds	r3, #132	@ 0x84
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	01d2      	lsls	r2, r2, #7
 8003fe6:	440a      	add	r2, r1
 8003fe8:	3284      	adds	r2, #132	@ 0x84
 8003fea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	01db      	lsls	r3, r3, #7
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3384      	adds	r3, #132	@ 0x84
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	4413      	add	r3, r2
 8004012:	3384      	adds	r3, #132	@ 0x84
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	4611      	mov	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	01d2      	lsls	r2, r2, #7
 8004020:	440a      	add	r2, r1
 8004022:	3284      	adds	r2, #132	@ 0x84
 8004024:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004028:	f023 0307 	bic.w	r3, r3, #7
 800402c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	6809      	ldr	r1, [r1, #0]
 800403a:	4608      	mov	r0, r1
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	01c9      	lsls	r1, r1, #7
 8004040:	4401      	add	r1, r0
 8004042:	3184      	adds	r1, #132	@ 0x84
 8004044:	4313      	orrs	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	01db      	lsls	r3, r3, #7
 8004052:	4413      	add	r3, r2
 8004054:	3384      	adds	r3, #132	@ 0x84
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8004066:	2304      	movs	r3, #4
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e01b      	b.n	80040a4 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8004074:	2303      	movs	r3, #3
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e014      	b.n	80040a4 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b04      	cmp	r3, #4
 8004080:	d00b      	beq.n	800409a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004086:	2b02      	cmp	r3, #2
 8004088:	d007      	beq.n	800409a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800408e:	2b03      	cmp	r3, #3
 8004090:	d003      	beq.n	800409a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004096:	2b07      	cmp	r3, #7
 8004098:	d102      	bne.n	80040a0 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800409a:	2302      	movs	r3, #2
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e001      	b.n	80040a4 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80040a0:	2301      	movs	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	01db      	lsls	r3, r3, #7
 80040ae:	4413      	add	r3, r2
 80040b0:	3384      	adds	r3, #132	@ 0x84
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	4611      	mov	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	01d2      	lsls	r2, r2, #7
 80040be:	440a      	add	r2, r1
 80040c0:	3284      	adds	r2, #132	@ 0x84
 80040c2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80040c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1acb      	subs	r3, r1, r3
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	6809      	ldr	r1, [r1, #0]
 80040ea:	4608      	mov	r0, r1
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	01c9      	lsls	r1, r1, #7
 80040f0:	4401      	add	r1, r0
 80040f2:	3184      	adds	r1, #132	@ 0x84
 80040f4:	4313      	orrs	r3, r2
 80040f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	01db      	lsls	r3, r3, #7
 8004102:	4413      	add	r3, r2
 8004104:	3384      	adds	r3, #132	@ 0x84
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4611      	mov	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	01d2      	lsls	r2, r2, #7
 8004112:	440a      	add	r2, r1
 8004114:	3284      	adds	r2, #132	@ 0x84
 8004116:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	01db      	lsls	r3, r3, #7
 800412a:	4413      	add	r3, r2
 800412c:	3384      	adds	r3, #132	@ 0x84
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	01db      	lsls	r3, r3, #7
 8004140:	4413      	add	r3, r2
 8004142:	3384      	adds	r3, #132	@ 0x84
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	4611      	mov	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	01d2      	lsls	r2, r2, #7
 8004150:	440a      	add	r2, r1
 8004152:	3284      	adds	r2, #132	@ 0x84
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6013      	str	r3, [r2, #0]
}
 800415a:	bf00      	nop
 800415c:	3724      	adds	r7, #36	@ 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4b20      	ldr	r3, [pc, #128]	@ (80041f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a1f      	ldr	r2, [pc, #124]	@ (80041f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
 8004182:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_PWREx_EnableOverDrive+0x94>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004194:	f7fe fb38 	bl	8002808 <HAL_GetTick>
 8004198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800419a:	e009      	b.n	80041b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800419c:	f7fe fb34 	bl	8002808 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041aa:	d901      	bls.n	80041b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e01f      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041b0:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <HAL_PWREx_EnableOverDrive+0x98>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d1ee      	bne.n	800419c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041be:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fe fb20 	bl	8002808 <HAL_GetTick>
 80041c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ca:	e009      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041cc:	f7fe fb1c 	bl	8002808 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041da:	d901      	bls.n	80041e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e007      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041e0:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <HAL_PWREx_EnableOverDrive+0x98>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ec:	d1ee      	bne.n	80041cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	420e0040 	.word	0x420e0040
 8004200:	40007000 	.word	0x40007000
 8004204:	420e0044 	.word	0x420e0044

08004208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e267      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d075      	beq.n	8004312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00c      	beq.n	800424c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800423a:	2b08      	cmp	r3, #8
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423e:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424a:	d10b      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	4b7e      	ldr	r3, [pc, #504]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05b      	beq.n	8004310 <HAL_RCC_OscConfig+0x108>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d157      	bne.n	8004310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e242      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x74>
 800426e:	4b76      	ldr	r3, [pc, #472]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a75      	ldr	r2, [pc, #468]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x98>
 8004286:	4b70      	ldr	r3, [pc, #448]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6f      	ldr	r2, [pc, #444]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6d      	ldr	r3, [pc, #436]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6c      	ldr	r2, [pc, #432]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 80042a0:	4b69      	ldr	r3, [pc, #420]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b66      	ldr	r3, [pc, #408]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a65      	ldr	r2, [pc, #404]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe faa2 	bl	8002808 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe fa9e 	bl	8002808 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e207      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xc0>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fa8e 	bl	8002808 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe fa8a 	bl	8002808 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1f3      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b51      	ldr	r3, [pc, #324]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0xe8>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800431e:	4b4a      	ldr	r3, [pc, #296]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b44      	ldr	r3, [pc, #272]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c7      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4937      	ldr	r1, [pc, #220]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe fa43 	bl	8002808 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fe fa3f 	bl	8002808 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a8      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2b      	ldr	r3, [pc, #172]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b28      	ldr	r3, [pc, #160]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4925      	ldr	r1, [pc, #148]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe fa22 	bl	8002808 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe fa1e 	bl	8002808 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e187      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d036      	beq.n	8004460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fe fa02 	bl	8002808 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004408:	f7fe f9fe 	bl	8002808 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e167      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x200>
 8004426:	e01b      	b.n	8004460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe f9eb 	bl	8002808 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	e00e      	b.n	8004454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004436:	f7fe f9e7 	bl	8002808 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d907      	bls.n	8004454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e150      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	4b88      	ldr	r3, [pc, #544]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ea      	bne.n	8004436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8097 	beq.w	800459c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b81      	ldr	r3, [pc, #516]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b7d      	ldr	r3, [pc, #500]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a7c      	ldr	r2, [pc, #496]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b7a      	ldr	r3, [pc, #488]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b77      	ldr	r3, [pc, #476]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fe f9a7 	bl	8002808 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe f9a3 	bl	8002808 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e10c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
 80044e4:	4b64      	ldr	r3, [pc, #400]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a63      	ldr	r2, [pc, #396]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x30c>
 80044fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a5b      	ldr	r2, [pc, #364]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 8004514:	4b58      	ldr	r3, [pc, #352]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a57      	ldr	r2, [pc, #348]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004520:	4b55      	ldr	r3, [pc, #340]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a54      	ldr	r2, [pc, #336]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 0304 	bic.w	r3, r3, #4
 800452a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe f968 	bl	8002808 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fe f964 	bl	8002808 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0cb      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	4b49      	ldr	r3, [pc, #292]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ee      	beq.n	800453c <HAL_RCC_OscConfig+0x334>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fe f952 	bl	8002808 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fe f94e 	bl	8002808 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0b5      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457e:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ee      	bne.n	8004568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	4a38      	ldr	r2, [pc, #224]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a1 	beq.w	80046e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d05c      	beq.n	800466c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d141      	bne.n	800463e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe f922 	bl	8002808 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe f91e 	bl	8002808 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e087      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	491b      	ldr	r1, [pc, #108]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe f8f7 	bl	8002808 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe f8f3 	bl	8002808 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e05c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x416>
 800463c:	e054      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe f8e0 	bl	8002808 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe f8dc 	bl	8002808 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e045      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x444>
 800466a:	e03d      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e038      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
 8004680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x4ec>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d121      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	4293      	cmp	r3, r2
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	3b01      	subs	r3, #1
 80046ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0cc      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b68      	ldr	r3, [pc, #416]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d90c      	bls.n	8004734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b65      	ldr	r3, [pc, #404]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b59      	ldr	r3, [pc, #356]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a58      	ldr	r2, [pc, #352]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a52      	ldr	r2, [pc, #328]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800476e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b50      	ldr	r3, [pc, #320]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	494d      	ldr	r1, [pc, #308]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d044      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d119      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e067      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4934      	ldr	r1, [pc, #208]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fe f80e 	bl	8002808 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fe f80a 	bl	8002808 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e04f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d20c      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e032      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4916      	ldr	r1, [pc, #88]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	490e      	ldr	r1, [pc, #56]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800487e:	f000 f821 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490a      	ldr	r1, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a09      	ldr	r2, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd ff6e 	bl	8002780 <HAL_InitTick>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	08006414 	.word	0x08006414
 80048bc:	200000c8 	.word	0x200000c8
 80048c0:	20000114 	.word	0x20000114

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b094      	sub	sp, #80	@ 0x50
 80048ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00d      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x40>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	f200 80e1 	bhi.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x34>
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x3a>
 80048f6:	e0db      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b73      	ldr	r3, [pc, #460]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048fc:	e0db      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048fe:	4b73      	ldr	r3, [pc, #460]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x208>)
 8004900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004902:	e0d8      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4621      	mov	r1, r4
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	6139      	str	r1, [r7, #16]
 8004954:	4629      	mov	r1, r5
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	ebb2 0801 	subs.w	r8, r2, r1
 800497c:	4659      	mov	r1, fp
 800497e:	eb63 0901 	sbc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	462b      	mov	r3, r5
 80049a4:	eb49 0303 	adc.w	r3, r9, r3
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049b6:	4629      	mov	r1, r5
 80049b8:	024b      	lsls	r3, r1, #9
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c0:	4621      	mov	r1, r4
 80049c2:	024a      	lsls	r2, r1, #9
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049d4:	f7fb fc0a 	bl	80001ec <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e058      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	2200      	movs	r2, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	4611      	mov	r1, r2
 80049ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0e:	0150      	lsls	r0, r2, #5
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4641      	mov	r1, r8
 8004a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a34:	ebb2 040a 	subs.w	r4, r2, sl
 8004a38:	eb63 050b 	sbc.w	r5, r3, fp
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	00eb      	lsls	r3, r5, #3
 8004a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	028b      	lsls	r3, r1, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a74:	4621      	mov	r1, r4
 8004a76:	028a      	lsls	r2, r1, #10
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	61fa      	str	r2, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	f7fb fbb0 	bl	80001ec <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3750      	adds	r7, #80	@ 0x50
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	200000c8 	.word	0x200000c8

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08006424 	.word	0x08006424

08004b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b14:	f7ff ffdc 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	08006424 	.word	0x08006424

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d075      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b6c:	4b91      	ldr	r3, [pc, #580]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b72:	f7fd fe49 	bl	8002808 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b7a:	f7fd fe45 	bl	8002808 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e189      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8c:	4b8a      	ldr	r3, [pc, #552]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	019a      	lsls	r2, r3, #6
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	071b      	lsls	r3, r3, #28
 8004bb0:	4981      	ldr	r1, [pc, #516]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01f      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bca:	0f1b      	lsrs	r3, r3, #28
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	019a      	lsls	r2, r3, #6
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	431a      	orrs	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	071b      	lsls	r3, r3, #28
 8004be4:	4974      	ldr	r1, [pc, #464]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bec:	4b72      	ldr	r3, [pc, #456]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bf2:	f023 021f 	bic.w	r2, r3, #31
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	496e      	ldr	r1, [pc, #440]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	019a      	lsls	r2, r3, #6
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	071b      	lsls	r3, r3, #28
 8004c24:	4964      	ldr	r1, [pc, #400]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c2c:	4b61      	ldr	r3, [pc, #388]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c32:	f7fd fde9 	bl	8002808 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c3a:	f7fd fde5 	bl	8002808 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e129      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d079      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c70:	4b52      	ldr	r3, [pc, #328]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c76:	f7fd fdc7 	bl	8002808 <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c7e:	f7fd fdc3 	bl	8002808 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e107      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c90:	4b49      	ldr	r3, [pc, #292]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c9c:	d0ef      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004caa:	4b43      	ldr	r3, [pc, #268]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb0:	0f1b      	lsrs	r3, r3, #28
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	019a      	lsls	r2, r3, #6
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	493b      	ldr	r1, [pc, #236]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4934      	ldr	r1, [pc, #208]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	0e1b      	lsrs	r3, r3, #24
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	019a      	lsls	r2, r3, #6
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	071b      	lsls	r3, r3, #28
 8004d18:	4927      	ldr	r1, [pc, #156]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d20:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	4922      	ldr	r1, [pc, #136]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d36:	4b21      	ldr	r3, [pc, #132]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3c:	f7fd fd64 	bl	8002808 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d44:	f7fd fd60 	bl	8002808 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0a4      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d56:	4b18      	ldr	r3, [pc, #96]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d62:	d1ef      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 808b 	beq.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d82:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d9a:	f7fd fd35 	bl	8002808 <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004da0:	e010      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da2:	f7fd fd31 	bl	8002808 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d909      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e075      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004db4:	42470068 	.word	0x42470068
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	42470070 	.word	0x42470070
 8004dc0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc4:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0e8      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02f      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d028      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dee:	4b2f      	ldr	r3, [pc, #188]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004df8:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e04:	4a29      	ldr	r2, [pc, #164]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e0a:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d114      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e16:	f7fd fcf7 	bl	8002808 <HAL_GetTick>
 8004e1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd fcf3 	bl	8002808 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e035      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e34:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ee      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e4c:	d10d      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004e4e:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e62:	4912      	ldr	r1, [pc, #72]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004e6a:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e74:	6093      	str	r3, [r2, #8]
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e82:	490a      	ldr	r1, [pc, #40]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e9c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	42470e40 	.word	0x42470e40
 8004eb4:	424711e0 	.word	0x424711e0

08004eb8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e025      	b.n	8004f18 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fc f9db 	bl	800129c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f001 f939 	bl	8006170 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	461a      	mov	r2, r3
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	f001 f98e 	bl	800622a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f32:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d101      	bne.n	8004f3e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e021      	b.n	8004f82 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d002      	beq.n	8004f4a <HAL_SDRAM_SendCommand+0x2a>
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d118      	bne.n	8004f7c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 f9ce 	bl	80062fc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d104      	bne.n	8004f72 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2205      	movs	r2, #5
 8004f6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004f70:	e006      	b.n	8004f80 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004f7a:	e001      	b.n	8004f80 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e016      	b.n	8004fd2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10f      	bne.n	8004fd0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 f9d9 	bl	8006376 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e07b      	b.n	80050e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d108      	bne.n	8005006 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ffc:	d009      	beq.n	8005012 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	61da      	str	r2, [r3, #28]
 8005004:	e005      	b.n	8005012 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fb fff5 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005048:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	ea42 0103 	orr.w	r1, r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	0c1b      	lsrs	r3, r3, #16
 80050b0:	f003 0104 	and.w	r1, r3, #4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	f003 0210 	and.w	r2, r3, #16
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01a      	b.n	8005134 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005114:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fb ffc8 	bl	80010ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514c:	f7fd fb5c 	bl	8002808 <HAL_GetTick>
 8005150:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d001      	beq.n	8005166 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	e12a      	b.n	80053bc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_SPI_Transmit+0x36>
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e122      	b.n	80053bc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_SPI_Transmit+0x48>
 8005180:	2302      	movs	r3, #2
 8005182:	e11b      	b.n	80053bc <HAL_SPI_Transmit+0x280>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	88fa      	ldrh	r2, [r7, #6]
 80051a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d2:	d10f      	bne.n	80051f4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d007      	beq.n	8005212 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521a:	d152      	bne.n	80052c2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit+0xee>
 8005224:	8b7b      	ldrh	r3, [r7, #26]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d145      	bne.n	80052b6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	881a      	ldrh	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800524e:	e032      	b.n	80052b6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d112      	bne.n	8005284 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	1c9a      	adds	r2, r3, #2
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005282:	e018      	b.n	80052b6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005284:	f7fd fac0 	bl	8002808 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d803      	bhi.n	800529c <HAL_SPI_Transmit+0x160>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_Transmit+0x166>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e082      	b.n	80053bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1c7      	bne.n	8005250 <HAL_SPI_Transmit+0x114>
 80052c0:	e053      	b.n	800536a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_SPI_Transmit+0x194>
 80052ca:	8b7b      	ldrh	r3, [r7, #26]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d147      	bne.n	8005360 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052f6:	e033      	b.n	8005360 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d113      	bne.n	800532e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800532c:	e018      	b.n	8005360 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532e:	f7fd fa6b 	bl	8002808 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d803      	bhi.n	8005346 <HAL_SPI_Transmit+0x20a>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005344:	d102      	bne.n	800534c <HAL_SPI_Transmit+0x210>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e02d      	b.n	80053bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1c6      	bne.n	80052f8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fbe6 	bl	8005b40 <SPI_EndRxTxTransaction>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d001      	beq.n	80053e4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
 80053e2:	e104      	b.n	80055ee <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Receive+0x2c>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0fc      	b.n	80055ee <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053fc:	d112      	bne.n	8005424 <HAL_SPI_Receive+0x60>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2204      	movs	r2, #4
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f8eb 	bl	80055f6 <HAL_SPI_TransmitReceive>
 8005420:	4603      	mov	r3, r0
 8005422:	e0e4      	b.n	80055ee <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005424:	f7fd f9f0 	bl	8002808 <HAL_GetTick>
 8005428:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_SPI_Receive+0x74>
 8005434:	2302      	movs	r3, #2
 8005436:	e0da      	b.n	80055ee <HAL_SPI_Receive+0x22a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2204      	movs	r2, #4
 8005444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005486:	d10f      	bne.n	80054a8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005496:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d007      	beq.n	80054c6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d170      	bne.n	80055b0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054ce:	e035      	b.n	800553c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d115      	bne.n	800550a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f103 020c 	add.w	r2, r3, #12
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005508:	e018      	b.n	800553c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800550a:	f7fd f97d 	bl	8002808 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d803      	bhi.n	8005522 <HAL_SPI_Receive+0x15e>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005520:	d102      	bne.n	8005528 <HAL_SPI_Receive+0x164>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e058      	b.n	80055ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1c4      	bne.n	80054d0 <HAL_SPI_Receive+0x10c>
 8005546:	e038      	b.n	80055ba <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d113      	bne.n	800557e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	b292      	uxth	r2, r2
 8005562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005568:	1c9a      	adds	r2, r3, #2
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800557c:	e018      	b.n	80055b0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557e:	f7fd f943 	bl	8002808 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d803      	bhi.n	8005596 <HAL_SPI_Receive+0x1d2>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005594:	d102      	bne.n	800559c <HAL_SPI_Receive+0x1d8>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e01e      	b.n	80055ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1c6      	bne.n	8005548 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa58 	bl	8005a74 <SPI_EndRxTransaction>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b08a      	sub	sp, #40	@ 0x28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005604:	2301      	movs	r3, #1
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005608:	f7fd f8fe 	bl	8002808 <HAL_GetTick>
 800560c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005614:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800561c:	887b      	ldrh	r3, [r7, #2]
 800561e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d00c      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x4a>
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800562c:	d106      	bne.n	800563c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_SPI_TransmitReceive+0x46>
 8005636:	7ffb      	ldrb	r3, [r7, #31]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d001      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
 800563e:	e17f      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x5c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x5c>
 800564c:	887b      	ldrh	r3, [r7, #2]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e174      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x6e>
 8005660:	2302      	movs	r3, #2
 8005662:	e16d      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b04      	cmp	r3, #4
 8005676:	d003      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2205      	movs	r2, #5
 800567c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	887a      	ldrh	r2, [r7, #2]
 8005696:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	887a      	ldrh	r2, [r7, #2]
 80056a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	887a      	ldrh	r2, [r7, #2]
 80056a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d007      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d17e      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_TransmitReceive+0xf6>
 80056e6:	8afb      	ldrh	r3, [r7, #22]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d16c      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	1c9a      	adds	r2, r3, #2
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005710:	e059      	b.n	80057c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b02      	cmp	r3, #2
 800571e:	d11b      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x162>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x162>
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b01      	cmp	r3, #1
 800572e:	d113      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	881a      	ldrh	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	1c9a      	adds	r2, r3, #2
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d119      	bne.n	800579a <HAL_SPI_TransmitReceive+0x1a4>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d014      	beq.n	800579a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	b292      	uxth	r2, r2
 800577c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005796:	2301      	movs	r3, #1
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800579a:	f7fd f835 	bl	8002808 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d80d      	bhi.n	80057c6 <HAL_SPI_TransmitReceive+0x1d0>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b0:	d009      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0bc      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1a0      	bne.n	8005712 <HAL_SPI_TransmitReceive+0x11c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d19b      	bne.n	8005712 <HAL_SPI_TransmitReceive+0x11c>
 80057da:	e082      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x1f4>
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d171      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005810:	e05d      	b.n	80058ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11c      	bne.n	800585a <HAL_SPI_TransmitReceive+0x264>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_SPI_TransmitReceive+0x264>
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	2b01      	cmp	r3, #1
 800582e:	d114      	bne.n	800585a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d119      	bne.n	800589c <HAL_SPI_TransmitReceive+0x2a6>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d014      	beq.n	800589c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800589c:	f7fc ffb4 	bl	8002808 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d803      	bhi.n	80058b4 <HAL_SPI_TransmitReceive+0x2be>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058b2:	d102      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x2c4>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e038      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d19c      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x21c>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d197      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f92a 	bl	8005b40 <SPI_EndRxTxTransaction>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e01d      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800593e:	2300      	movs	r3, #0
  }
}
 8005940:	4618      	mov	r0, r3
 8005942:	3728      	adds	r7, #40	@ 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005956:	b2db      	uxtb	r3, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005974:	f7fc ff48 	bl	8002808 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4413      	add	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005984:	f7fc ff40 	bl	8002808 <HAL_GetTick>
 8005988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800598a:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	015b      	lsls	r3, r3, #5
 8005990:	0d1b      	lsrs	r3, r3, #20
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	e055      	b.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a2:	d051      	beq.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059a4:	f7fc ff30 	bl	8002808 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d902      	bls.n	80059ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d13d      	bne.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d2:	d111      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059dc:	d004      	beq.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e6:	d107      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a00:	d10f      	bne.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e018      	b.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e002      	b.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4013      	ands	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d19a      	bne.n	800599c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200000c8 	.word	0x200000c8

08005a74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a88:	d111      	bne.n	8005aae <SPI_EndRxTransaction+0x3a>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a92:	d004      	beq.n	8005a9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a9c:	d107      	bne.n	8005aae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ab6:	d12a      	bne.n	8005b0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac0:	d012      	beq.n	8005ae8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff ff49 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02d      	beq.n	8005b34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e026      	b.n	8005b36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	2101      	movs	r1, #1
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff ff36 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01a      	beq.n	8005b34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e013      	b.n	8005b36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	2101      	movs	r1, #1
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff ff23 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e000      	b.n	8005b36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2201      	movs	r2, #1
 8005b54:	2102      	movs	r1, #2
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff ff04 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e032      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b72:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <SPI_EndRxTxTransaction+0xa0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1b      	ldr	r2, [pc, #108]	@ (8005be4 <SPI_EndRxTxTransaction+0xa4>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	0d5b      	lsrs	r3, r3, #21
 8005b7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b90:	d112      	bne.n	8005bb8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	@ 0x80
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fee1 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d016      	beq.n	8005bd6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bac:	f043 0220 	orr.w	r2, r3, #32
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e00f      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bce:	2b80      	cmp	r3, #128	@ 0x80
 8005bd0:	d0f2      	beq.n	8005bb8 <SPI_EndRxTxTransaction+0x78>
 8005bd2:	e000      	b.n	8005bd6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005bd4:	bf00      	nop
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	200000c8 	.word	0x200000c8
 8005be4:	165e9f81 	.word	0x165e9f81

08005be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e042      	b.n	8005c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fb fa6a 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	@ 0x24
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f82b 	bl	8005c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b0c0      	sub	sp, #256	@ 0x100
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	68d9      	ldr	r1, [r3, #12]
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	ea40 0301 	orr.w	r3, r0, r1
 8005cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ce0:	f021 010c 	bic.w	r1, r1, #12
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d02:	6999      	ldr	r1, [r3, #24]
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	ea40 0301 	orr.w	r3, r0, r1
 8005d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b8f      	ldr	r3, [pc, #572]	@ (8005f54 <UART_SetConfig+0x2cc>)
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d005      	beq.n	8005d28 <UART_SetConfig+0xa0>
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b8d      	ldr	r3, [pc, #564]	@ (8005f58 <UART_SetConfig+0x2d0>)
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d104      	bne.n	8005d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fe fef2 	bl	8004b10 <HAL_RCC_GetPCLK2Freq>
 8005d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d30:	e003      	b.n	8005d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d32:	f7fe fed9 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8005d36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d44:	f040 810c 	bne.w	8005f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	1891      	adds	r1, r2, r2
 8005d60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d62:	415b      	adcs	r3, r3
 8005d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	eb12 0801 	adds.w	r8, r2, r1
 8005d70:	4629      	mov	r1, r5
 8005d72:	eb43 0901 	adc.w	r9, r3, r1
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d8a:	4690      	mov	r8, r2
 8005d8c:	4699      	mov	r9, r3
 8005d8e:	4623      	mov	r3, r4
 8005d90:	eb18 0303 	adds.w	r3, r8, r3
 8005d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d98:	462b      	mov	r3, r5
 8005d9a:	eb49 0303 	adc.w	r3, r9, r3
 8005d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005db6:	460b      	mov	r3, r1
 8005db8:	18db      	adds	r3, r3, r3
 8005dba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	eb42 0303 	adc.w	r3, r2, r3
 8005dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005dcc:	f7fa fa0e 	bl	80001ec <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4b61      	ldr	r3, [pc, #388]	@ (8005f5c <UART_SetConfig+0x2d4>)
 8005dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	011c      	lsls	r4, r3, #4
 8005dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005de8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	1891      	adds	r1, r2, r2
 8005df6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005df8:	415b      	adcs	r3, r3
 8005dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e00:	4641      	mov	r1, r8
 8005e02:	eb12 0a01 	adds.w	sl, r2, r1
 8005e06:	4649      	mov	r1, r9
 8005e08:	eb43 0b01 	adc.w	fp, r3, r1
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e20:	4692      	mov	sl, r2
 8005e22:	469b      	mov	fp, r3
 8005e24:	4643      	mov	r3, r8
 8005e26:	eb1a 0303 	adds.w	r3, sl, r3
 8005e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	eb4b 0303 	adc.w	r3, fp, r3
 8005e34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	18db      	adds	r3, r3, r3
 8005e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e52:	4613      	mov	r3, r2
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e62:	f7fa f9c3 	bl	80001ec <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f5c <UART_SetConfig+0x2d4>)
 8005e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2264      	movs	r2, #100	@ 0x64
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	1acb      	subs	r3, r1, r3
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e82:	4b36      	ldr	r3, [pc, #216]	@ (8005f5c <UART_SetConfig+0x2d4>)
 8005e84:	fba3 2302 	umull	r2, r3, r3, r2
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e90:	441c      	add	r4, r3
 8005e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	1891      	adds	r1, r2, r2
 8005eaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005eac:	415b      	adcs	r3, r3
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	1851      	adds	r1, r2, r1
 8005eb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005eba:	4649      	mov	r1, r9
 8005ebc:	414b      	adcs	r3, r1
 8005ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ecc:	4659      	mov	r1, fp
 8005ece:	00cb      	lsls	r3, r1, #3
 8005ed0:	4651      	mov	r1, sl
 8005ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ed6:	4651      	mov	r1, sl
 8005ed8:	00ca      	lsls	r2, r1, #3
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	189b      	adds	r3, r3, r2
 8005ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ee8:	464b      	mov	r3, r9
 8005eea:	460a      	mov	r2, r1
 8005eec:	eb42 0303 	adc.w	r3, r2, r3
 8005ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f08:	460b      	mov	r3, r1
 8005f0a:	18db      	adds	r3, r3, r3
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f0e:	4613      	mov	r3, r2
 8005f10:	eb42 0303 	adc.w	r3, r2, r3
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f1e:	f7fa f965 	bl	80001ec <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <UART_SetConfig+0x2d4>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	2164      	movs	r1, #100	@ 0x64
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	3332      	adds	r3, #50	@ 0x32
 8005f3a:	4a08      	ldr	r2, [pc, #32]	@ (8005f5c <UART_SetConfig+0x2d4>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 0207 	and.w	r2, r3, #7
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4422      	add	r2, r4
 8005f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f50:	e106      	b.n	8006160 <UART_SetConfig+0x4d8>
 8005f52:	bf00      	nop
 8005f54:	40011000 	.word	0x40011000
 8005f58:	40011400 	.word	0x40011400
 8005f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f72:	4642      	mov	r2, r8
 8005f74:	464b      	mov	r3, r9
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	6239      	str	r1, [r7, #32]
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f82:	4641      	mov	r1, r8
 8005f84:	1854      	adds	r4, r2, r1
 8005f86:	4649      	mov	r1, r9
 8005f88:	eb43 0501 	adc.w	r5, r3, r1
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	00eb      	lsls	r3, r5, #3
 8005f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9a:	00e2      	lsls	r2, r4, #3
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	4643      	mov	r3, r8
 8005fa2:	18e3      	adds	r3, r4, r3
 8005fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fa8:	464b      	mov	r3, r9
 8005faa:	eb45 0303 	adc.w	r3, r5, r3
 8005fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fce:	4629      	mov	r1, r5
 8005fd0:	008b      	lsls	r3, r1, #2
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd8:	4621      	mov	r1, r4
 8005fda:	008a      	lsls	r2, r1, #2
 8005fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fe0:	f7fa f904 	bl	80001ec <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4b60      	ldr	r3, [pc, #384]	@ (800616c <UART_SetConfig+0x4e4>)
 8005fea:	fba3 2302 	umull	r2, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	011c      	lsls	r4, r3, #4
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ffc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	61b9      	str	r1, [r7, #24]
 800600c:	415b      	adcs	r3, r3
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006014:	4641      	mov	r1, r8
 8006016:	1851      	adds	r1, r2, r1
 8006018:	6139      	str	r1, [r7, #16]
 800601a:	4649      	mov	r1, r9
 800601c:	414b      	adcs	r3, r1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800602c:	4659      	mov	r1, fp
 800602e:	00cb      	lsls	r3, r1, #3
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006036:	4651      	mov	r1, sl
 8006038:	00ca      	lsls	r2, r1, #3
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	4603      	mov	r3, r0
 8006040:	4642      	mov	r2, r8
 8006042:	189b      	adds	r3, r3, r2
 8006044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006048:	464b      	mov	r3, r9
 800604a:	460a      	mov	r2, r1
 800604c:	eb42 0303 	adc.w	r3, r2, r3
 8006050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800605e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800606c:	4649      	mov	r1, r9
 800606e:	008b      	lsls	r3, r1, #2
 8006070:	4641      	mov	r1, r8
 8006072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006076:	4641      	mov	r1, r8
 8006078:	008a      	lsls	r2, r1, #2
 800607a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800607e:	f7fa f8b5 	bl	80001ec <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4611      	mov	r1, r2
 8006088:	4b38      	ldr	r3, [pc, #224]	@ (800616c <UART_SetConfig+0x4e4>)
 800608a:	fba3 2301 	umull	r2, r3, r3, r1
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2264      	movs	r2, #100	@ 0x64
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	3332      	adds	r3, #50	@ 0x32
 800609c:	4a33      	ldr	r2, [pc, #204]	@ (800616c <UART_SetConfig+0x4e4>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060a8:	441c      	add	r4, r3
 80060aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ae:	2200      	movs	r2, #0
 80060b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80060b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80060b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	415b      	adcs	r3, r3
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060c8:	4641      	mov	r1, r8
 80060ca:	1851      	adds	r1, r2, r1
 80060cc:	6039      	str	r1, [r7, #0]
 80060ce:	4649      	mov	r1, r9
 80060d0:	414b      	adcs	r3, r1
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060e0:	4659      	mov	r1, fp
 80060e2:	00cb      	lsls	r3, r1, #3
 80060e4:	4651      	mov	r1, sl
 80060e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ea:	4651      	mov	r1, sl
 80060ec:	00ca      	lsls	r2, r1, #3
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	4642      	mov	r2, r8
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060fa:	464b      	mov	r3, r9
 80060fc:	460a      	mov	r2, r1
 80060fe:	eb42 0303 	adc.w	r3, r2, r3
 8006102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	663b      	str	r3, [r7, #96]	@ 0x60
 800610e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800611c:	4649      	mov	r1, r9
 800611e:	008b      	lsls	r3, r1, #2
 8006120:	4641      	mov	r1, r8
 8006122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006126:	4641      	mov	r1, r8
 8006128:	008a      	lsls	r2, r1, #2
 800612a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800612e:	f7fa f85d 	bl	80001ec <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <UART_SetConfig+0x4e4>)
 8006138:	fba3 1302 	umull	r1, r3, r3, r2
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	2164      	movs	r1, #100	@ 0x64
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	3332      	adds	r3, #50	@ 0x32
 800614a:	4a08      	ldr	r2, [pc, #32]	@ (800616c <UART_SetConfig+0x4e4>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f003 020f 	and.w	r2, r3, #15
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4422      	add	r2, r4
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006166:	46bd      	mov	sp, r7
 8006168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616c:	51eb851f 	.word	0x51eb851f

08006170 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d123      	bne.n	80061ca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800618a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	6851      	ldr	r1, [r2, #4]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	6892      	ldr	r2, [r2, #8]
 8006196:	4311      	orrs	r1, r2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	68d2      	ldr	r2, [r2, #12]
 800619c:	4311      	orrs	r1, r2
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	6912      	ldr	r2, [r2, #16]
 80061a2:	4311      	orrs	r1, r2
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	6952      	ldr	r2, [r2, #20]
 80061a8:	4311      	orrs	r1, r2
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	6992      	ldr	r2, [r2, #24]
 80061ae:	4311      	orrs	r1, r2
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	69d2      	ldr	r2, [r2, #28]
 80061b4:	4311      	orrs	r1, r2
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	6a12      	ldr	r2, [r2, #32]
 80061ba:	4311      	orrs	r1, r2
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061c0:	430a      	orrs	r2, r1
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e028      	b.n	800621c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	69d9      	ldr	r1, [r3, #28]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	4319      	orrs	r1, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	430b      	orrs	r3, r1
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80061f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	6851      	ldr	r1, [r2, #4]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	6892      	ldr	r2, [r2, #8]
 80061fc:	4311      	orrs	r1, r2
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	4311      	orrs	r1, r2
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	6912      	ldr	r2, [r2, #16]
 8006208:	4311      	orrs	r1, r2
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	6952      	ldr	r2, [r2, #20]
 800620e:	4311      	orrs	r1, r2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	6992      	ldr	r2, [r2, #24]
 8006214:	430a      	orrs	r2, r1
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d128      	bne.n	800628e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	1e59      	subs	r1, r3, #1
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	3b01      	subs	r3, #1
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	4319      	orrs	r1, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	3b01      	subs	r3, #1
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	4319      	orrs	r1, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	031b      	lsls	r3, r3, #12
 8006266:	4319      	orrs	r1, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	3b01      	subs	r3, #1
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	4319      	orrs	r1, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	3b01      	subs	r3, #1
 8006278:	051b      	lsls	r3, r3, #20
 800627a:	4319      	orrs	r1, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	3b01      	subs	r3, #1
 8006282:	061b      	lsls	r3, r3, #24
 8006284:	430b      	orrs	r3, r1
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	e02f      	b.n	80062ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006296:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	68d2      	ldr	r2, [r2, #12]
 800629e:	3a01      	subs	r2, #1
 80062a0:	0311      	lsls	r1, r2, #12
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	6952      	ldr	r2, [r2, #20]
 80062a6:	3a01      	subs	r2, #1
 80062a8:	0512      	lsls	r2, r2, #20
 80062aa:	430a      	orrs	r2, r1
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	1e59      	subs	r1, r3, #1
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	4319      	orrs	r1, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	4319      	orrs	r1, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	3b01      	subs	r3, #1
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	4319      	orrs	r1, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	061b      	lsls	r3, r3, #24
 80062e6:	430b      	orrs	r3, r1
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	0d9b      	lsrs	r3, r3, #22
 8006312:	059b      	lsls	r3, r3, #22
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	6811      	ldr	r1, [r2, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	4311      	orrs	r1, r2
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	6892      	ldr	r2, [r2, #8]
 8006322:	3a01      	subs	r2, #1
 8006324:	0152      	lsls	r2, r2, #5
 8006326:	4311      	orrs	r1, r2
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	68d2      	ldr	r2, [r2, #12]
 800632c:	0252      	lsls	r2, r2, #9
 800632e:	430a      	orrs	r2, r1
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006336:	f7fc fa67 	bl	8002808 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800633c:	e010      	b.n	8006360 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006344:	d00c      	beq.n	8006360 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <FMC_SDRAM_SendCommand+0x60>
 800634c:	f7fc fa5c 	bl	8002808 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d201      	bcs.n	8006360 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d0e8      	beq.n	800633e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006388:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <memset>:
 80063a4:	4402      	add	r2, r0
 80063a6:	4603      	mov	r3, r0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d100      	bne.n	80063ae <memset+0xa>
 80063ac:	4770      	bx	lr
 80063ae:	f803 1b01 	strb.w	r1, [r3], #1
 80063b2:	e7f9      	b.n	80063a8 <memset+0x4>

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	@ (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	@ (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	@ (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	@ (80063f8 <__libc_init_array+0x44>)
 80063c8:	f000 f818 	bl	80063fc <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	08007ef4 	.word	0x08007ef4
 80063f0:	08007ef4 	.word	0x08007ef4
 80063f4:	08007ef4 	.word	0x08007ef4
 80063f8:	08007ef8 	.word	0x08007ef8

080063fc <_init>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	bf00      	nop
 8006400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006402:	bc08      	pop	{r3}
 8006404:	469e      	mov	lr, r3
 8006406:	4770      	bx	lr

08006408 <_fini>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr
