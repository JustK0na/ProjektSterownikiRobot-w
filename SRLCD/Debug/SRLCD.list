
SRLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b30  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083cc  080083cc  0000a434  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080083cc  080083cc  000093cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d4  080083d4  0000a434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083d8  080083d8  000093d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000434  20000000  080083dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a434  2**0
                  CONTENTS
 10 .bss          00000488  20000434  20000434  0000a434  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008bc  200008bc  0000a434  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a434  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c27  00000000  00000000  0000a464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332c  00000000  00000000  0002208b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  000253b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001025  00000000  00000000  00026880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025404  00000000  00000000  000278a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171e0  00000000  00000000  0004cca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd241  00000000  00000000  00063e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001410ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000578c  00000000  00000000  00141110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000434 	.word	0x20000434
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006884 	.word	0x08006884

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000438 	.word	0x20000438
 80001e8:	08006884 	.word	0x08006884

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <update_ball_tile_position>:
static void MX_I2C3_Init(void);
static void MX_LTDC_Init(void);
static void MX_SPI5_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void update_ball_tile_position(Ball *ball) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    ball->tile_x = (uint8_t)(ball->x_px / CELL_SIZE);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	ed93 7a00 	vldr	s14, [r3]
 8000526:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800052a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800052e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000532:	edc7 7a00 	vstr	s15, [r7]
 8000536:	783b      	ldrb	r3, [r7, #0]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	721a      	strb	r2, [r3, #8]
    ball->tile_y = (uint8_t)(ball->y_px / CELL_SIZE);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	ed93 7a01 	vldr	s14, [r3, #4]
 8000544:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800054c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000550:	edc7 7a00 	vstr	s15, [r7]
 8000554:	783b      	ldrb	r3, [r7, #0]
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	725a      	strb	r2, [r3, #9]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <draw_cell>:
void draw_cell(uint8_t tile_x, uint8_t tile_y, uint32_t color)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	603a      	str	r2, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	460b      	mov	r3, r1
 8000576:	71bb      	strb	r3, [r7, #6]
    BSP_LCD_SetTextColor(color);
 8000578:	6838      	ldr	r0, [r7, #0]
 800057a:	f001 fd77 	bl	800206c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	b29b      	uxth	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	0092      	lsls	r2, r2, #2
 8000586:	4413      	add	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	b298      	uxth	r0, r3
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	b29b      	uxth	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	4413      	add	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	b299      	uxth	r1, r3
 800059a:	2314      	movs	r3, #20
 800059c:	2214      	movs	r2, #20
 800059e:	f001 fed7 	bl	8002350 <BSP_LCD_FillRect>
        MAZE_ORIGIN_X + tile_x * CELL_SIZE,
        MAZE_ORIGIN_Y + tile_y * CELL_SIZE,
        CELL_SIZE,
        CELL_SIZE
    );
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <draw_ballSprite>:
void draw_ballSprite(float x_px, float y_px)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005b6:	edc7 0a00 	vstr	s1, [r7]
	int top_left_x = (int)(x_px - CELL_SIZE / 2);
 80005ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80005be:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80005c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005ca:	ee17 3a90 	vmov	r3, s15
 80005ce:	60fb      	str	r3, [r7, #12]
	int top_left_y = (int)(y_px - CELL_SIZE / 2);
 80005d0:	edd7 7a00 	vldr	s15, [r7]
 80005d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80005d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005e0:	ee17 3a90 	vmov	r3, s15
 80005e4:	60bb      	str	r3, [r7, #8]

	for (int py = 0; py < CELL_SIZE; py++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e028      	b.n	800063e <draw_ballSprite+0x92>
		for (int px = 0; px < CELL_SIZE; px++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	e01f      	b.n	8000632 <draw_ballSprite+0x86>
			if (ballSprite[py][px] == 1) {
 80005f2:	4917      	ldr	r1, [pc, #92]	@ (8000650 <draw_ballSprite+0xa4>)
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	18ca      	adds	r2, r1, r3
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d110      	bne.n	800062c <draw_ballSprite+0x80>
				BSP_LCD_DrawPixel(top_left_x + px, top_left_y + py, LCD_COLOR_YELLOW);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	b29a      	uxth	r2, r3
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4413      	add	r3, r2
 8000614:	b298      	uxth	r0, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	b29a      	uxth	r2, r3
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	b29b      	uxth	r3, r3
 800061e:	4413      	add	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 8000626:	4619      	mov	r1, r3
 8000628:	f001 ffd2 	bl	80025d0 <BSP_LCD_DrawPixel>
		for (int px = 0; px < CELL_SIZE; px++) {
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	3301      	adds	r3, #1
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	2b13      	cmp	r3, #19
 8000636:	dddc      	ble.n	80005f2 <draw_ballSprite+0x46>
	for (int py = 0; py < CELL_SIZE; py++) {
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b13      	cmp	r3, #19
 8000642:	ddd3      	ble.n	80005ec <draw_ballSprite+0x40>
	        }
	    }
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000240 	.word	0x20000240

08000654 <draw_maze>:
void draw_maze(const uint8_t maze_data[MAZE_HEIGHT][MAZE_WIDTH])
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	for (int y = 0; y < MAZE_HEIGHT; y++) {
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e03d      	b.n	80006de <draw_maze+0x8a>
	        for (int x = 0; x < MAZE_WIDTH; x++) {
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	e034      	b.n	80006d2 <draw_maze+0x7e>
	        	uint32_t color;

	        	switch (maze_data[y][x]) {
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	441a      	add	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d818      	bhi.n	80006b4 <draw_maze+0x60>
 8000682:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <draw_maze+0x34>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006a1 	.word	0x080006a1
 8000690:	080006a7 	.word	0x080006a7
 8000694:	080006af 	.word	0x080006af
	        	case 0:  color = LCD_COLOR_BLACK; break;
 8000698:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00d      	b.n	80006bc <draw_maze+0x68>
	        	case 1:  color = LCD_COLOR_DARKBLUE; break;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <draw_maze+0x9c>)
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e00a      	b.n	80006bc <draw_maze+0x68>
	        	case 2:  color = LCD_COLOR_GREEN; break;
 80006a6:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e006      	b.n	80006bc <draw_maze+0x68>
	        	case 3:  color = LCD_COLOR_RED; break;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <draw_maze+0xa0>)
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e003      	b.n	80006bc <draw_maze+0x68>
	        	default: color = LCD_COLOR_WHITE; break;
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	bf00      	nop
	        	}

	        	draw_cell(x, y, color);
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	b2d1      	uxtb	r1, r2
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff4e 	bl	8000568 <draw_cell>
	        for (int x = 0; x < MAZE_WIDTH; x++) {
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	3301      	adds	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	2b0b      	cmp	r3, #11
 80006d6:	ddc7      	ble.n	8000668 <draw_maze+0x14>
	for (int y = 0; y < MAZE_HEIGHT; y++) {
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	ddbe      	ble.n	8000662 <draw_maze+0xe>
	        }
	    }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	ff000080 	.word	0xff000080
 80006f4:	ffff0000 	.word	0xffff0000

080006f8 <wait_for_user_button>:

void wait_for_user_button(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
 80006fc:	bf00      	nop
 80006fe:	2101      	movs	r1, #1
 8000700:	480a      	ldr	r0, [pc, #40]	@ (800072c <wait_for_user_button+0x34>)
 8000702:	f003 faf1 	bl	8003ce8 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d0f8      	beq.n	80006fe <wait_for_user_button+0x6>
    HAL_Delay(200);
 800070c:	20c8      	movs	r0, #200	@ 0xc8
 800070e:	f002 fab3 	bl	8002c78 <HAL_Delay>
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);
 8000712:	bf00      	nop
 8000714:	2101      	movs	r1, #1
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <wait_for_user_button+0x34>)
 8000718:	f003 fae6 	bl	8003ce8 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f8      	beq.n	8000714 <wait_for_user_button+0x1c>
    HAL_Delay(200);
 8000722:	20c8      	movs	r0, #200	@ 0xc8
 8000724:	f002 faa8 	bl	8002c78 <HAL_Delay>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020000 	.word	0x40020000

08000730 <reset_ball_position>:

void reset_ball_position(Ball *ball) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    ball->x_px = 1 * CELL_SIZE + CELL_SIZE / 2;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <reset_ball_position+0x24>)
 800073c:	601a      	str	r2, [r3, #0]
    ball->y_px = 1 * CELL_SIZE + CELL_SIZE / 2;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <reset_ball_position+0x24>)
 8000742:	605a      	str	r2, [r3, #4]
    update_ball_tile_position(ball);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fee7 	bl	8000518 <update_ball_tile_position>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	41f00000 	.word	0x41f00000

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f002 fa19 	bl	8002b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f9b3 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 fbf3 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800076a:	f000 fa21 	bl	8000bb0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800076e:	f000 fba1 	bl	8000eb4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000772:	f000 fa4f 	bl	8000c14 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000776:	f000 fa8d 	bl	8000c94 <MX_LTDC_Init>
  MX_SPI5_Init();
 800077a:	f000 fb3b 	bl	8000df4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800077e:	f000 fb6f 	bl	8000e60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000782:	f001 fb7d 	bl	8001e80 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8000786:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800078a:	2000      	movs	r0, #0
 800078c:	f001 fbfa 	bl	8001f84 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8000790:	2000      	movs	r0, #0
 8000792:	f001 fc5b 	bl	800204c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000796:	f001 fe35 	bl	8002404 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800079a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800079e:	f001 fcad 	bl	80020fc <BSP_LCD_Clear>


  update_ball_tile_position(&ball);
 80007a2:	48ba      	ldr	r0, [pc, #744]	@ (8000a8c <main+0x334>)
 80007a4:	f7ff feb8 	bl	8000518 <update_ball_tile_position>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  GameState currentGameState = GAME_RUNNING;
 80007a8:	2300      	movs	r3, #0
 80007aa:	77fb      	strb	r3, [r7, #31]
  uint8_t currTile = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	777b      	strb	r3, [r7, #29]
  uint8_t currLevel = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	77bb      	strb	r3, [r7, #30]

  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b8:	48b5      	ldr	r0, [pc, #724]	@ (8000a90 <main+0x338>)
 80007ba:	f003 fac6 	bl	8003d4a <HAL_GPIO_TogglePin>
	  HAL_Delay(17);
 80007be:	2011      	movs	r0, #17
 80007c0:	f002 fa5a 	bl	8002c78 <HAL_Delay>
	   * ###########################
	   * ####  GAME STATE CHECK  ###
	   * ###########################
	   * */

	  currTile = currMaze[ball.tile_y][ball.tile_x];
 80007c4:	4bb3      	ldr	r3, [pc, #716]	@ (8000a94 <main+0x33c>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4bb0      	ldr	r3, [pc, #704]	@ (8000a8c <main+0x334>)
 80007ca:	7a5b      	ldrb	r3, [r3, #9]
 80007cc:	4619      	mov	r1, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	440b      	add	r3, r1
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	4aac      	ldr	r2, [pc, #688]	@ (8000a8c <main+0x334>)
 80007da:	7a12      	ldrb	r2, [r2, #8]
 80007dc:	5c9b      	ldrb	r3, [r3, r2]
 80007de:	777b      	strb	r3, [r7, #29]

	  if (currTile == 2) {
 80007e0:	7f7b      	ldrb	r3, [r7, #29]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d102      	bne.n	80007ec <main+0x94>
	      currentGameState = GAME_WIN;
 80007e6:	2301      	movs	r3, #1
 80007e8:	77fb      	strb	r3, [r7, #31]
 80007ea:	e007      	b.n	80007fc <main+0xa4>
	  }
	  else if(currTile == 3){
 80007ec:	7f7b      	ldrb	r3, [r7, #29]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d102      	bne.n	80007f8 <main+0xa0>
		  currentGameState = GAME_LOSE;
 80007f2:	2302      	movs	r3, #2
 80007f4:	77fb      	strb	r3, [r7, #31]
 80007f6:	e001      	b.n	80007fc <main+0xa4>
	  }
	  else{
	  	  currentGameState = GAME_RUNNING;
 80007f8:	2300      	movs	r3, #0
 80007fa:	77fb      	strb	r3, [r7, #31]
	  	   * ###########################
	  	   * ######### GAME LOGIC  #####
	  	   * ###########################
	  	   * */

	  if(currentGameState == GAME_RUNNING){
 80007fc:	7ffb      	ldrb	r3, [r7, #31]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d164      	bne.n	80008cc <main+0x174>
		 draw_maze(currMaze);
 8000802:	4ba4      	ldr	r3, [pc, #656]	@ (8000a94 <main+0x33c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff24 	bl	8000654 <draw_maze>
		 float vx = 1.0f;
 800080c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000810:	61bb      	str	r3, [r7, #24]
		 float vy = 1.0f;
 8000812:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000816:	617b      	str	r3, [r7, #20]

		 float new_x = ball.x_px + vx;
 8000818:	4b9c      	ldr	r3, [pc, #624]	@ (8000a8c <main+0x334>)
 800081a:	edd3 7a00 	vldr	s15, [r3]
 800081e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000826:	edc7 7a04 	vstr	s15, [r7, #16]
		 int next_tile_x = (int)(new_x / CELL_SIZE);
 800082a:	ed97 7a04 	vldr	s14, [r7, #16]
 800082e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083a:	ee17 3a90 	vmov	r3, s15
 800083e:	60fb      	str	r3, [r7, #12]
		 if (currMaze[ball.tile_y][next_tile_x] != 1) {
 8000840:	4b94      	ldr	r3, [pc, #592]	@ (8000a94 <main+0x33c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b91      	ldr	r3, [pc, #580]	@ (8000a8c <main+0x334>)
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	4619      	mov	r1, r3
 800084a:	460b      	mov	r3, r1
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	440b      	add	r3, r1
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	441a      	add	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d002      	beq.n	8000864 <main+0x10c>
		     ball.x_px = new_x;
 800085e:	4a8b      	ldr	r2, [pc, #556]	@ (8000a8c <main+0x334>)
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	6013      	str	r3, [r2, #0]
		 }


		 float new_y = ball.y_px + vy;
 8000864:	4b89      	ldr	r3, [pc, #548]	@ (8000a8c <main+0x334>)
 8000866:	edd3 7a01 	vldr	s15, [r3, #4]
 800086a:	ed97 7a05 	vldr	s14, [r7, #20]
 800086e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000872:	edc7 7a02 	vstr	s15, [r7, #8]
		 int next_tile_y = (int)(new_y / CELL_SIZE);
 8000876:	ed97 7a02 	vldr	s14, [r7, #8]
 800087a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800087e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000886:	ee17 3a90 	vmov	r3, s15
 800088a:	607b      	str	r3, [r7, #4]
		 if (currMaze[next_tile_y][ball.tile_x] != 1) {
 800088c:	4b81      	ldr	r3, [pc, #516]	@ (8000a94 <main+0x33c>)
 800088e:	6819      	ldr	r1, [r3, #0]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	4a7b      	ldr	r2, [pc, #492]	@ (8000a8c <main+0x334>)
 800089e:	7a12      	ldrb	r2, [r2, #8]
 80008a0:	5c9b      	ldrb	r3, [r3, r2]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d002      	beq.n	80008ac <main+0x154>
		     ball.y_px = new_y;
 80008a6:	4a79      	ldr	r2, [pc, #484]	@ (8000a8c <main+0x334>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	6053      	str	r3, [r2, #4]
		 }

		 update_ball_tile_position(&ball);
 80008ac:	4877      	ldr	r0, [pc, #476]	@ (8000a8c <main+0x334>)
 80008ae:	f7ff fe33 	bl	8000518 <update_ball_tile_position>
		 draw_ballSprite(ball.x_px, ball.y_px);
 80008b2:	4b76      	ldr	r3, [pc, #472]	@ (8000a8c <main+0x334>)
 80008b4:	edd3 7a00 	vldr	s15, [r3]
 80008b8:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <main+0x334>)
 80008ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80008be:	eef0 0a47 	vmov.f32	s1, s14
 80008c2:	eeb0 0a67 	vmov.f32	s0, s15
 80008c6:	f7ff fe71 	bl	80005ac <draw_ballSprite>
 80008ca:	e773      	b.n	80007b4 <main+0x5c>
	  }
	  else if(currentGameState == GAME_LOSE){
 80008cc:	7ffb      	ldrb	r3, [r7, #31]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d135      	bne.n	800093e <main+0x1e6>
		  BSP_LCD_Clear(LCD_COLOR_RED);
 80008d2:	4871      	ldr	r0, [pc, #452]	@ (8000a98 <main+0x340>)
 80008d4:	f001 fc12 	bl	80020fc <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80008d8:	486f      	ldr	r0, [pc, #444]	@ (8000a98 <main+0x340>)
 80008da:	f001 fbc7 	bl	800206c <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"YOU LOSE!", CENTER_MODE);
 80008de:	f001 fbf7 	bl	80020d0 <BSP_LCD_GetFont>
 80008e2:	4603      	mov	r3, r0
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	461a      	mov	r2, r3
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	b299      	uxth	r1, r3
 80008ee:	2301      	movs	r3, #1
 80008f0:	4a6a      	ldr	r2, [pc, #424]	@ (8000a9c <main+0x344>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f001 fc6e 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"Press button", CENTER_MODE);
 80008f8:	f001 fbea 	bl	80020d0 <BSP_LCD_GetFont>
 80008fc:	4603      	mov	r3, r0
 80008fe:	88db      	ldrh	r3, [r3, #6]
 8000900:	461a      	mov	r2, r3
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b299      	uxth	r1, r3
 800090a:	2301      	movs	r3, #1
 800090c:	4a64      	ldr	r2, [pc, #400]	@ (8000aa0 <main+0x348>)
 800090e:	2000      	movs	r0, #0
 8000910:	f001 fc60 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"to restart", CENTER_MODE);
 8000914:	f001 fbdc 	bl	80020d0 <BSP_LCD_GetFont>
 8000918:	4603      	mov	r3, r0
 800091a:	88db      	ldrh	r3, [r3, #6]
 800091c:	461a      	mov	r2, r3
 800091e:	00d2      	lsls	r2, r2, #3
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	b299      	uxth	r1, r3
 8000924:	2301      	movs	r3, #1
 8000926:	4a5f      	ldr	r2, [pc, #380]	@ (8000aa4 <main+0x34c>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fc53 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		  wait_for_user_button();
 800092e:	f7ff fee3 	bl	80006f8 <wait_for_user_button>
		  reset_ball_position(&ball);
 8000932:	4856      	ldr	r0, [pc, #344]	@ (8000a8c <main+0x334>)
 8000934:	f7ff fefc 	bl	8000730 <reset_ball_position>
		  currentGameState = GAME_RUNNING;
 8000938:	2300      	movs	r3, #0
 800093a:	77fb      	strb	r3, [r7, #31]
 800093c:	e73a      	b.n	80007b4 <main+0x5c>
	  }
	  else{
		  BSP_LCD_Clear(LCD_COLOR_GREEN);
 800093e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000942:	f001 fbdb 	bl	80020fc <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000946:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800094a:	f001 fb8f 	bl	800206c <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"YOU WIN!", CENTER_MODE);
 800094e:	f001 fbbf 	bl	80020d0 <BSP_LCD_GetFont>
 8000952:	4603      	mov	r3, r0
 8000954:	88db      	ldrh	r3, [r3, #6]
 8000956:	461a      	mov	r2, r3
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	4413      	add	r3, r2
 800095c:	b299      	uxth	r1, r3
 800095e:	2301      	movs	r3, #1
 8000960:	4a51      	ldr	r2, [pc, #324]	@ (8000aa8 <main+0x350>)
 8000962:	2000      	movs	r0, #0
 8000964:	f001 fc36 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"Press button", CENTER_MODE);
 8000968:	f001 fbb2 	bl	80020d0 <BSP_LCD_GetFont>
 800096c:	4603      	mov	r3, r0
 800096e:	88db      	ldrh	r3, [r3, #6]
 8000970:	461a      	mov	r2, r3
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	4413      	add	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	b299      	uxth	r1, r3
 800097a:	2301      	movs	r3, #1
 800097c:	4a48      	ldr	r2, [pc, #288]	@ (8000aa0 <main+0x348>)
 800097e:	2000      	movs	r0, #0
 8000980:	f001 fc28 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"to advance", CENTER_MODE);
 8000984:	f001 fba4 	bl	80020d0 <BSP_LCD_GetFont>
 8000988:	4603      	mov	r3, r0
 800098a:	88db      	ldrh	r3, [r3, #6]
 800098c:	461a      	mov	r2, r3
 800098e:	00d2      	lsls	r2, r2, #3
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b299      	uxth	r1, r3
 8000994:	2301      	movs	r3, #1
 8000996:	4a45      	ldr	r2, [pc, #276]	@ (8000aac <main+0x354>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fc1b 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		  wait_for_user_button();
 800099e:	f7ff feab 	bl	80006f8 <wait_for_user_button>


		  currLevel = (currLevel + 1) % 3;
 80009a2:	7fbb      	ldrb	r3, [r7, #30]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	4b42      	ldr	r3, [pc, #264]	@ (8000ab0 <main+0x358>)
 80009a8:	fb83 3102 	smull	r3, r1, r3, r2
 80009ac:	17d3      	asrs	r3, r2, #31
 80009ae:	1ac9      	subs	r1, r1, r3
 80009b0:	460b      	mov	r3, r1
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	440b      	add	r3, r1
 80009b6:	1ad1      	subs	r1, r2, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	77bb      	strb	r3, [r7, #30]
		  switch (currLevel) {
 80009bc:	7fbb      	ldrb	r3, [r7, #30]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d040      	beq.n	8000a44 <main+0x2ec>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	dc5b      	bgt.n	8000a7e <main+0x326>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <main+0x278>
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d01d      	beq.n	8000a0a <main+0x2b2>
 80009ce:	e056      	b.n	8000a7e <main+0x326>
		          case 0: currMaze = maze1;
 80009d0:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <main+0x33c>)
 80009d2:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <main+0x35c>)
 80009d4:	601a      	str	r2, [r3, #0]
		          	  	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 80009d6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80009da:	f001 fb8f 	bl	80020fc <BSP_LCD_Clear>
		          	  	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80009de:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80009e2:	f001 fb43 	bl	800206c <BSP_LCD_SetTextColor>
		          	  	  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Level 1", CENTER_MODE);
 80009e6:	f001 fb73 	bl	80020d0 <BSP_LCD_GetFont>
 80009ea:	4603      	mov	r3, r0
 80009ec:	88db      	ldrh	r3, [r3, #6]
 80009ee:	461a      	mov	r2, r3
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	b299      	uxth	r1, r3
 80009f6:	2301      	movs	r3, #1
 80009f8:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <main+0x360>)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f001 fbea 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		          	  	  HAL_Delay(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a04:	f002 f938 	bl	8002c78 <HAL_Delay>
		          	  	  break;
 8000a08:	e039      	b.n	8000a7e <main+0x326>
		          case 1: currMaze = maze2;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <main+0x33c>)
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000abc <main+0x364>)
 8000a0e:	601a      	str	r2, [r3, #0]
		          	  	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000a10:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000a14:	f001 fb72 	bl	80020fc <BSP_LCD_Clear>
		          	  	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a18:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000a1c:	f001 fb26 	bl	800206c <BSP_LCD_SetTextColor>
		          	  	  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Level 2", CENTER_MODE);
 8000a20:	f001 fb56 	bl	80020d0 <BSP_LCD_GetFont>
 8000a24:	4603      	mov	r3, r0
 8000a26:	88db      	ldrh	r3, [r3, #6]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b299      	uxth	r1, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <main+0x368>)
 8000a34:	2000      	movs	r0, #0
 8000a36:	f001 fbcd 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		          	  	  HAL_Delay(1000);
 8000a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3e:	f002 f91b 	bl	8002c78 <HAL_Delay>
		          	  	  break;
 8000a42:	e01c      	b.n	8000a7e <main+0x326>
		          case 2: currMaze = maze3;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <main+0x33c>)
 8000a46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <main+0x36c>)
 8000a48:	601a      	str	r2, [r3, #0]
		          	  	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000a4a:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000a4e:	f001 fb55 	bl	80020fc <BSP_LCD_Clear>
		          	  	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a52:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000a56:	f001 fb09 	bl	800206c <BSP_LCD_SetTextColor>
		          	  	  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Level 3", CENTER_MODE);
 8000a5a:	f001 fb39 	bl	80020d0 <BSP_LCD_GetFont>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	88db      	ldrh	r3, [r3, #6]
 8000a62:	461a      	mov	r2, r3
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	b299      	uxth	r1, r3
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <main+0x370>)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f001 fbb0 	bl	80021d4 <BSP_LCD_DisplayStringAt>
		          	  	  HAL_Delay(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a78:	f002 f8fe 	bl	8002c78 <HAL_Delay>
		          	  	  break;
 8000a7c:	bf00      	nop
		  }

		  reset_ball_position(&ball);
 8000a7e:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <main+0x334>)
 8000a80:	f7ff fe56 	bl	8000730 <reset_ball_position>
		  currentGameState = GAME_RUNNING;
 8000a84:	2300      	movs	r3, #0
 8000a86:	77fb      	strb	r3, [r7, #31]
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a88:	e694      	b.n	80007b4 <main+0x5c>
 8000a8a:	bf00      	nop
 8000a8c:	200003d0 	.word	0x200003d0
 8000a90:	40021800 	.word	0x40021800
 8000a94:	200003dc 	.word	0x200003dc
 8000a98:	ffff0000 	.word	0xffff0000
 8000a9c:	0800689c 	.word	0x0800689c
 8000aa0:	080068a8 	.word	0x080068a8
 8000aa4:	080068b8 	.word	0x080068b8
 8000aa8:	080068c4 	.word	0x080068c4
 8000aac:	080068d0 	.word	0x080068d0
 8000ab0:	55555556 	.word	0x55555556
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	080068dc 	.word	0x080068dc
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	080068e4 	.word	0x080068e4
 8000ac4:	20000180 	.word	0x20000180
 8000ac8:	080068ec 	.word	0x080068ec

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	@ 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	@ 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 fea6 	bl	800682c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <SystemClock_Config+0xdc>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba8 <SystemClock_Config+0xdc>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <SystemClock_Config+0xdc>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <SystemClock_Config+0xe0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a25      	ldr	r2, [pc, #148]	@ (8000bac <SystemClock_Config+0xe0>)
 8000b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <SystemClock_Config+0xe0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000b40:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000b44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fd9c 	bl	8004690 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b5e:	f000 fa9d 	bl	800109c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b62:	f003 fd45 	bl	80045f0 <HAL_PWREx_EnableOverDrive>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b6c:	f000 fa96 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b70:	230f      	movs	r3, #15
 8000b72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2302      	movs	r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fff6 	bl	8004b80 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b9a:	f000 fa7f 	bl	800109c <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3750      	adds	r7, #80	@ 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bb6:	4a16      	ldr	r2, [pc, #88]	@ (8000c10 <MX_DMA2D_Init+0x60>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000be6:	f002 fb3b 	bl	8003260 <HAL_DMA2D_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000bf0:	f000 fa54 	bl	800109c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_DMA2D_Init+0x5c>)
 8000bf8:	f002 fc90 	bl	800351c <HAL_DMA2D_ConfigLayer>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c02:	f000 fa4b 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000450 	.word	0x20000450
 8000c10:	4002b000 	.word	0x4002b000

08000c14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <MX_I2C3_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <MX_I2C3_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c52:	f003 f895 	bl	8003d80 <HAL_I2C_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c5c:	f000 fa1e 	bl	800109c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c64:	f003 f9d0 	bl	8004008 <HAL_I2CEx_ConfigAnalogFilter>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c6e:	f000 fa15 	bl	800109c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_I2C3_Init+0x74>)
 8000c76:	f003 fa03 	bl	8004080 <HAL_I2CEx_ConfigDigitalFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000c80:	f000 fa0c 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000490 	.word	0x20000490
 8000c8c:	40005c00 	.word	0x40005c00
 8000c90:	000186a0 	.word	0x000186a0

08000c94 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	@ 0x68
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c9e:	2234      	movs	r2, #52	@ 0x34
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f005 fdc2 	bl	800682c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2234      	movs	r2, #52	@ 0x34
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 fdbc 	bl	800682c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cb6:	4a4e      	ldr	r2, [pc, #312]	@ (8000df0 <MX_LTDC_Init+0x15c>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cba:	4b4c      	ldr	r3, [pc, #304]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cc6:	4b49      	ldr	r3, [pc, #292]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000cd2:	4b46      	ldr	r3, [pc, #280]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000cd8:	4b44      	ldr	r3, [pc, #272]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000cde:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000ce0:	220e      	movs	r2, #14
 8000ce2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000ce4:	4b41      	ldr	r3, [pc, #260]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000cea:	4b40      	ldr	r3, [pc, #256]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cec:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cf4:	22f5      	movs	r2, #245	@ 0xf5
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000cfa:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000d00:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000d02:	22f7      	movs	r2, #247	@ 0xf7
 8000d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d06:	4b39      	ldr	r3, [pc, #228]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d0e:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d16:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d1e:	4833      	ldr	r0, [pc, #204]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000d20:	f003 f9ed 	bl	80040fe <HAL_LTDC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8000d2a:	f000 f9b7 	bl	800109c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d50:	2305      	movs	r3, #5
 8000d52:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481c      	ldr	r0, [pc, #112]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000d7c:	f003 fa5c 	bl	8004238 <HAL_LTDC_ConfigLayer>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8000d86:	f000 f989 	bl	800109c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000daa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_LTDC_Init+0x158>)
 8000dd6:	f003 fa2f 	bl	8004238 <HAL_LTDC_ConfigLayer>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8000de0:	f000 f95c 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	3768      	adds	r7, #104	@ 0x68
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200004e4 	.word	0x200004e4
 8000df0:	40016800 	.word	0x40016800

08000df4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <MX_SPI5_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_SPI5_Init+0x64>)
 8000e46:	f004 fb0c 	bl	8005462 <HAL_SPI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f924 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000058c 	.word	0x2000058c
 8000e5c:	40015000 	.word	0x40015000

08000e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <MX_USART1_UART_Init+0x50>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e98:	f005 f8ea 	bl	8006070 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ea2:	f000 f8fb 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200005e4 	.word	0x200005e4
 8000eb0:	40011000 	.word	0x40011000

08000eb4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000ece:	4a1f      	ldr	r2, [pc, #124]	@ (8000f4c <MX_FMC_Init+0x98>)
 8000ed0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000eec:	2240      	movs	r2, #64	@ 0x40
 8000eee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f12:	2310      	movs	r3, #16
 8000f14:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000f16:	2310      	movs	r3, #16
 8000f18:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000f22:	2310      	movs	r3, #16
 8000f24:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000f26:	2310      	movs	r3, #16
 8000f28:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <MX_FMC_Init+0x94>)
 8000f30:	f004 fa06 	bl	8005340 <HAL_SDRAM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000f3a:	f000 f8af 	bl	800109c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000062c 	.word	0x2000062c
 8000f4c:	a0000140 	.word	0xa0000140

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	4b49      	ldr	r3, [pc, #292]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a48      	ldr	r2, [pc, #288]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b46      	ldr	r3, [pc, #280]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	4b42      	ldr	r3, [pc, #264]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a41      	ldr	r2, [pc, #260]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b3f      	ldr	r3, [pc, #252]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a33      	ldr	r2, [pc, #204]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a2c      	ldr	r2, [pc, #176]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <MX_GPIO_Init+0x140>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_GPIO_Init+0x140>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_GPIO_Init+0x140>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <MX_GPIO_Init+0x140>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_GPIO_Init+0x140>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_GPIO_Init+0x140>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <MX_GPIO_Init+0x140>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <MX_GPIO_Init+0x140>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <MX_GPIO_Init+0x144>)
 800104e:	f002 fe63 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <MX_GPIO_Init+0x148>)
 8001066:	f002 fb87 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800106a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	4804      	ldr	r0, [pc, #16]	@ (8001094 <MX_GPIO_Init+0x144>)
 8001084:	f002 fb78 	bl	8003778 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	@ 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40021800 	.word	0x40021800
 8001098:	40020000 	.word	0x40020000

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <Error_Handler+0x8>

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <HAL_DMA2D_MspInit+0x3c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10d      	bne.n	8001126 <HAL_DMA2D_MspInit+0x2e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_DMA2D_MspInit+0x40>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <HAL_DMA2D_MspInit+0x40>)
 8001114:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <HAL_DMA2D_MspInit+0x40>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	4002b000 	.word	0x4002b000
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <HAL_I2C_MspInit+0xc4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d14b      	bne.n	80011f6 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a27      	ldr	r2, [pc, #156]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a20      	ldr	r2, [pc, #128]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011a8:	2304      	movs	r3, #4
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4815      	ldr	r0, [pc, #84]	@ (8001208 <HAL_I2C_MspInit+0xcc>)
 80011b4:	f002 fae0 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	2312      	movs	r3, #18
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ca:	2304      	movs	r3, #4
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <HAL_I2C_MspInit+0xd0>)
 80011d6:	f002 facf 	bl	8003778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 80011e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_I2C_MspInit+0xc8>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005c00 	.word	0x40005c00
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b09a      	sub	sp, #104	@ 0x68
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122c:	2230      	movs	r2, #48	@ 0x30
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fafb 	bl	800682c <memset>
  if(hltdc->Instance==LTDC)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a81      	ldr	r2, [pc, #516]	@ (8001440 <HAL_LTDC_MspInit+0x230>)
 800123c:	4293      	cmp	r3, r2
 800123e:	f040 80fa 	bne.w	8001436 <HAL_LTDC_MspInit+0x226>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001242:	2308      	movs	r3, #8
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001246:	2364      	movs	r3, #100	@ 0x64
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800124a:	2305      	movs	r3, #5
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800124e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001252:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001258:	4618      	mov	r0, r3
 800125a:	f003 feb1 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001264:	f7ff ff1a 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	4b75      	ldr	r3, [pc, #468]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 800126e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001270:	4a74      	ldr	r2, [pc, #464]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 8001272:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001276:	6453      	str	r3, [r2, #68]	@ 0x44
 8001278:	4b72      	ldr	r3, [pc, #456]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	4b6e      	ldr	r3, [pc, #440]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a6d      	ldr	r2, [pc, #436]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30
 8001294:	4b6b      	ldr	r3, [pc, #428]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	4b67      	ldr	r3, [pc, #412]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	4a66      	ldr	r2, [pc, #408]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b0:	4b64      	ldr	r3, [pc, #400]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	4b60      	ldr	r3, [pc, #384]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	4a5f      	ldr	r2, [pc, #380]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80012cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	4a58      	ldr	r2, [pc, #352]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e8:	4b56      	ldr	r3, [pc, #344]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4b52      	ldr	r3, [pc, #328]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	4a51      	ldr	r2, [pc, #324]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6313      	str	r3, [r2, #48]	@ 0x30
 8001304:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	4a4a      	ldr	r2, [pc, #296]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001320:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <HAL_LTDC_MspInit+0x234>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001330:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800133e:	230e      	movs	r3, #14
 8001340:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001342:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001346:	4619      	mov	r1, r3
 8001348:	483f      	ldr	r0, [pc, #252]	@ (8001448 <HAL_LTDC_MspInit+0x238>)
 800134a:	f002 fa15 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800134e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001352:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001360:	230e      	movs	r3, #14
 8001362:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001368:	4619      	mov	r1, r3
 800136a:	4838      	ldr	r0, [pc, #224]	@ (800144c <HAL_LTDC_MspInit+0x23c>)
 800136c:	f002 fa04 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001370:	2303      	movs	r3, #3
 8001372:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001380:	2309      	movs	r3, #9
 8001382:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001388:	4619      	mov	r1, r3
 800138a:	4831      	ldr	r0, [pc, #196]	@ (8001450 <HAL_LTDC_MspInit+0x240>)
 800138c:	f002 f9f4 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001390:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001394:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013a2:	230e      	movs	r3, #14
 80013a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013aa:	4619      	mov	r1, r3
 80013ac:	4828      	ldr	r0, [pc, #160]	@ (8001450 <HAL_LTDC_MspInit+0x240>)
 80013ae:	f002 f9e3 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80013b2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80013b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013c4:	230e      	movs	r3, #14
 80013c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013cc:	4619      	mov	r1, r3
 80013ce:	4821      	ldr	r0, [pc, #132]	@ (8001454 <HAL_LTDC_MspInit+0x244>)
 80013d0:	f002 f9d2 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d4:	23c0      	movs	r3, #192	@ 0xc0
 80013d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e4:	230e      	movs	r3, #14
 80013e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ec:	4619      	mov	r1, r3
 80013ee:	481a      	ldr	r0, [pc, #104]	@ (8001458 <HAL_LTDC_MspInit+0x248>)
 80013f0:	f002 f9c2 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f4:	2308      	movs	r3, #8
 80013f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001404:	230e      	movs	r3, #14
 8001406:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001408:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800140c:	4619      	mov	r1, r3
 800140e:	4813      	ldr	r0, [pc, #76]	@ (800145c <HAL_LTDC_MspInit+0x24c>)
 8001410:	f002 f9b2 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001414:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001418:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001426:	2309      	movs	r3, #9
 8001428:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800142e:	4619      	mov	r1, r3
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <HAL_LTDC_MspInit+0x244>)
 8001432:	f002 f9a1 	bl	8003778 <HAL_GPIO_Init>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3768      	adds	r7, #104	@ 0x68
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40016800 	.word	0x40016800
 8001444:	40023800 	.word	0x40023800
 8001448:	40021400 	.word	0x40021400
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40021800 	.word	0x40021800
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00

08001460 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_SPI_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 800148c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014cc:	2305      	movs	r3, #5
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_SPI_MspInit+0x8c>)
 80014d8:	f002 f94e 	bl	8003778 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40015000 	.word	0x40015000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021400 	.word	0x40021400

080014f0 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <HAL_SPI_MspDeInit+0x30>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10a      	bne.n	8001518 <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <HAL_SPI_MspDeInit+0x34>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <HAL_SPI_MspDeInit+0x34>)
 8001508:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800150e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_SPI_MspDeInit+0x38>)
 8001514:	f002 fadc 	bl	8003ad0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40015000 	.word	0x40015000
 8001524:	40023800 	.word	0x40023800
 8001528:	40021400 	.word	0x40021400

0800152c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <HAL_UART_MspInit+0x84>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_UART_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_UART_MspInit+0x88>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6453      	str	r3, [r2, #68]	@ 0x44
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_UART_MspInit+0x88>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_UART_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <HAL_UART_MspInit+0x88>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_UART_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001586:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001598:	2307      	movs	r3, #7
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <HAL_UART_MspInit+0x8c>)
 80015a4:	f002 f8e8 	bl	8003778 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015d0:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <HAL_FMC_MspInit+0x104>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d16f      	bne.n	80016b8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015d8:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <HAL_FMC_MspInit+0x104>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b38      	ldr	r3, [pc, #224]	@ (80016c4 <HAL_FMC_MspInit+0x108>)
 80015e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e6:	4a37      	ldr	r2, [pc, #220]	@ (80016c4 <HAL_FMC_MspInit+0x108>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80015ee:	4b35      	ldr	r3, [pc, #212]	@ (80016c4 <HAL_FMC_MspInit+0x108>)
 80015f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015fa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800160c:	230c      	movs	r3, #12
 800160e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	482c      	ldr	r0, [pc, #176]	@ (80016c8 <HAL_FMC_MspInit+0x10c>)
 8001616:	f002 f8af 	bl	8003778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161a:	2301      	movs	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162a:	230c      	movs	r3, #12
 800162c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4826      	ldr	r0, [pc, #152]	@ (80016cc <HAL_FMC_MspInit+0x110>)
 8001634:	f002 f8a0 	bl	8003778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001638:	f248 1333 	movw	r3, #33075	@ 0x8133
 800163c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164a:	230c      	movs	r3, #12
 800164c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	481f      	ldr	r0, [pc, #124]	@ (80016d0 <HAL_FMC_MspInit+0x114>)
 8001654:	f002 f890 	bl	8003778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001658:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800165c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800166a:	230c      	movs	r3, #12
 800166c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4818      	ldr	r0, [pc, #96]	@ (80016d4 <HAL_FMC_MspInit+0x118>)
 8001674:	f002 f880 	bl	8003778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001678:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800167c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168a:	230c      	movs	r3, #12
 800168c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4811      	ldr	r0, [pc, #68]	@ (80016d8 <HAL_FMC_MspInit+0x11c>)
 8001694:	f002 f870 	bl	8003778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001698:	2360      	movs	r3, #96	@ 0x60
 800169a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a8:	230c      	movs	r3, #12
 80016aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	480a      	ldr	r0, [pc, #40]	@ (80016dc <HAL_FMC_MspInit+0x120>)
 80016b2:	f002 f861 	bl	8003778 <HAL_GPIO_Init>
 80016b6:	e000      	b.n	80016ba <HAL_FMC_MspInit+0xfe>
    return;
 80016b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000660 	.word	0x20000660
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40021800 	.word	0x40021800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016e8:	f7ff ff68 	bl	80015bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <NMI_Handler+0x4>

080016fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <MemManage_Handler+0x4>

0800170c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <UsageFault_Handler+0x4>

0800171c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174a:	f001 fa75 	bl	8002c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800177c:	f7ff ffea 	bl	8001754 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	@ (80017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f005 f849 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7fe ffd5 	bl	8000758 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 80017bc:	080083dc 	.word	0x080083dc
  ldr r2, =_sbss
 80017c0:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 80017c4:	200008bc 	.word	0x200008bc

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>

080017ca <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80017ce:	f000 fa5d 	bl	8001c8c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80017d2:	20ca      	movs	r0, #202	@ 0xca
 80017d4:	f000 f95d 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80017d8:	20c3      	movs	r0, #195	@ 0xc3
 80017da:	f000 f967 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80017de:	2008      	movs	r0, #8
 80017e0:	f000 f964 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80017e4:	2050      	movs	r0, #80	@ 0x50
 80017e6:	f000 f961 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80017ea:	20cf      	movs	r0, #207	@ 0xcf
 80017ec:	f000 f951 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f95b 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80017f6:	20c1      	movs	r0, #193	@ 0xc1
 80017f8:	f000 f958 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80017fc:	2030      	movs	r0, #48	@ 0x30
 80017fe:	f000 f955 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001802:	20ed      	movs	r0, #237	@ 0xed
 8001804:	f000 f945 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001808:	2064      	movs	r0, #100	@ 0x64
 800180a:	f000 f94f 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800180e:	2003      	movs	r0, #3
 8001810:	f000 f94c 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001814:	2012      	movs	r0, #18
 8001816:	f000 f949 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800181a:	2081      	movs	r0, #129	@ 0x81
 800181c:	f000 f946 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001820:	20e8      	movs	r0, #232	@ 0xe8
 8001822:	f000 f936 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001826:	2085      	movs	r0, #133	@ 0x85
 8001828:	f000 f940 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f93d 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001832:	2078      	movs	r0, #120	@ 0x78
 8001834:	f000 f93a 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001838:	20cb      	movs	r0, #203	@ 0xcb
 800183a:	f000 f92a 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800183e:	2039      	movs	r0, #57	@ 0x39
 8001840:	f000 f934 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001844:	202c      	movs	r0, #44	@ 0x2c
 8001846:	f000 f931 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f92e 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001850:	2034      	movs	r0, #52	@ 0x34
 8001852:	f000 f92b 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001856:	2002      	movs	r0, #2
 8001858:	f000 f928 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800185c:	20f7      	movs	r0, #247	@ 0xf7
 800185e:	f000 f918 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001862:	2020      	movs	r0, #32
 8001864:	f000 f922 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001868:	20ea      	movs	r0, #234	@ 0xea
 800186a:	f000 f912 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f91c 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001874:	2000      	movs	r0, #0
 8001876:	f000 f919 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800187a:	20b1      	movs	r0, #177	@ 0xb1
 800187c:	f000 f909 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 f913 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001886:	201b      	movs	r0, #27
 8001888:	f000 f910 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800188c:	20b6      	movs	r0, #182	@ 0xb6
 800188e:	f000 f900 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001892:	200a      	movs	r0, #10
 8001894:	f000 f90a 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001898:	20a2      	movs	r0, #162	@ 0xa2
 800189a:	f000 f907 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800189e:	20c0      	movs	r0, #192	@ 0xc0
 80018a0:	f000 f8f7 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018a4:	2010      	movs	r0, #16
 80018a6:	f000 f901 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80018aa:	20c1      	movs	r0, #193	@ 0xc1
 80018ac:	f000 f8f1 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018b0:	2010      	movs	r0, #16
 80018b2:	f000 f8fb 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80018b6:	20c5      	movs	r0, #197	@ 0xc5
 80018b8:	f000 f8eb 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80018bc:	2045      	movs	r0, #69	@ 0x45
 80018be:	f000 f8f5 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80018c2:	2015      	movs	r0, #21
 80018c4:	f000 f8f2 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80018c8:	20c7      	movs	r0, #199	@ 0xc7
 80018ca:	f000 f8e2 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80018ce:	2090      	movs	r0, #144	@ 0x90
 80018d0:	f000 f8ec 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80018d4:	2036      	movs	r0, #54	@ 0x36
 80018d6:	f000 f8dc 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80018da:	20c8      	movs	r0, #200	@ 0xc8
 80018dc:	f000 f8e6 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80018e0:	20f2      	movs	r0, #242	@ 0xf2
 80018e2:	f000 f8d6 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f8e0 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80018ec:	20b0      	movs	r0, #176	@ 0xb0
 80018ee:	f000 f8d0 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80018f2:	20c2      	movs	r0, #194	@ 0xc2
 80018f4:	f000 f8da 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80018f8:	20b6      	movs	r0, #182	@ 0xb6
 80018fa:	f000 f8ca 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 f8d4 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001904:	20a7      	movs	r0, #167	@ 0xa7
 8001906:	f000 f8d1 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800190a:	2027      	movs	r0, #39	@ 0x27
 800190c:	f000 f8ce 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001910:	2004      	movs	r0, #4
 8001912:	f000 f8cb 	bl	8001aac <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001916:	202a      	movs	r0, #42	@ 0x2a
 8001918:	f000 f8bb 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f000 f8c5 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f8c2 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f000 f8bf 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800192e:	20ef      	movs	r0, #239	@ 0xef
 8001930:	f000 f8bc 	bl	8001aac <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001934:	202b      	movs	r0, #43	@ 0x2b
 8001936:	f000 f8ac 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f8b6 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f8b3 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 f8b0 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800194c:	203f      	movs	r0, #63	@ 0x3f
 800194e:	f000 f8ad 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001952:	20f6      	movs	r0, #246	@ 0xf6
 8001954:	f000 f89d 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001958:	2001      	movs	r0, #1
 800195a:	f000 f8a7 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f8a4 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001964:	2006      	movs	r0, #6
 8001966:	f000 f8a1 	bl	8001aac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800196a:	202c      	movs	r0, #44	@ 0x2c
 800196c:	f000 f891 	bl	8001a92 <ili9341_WriteReg>
  LCD_Delay(200);
 8001970:	20c8      	movs	r0, #200	@ 0xc8
 8001972:	f000 fa79 	bl	8001e68 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001976:	2026      	movs	r0, #38	@ 0x26
 8001978:	f000 f88b 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 f895 	bl	8001aac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001982:	20e0      	movs	r0, #224	@ 0xe0
 8001984:	f000 f885 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001988:	200f      	movs	r0, #15
 800198a:	f000 f88f 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800198e:	2029      	movs	r0, #41	@ 0x29
 8001990:	f000 f88c 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001994:	2024      	movs	r0, #36	@ 0x24
 8001996:	f000 f889 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800199a:	200c      	movs	r0, #12
 800199c:	f000 f886 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80019a0:	200e      	movs	r0, #14
 80019a2:	f000 f883 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019a6:	2009      	movs	r0, #9
 80019a8:	f000 f880 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80019ac:	204e      	movs	r0, #78	@ 0x4e
 80019ae:	f000 f87d 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019b2:	2078      	movs	r0, #120	@ 0x78
 80019b4:	f000 f87a 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80019b8:	203c      	movs	r0, #60	@ 0x3c
 80019ba:	f000 f877 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019be:	2009      	movs	r0, #9
 80019c0:	f000 f874 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80019c4:	2013      	movs	r0, #19
 80019c6:	f000 f871 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019ca:	2005      	movs	r0, #5
 80019cc:	f000 f86e 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80019d0:	2017      	movs	r0, #23
 80019d2:	f000 f86b 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019d6:	2011      	movs	r0, #17
 80019d8:	f000 f868 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 f865 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80019e2:	20e1      	movs	r0, #225	@ 0xe1
 80019e4:	f000 f855 	bl	8001a92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f85f 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80019ee:	2016      	movs	r0, #22
 80019f0:	f000 f85c 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019f4:	201b      	movs	r0, #27
 80019f6:	f000 f859 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80019fa:	2004      	movs	r0, #4
 80019fc:	f000 f856 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a00:	2011      	movs	r0, #17
 8001a02:	f000 f853 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001a06:	2007      	movs	r0, #7
 8001a08:	f000 f850 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001a0c:	2031      	movs	r0, #49	@ 0x31
 8001a0e:	f000 f84d 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001a12:	2033      	movs	r0, #51	@ 0x33
 8001a14:	f000 f84a 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001a18:	2042      	movs	r0, #66	@ 0x42
 8001a1a:	f000 f847 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a1e:	2005      	movs	r0, #5
 8001a20:	f000 f844 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a24:	200c      	movs	r0, #12
 8001a26:	f000 f841 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001a2a:	200a      	movs	r0, #10
 8001a2c:	f000 f83e 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001a30:	2028      	movs	r0, #40	@ 0x28
 8001a32:	f000 f83b 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a36:	202f      	movs	r0, #47	@ 0x2f
 8001a38:	f000 f838 	bl	8001aac <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a3c:	200f      	movs	r0, #15
 8001a3e:	f000 f835 	bl	8001aac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a42:	2011      	movs	r0, #17
 8001a44:	f000 f825 	bl	8001a92 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a48:	20c8      	movs	r0, #200	@ 0xc8
 8001a4a:	f000 fa0d 	bl	8001e68 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a4e:	2029      	movs	r0, #41	@ 0x29
 8001a50:	f000 f81f 	bl	8001a92 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a54:	202c      	movs	r0, #44	@ 0x2c
 8001a56:	f000 f81c 	bl	8001a92 <ili9341_WriteReg>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a62:	f000 f913 	bl	8001c8c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a66:	2103      	movs	r1, #3
 8001a68:	20d3      	movs	r0, #211	@ 0xd3
 8001a6a:	f000 f82c 	bl	8001ac6 <ili9341_ReadData>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29b      	uxth	r3, r3
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a7a:	2029      	movs	r0, #41	@ 0x29
 8001a7c:	f000 f809 	bl	8001a92 <ili9341_WriteReg>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a88:	2028      	movs	r0, #40	@ 0x28
 8001a8a:	f000 f802 	bl	8001a92 <ili9341_WriteReg>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f98e 	bl	8001dc0 <LCD_IO_WriteReg>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f95f 	bl	8001d7c <LCD_IO_WriteData>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	460a      	mov	r2, r1
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ad6:	797a      	ldrb	r2, [r7, #5]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f991 	bl	8001e04 <LCD_IO_ReadData>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001af0:	23f0      	movs	r3, #240	@ 0xf0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001b00:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b14:	4819      	ldr	r0, [pc, #100]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b16:	f004 f95b 	bl	8005dd0 <HAL_SPI_GetState>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d12b      	bne.n	8001b78 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <SPIx_Init+0x70>)
 8001b24:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b28:	2218      	movs	r2, #24
 8001b2a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b46:	2207      	movs	r2, #7
 8001b48:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b5c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b66:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b6a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b6e:	f000 f853 	bl	8001c18 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b72:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <SPIx_Init+0x6c>)
 8001b74:	f003 fc75 	bl	8005462 <HAL_SPI_Init>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000664 	.word	0x20000664
 8001b80:	40015000 	.word	0x40015000

08001b84 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <SPIx_Read+0x38>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f107 0108 	add.w	r1, r7, #8
 8001b9e:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <SPIx_Read+0x3c>)
 8001ba0:	f003 fe54 	bl	800584c <HAL_SPI_Receive>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001bae:	f000 f827 	bl	8001c00 <SPIx_Error>
  }

  return readvalue;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000041c 	.word	0x2000041c
 8001bc0:	20000664 	.word	0x20000664

08001bc4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <SPIx_Write+0x34>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1db9      	adds	r1, r7, #6
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <SPIx_Write+0x38>)
 8001bdc:	f003 fcf2 	bl	80055c4 <HAL_SPI_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001bea:	f000 f809 	bl	8001c00 <SPIx_Error>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000041c 	.word	0x2000041c
 8001bfc:	20000664 	.word	0x20000664

08001c00 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c04:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <SPIx_Error+0x14>)
 8001c06:	f003 fcb5 	bl	8005574 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001c0a:	f7ff ff81 	bl	8001b10 <SPIx_Init>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000664 	.word	0x20000664

08001c18 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <SPIx_MspInit+0x6c>)
 8001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c28:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <SPIx_MspInit+0x6c>)
 8001c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <SPIx_MspInit+0x6c>)
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <SPIx_MspInit+0x6c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <SPIx_MspInit+0x6c>)
 8001c46:	f043 0320 	orr.w	r3, r3, #32
 8001c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <SPIx_MspInit+0x6c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001c58:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4804      	ldr	r0, [pc, #16]	@ (8001c88 <SPIx_MspInit+0x70>)
 8001c76:	f001 fd7f 	bl	8003778 <HAL_GPIO_Init>
}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	@ 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40021400 	.word	0x40021400

08001c8c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001c92:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <LCD_IO_Init+0xe0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d164      	bne.n	8001d64 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <LCD_IO_Init+0xe0>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	4b32      	ldr	r3, [pc, #200]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4a31      	ldr	r2, [pc, #196]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4827      	ldr	r0, [pc, #156]	@ (8001d74 <LCD_IO_Init+0xe8>)
 8001cd6:	f001 fd4f 	bl	8003778 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4819      	ldr	r0, [pc, #100]	@ (8001d74 <LCD_IO_Init+0xe8>)
 8001d10:	f001 fd32 	bl	8003778 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <LCD_IO_Init+0xe4>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d30:	2304      	movs	r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <LCD_IO_Init+0xec>)
 8001d48:	f001 fd16 	bl	8003778 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4809      	ldr	r0, [pc, #36]	@ (8001d78 <LCD_IO_Init+0xec>)
 8001d52:	f001 ffe1 	bl	8003d18 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d56:	2201      	movs	r2, #1
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <LCD_IO_Init+0xec>)
 8001d5c:	f001 ffdc 	bl	8003d18 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001d60:	f7ff fed6 	bl	8001b10 <SPIx_Init>
  }
}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200006bc 	.word	0x200006bc
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40020800 	.word	0x40020800

08001d7c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d86:	2201      	movs	r2, #1
 8001d88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d8c:	480a      	ldr	r0, [pc, #40]	@ (8001db8 <LCD_IO_WriteData+0x3c>)
 8001d8e:	f001 ffc3 	bl	8003d18 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d92:	2200      	movs	r2, #0
 8001d94:	2104      	movs	r1, #4
 8001d96:	4809      	ldr	r0, [pc, #36]	@ (8001dbc <LCD_IO_WriteData+0x40>)
 8001d98:	f001 ffbe 	bl	8003d18 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff10 	bl	8001bc4 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001da4:	2201      	movs	r2, #1
 8001da6:	2104      	movs	r1, #4
 8001da8:	4804      	ldr	r0, [pc, #16]	@ (8001dbc <LCD_IO_WriteData+0x40>)
 8001daa:	f001 ffb5 	bl	8003d18 <HAL_GPIO_WritePin>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dd0:	480a      	ldr	r0, [pc, #40]	@ (8001dfc <LCD_IO_WriteReg+0x3c>)
 8001dd2:	f001 ffa1 	bl	8003d18 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4809      	ldr	r0, [pc, #36]	@ (8001e00 <LCD_IO_WriteReg+0x40>)
 8001ddc:	f001 ff9c 	bl	8003d18 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff feed 	bl	8001bc4 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001dea:	2201      	movs	r2, #1
 8001dec:	2104      	movs	r1, #4
 8001dee:	4804      	ldr	r0, [pc, #16]	@ (8001e00 <LCD_IO_WriteReg+0x40>)
 8001df0:	f001 ff92 	bl	8003d18 <HAL_GPIO_WritePin>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40020800 	.word	0x40020800

08001e04 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	4613      	mov	r3, r2
 8001e12:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4810      	ldr	r0, [pc, #64]	@ (8001e60 <LCD_IO_ReadData+0x5c>)
 8001e1e:	f001 ff7b 	bl	8003d18 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e28:	480e      	ldr	r0, [pc, #56]	@ (8001e64 <LCD_IO_ReadData+0x60>)
 8001e2a:	f001 ff75 	bl	8003d18 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fec7 	bl	8001bc4 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001e36:	797b      	ldrb	r3, [r7, #5]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fea3 	bl	8001b84 <SPIx_Read>
 8001e3e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e46:	4807      	ldr	r0, [pc, #28]	@ (8001e64 <LCD_IO_ReadData+0x60>)
 8001e48:	f001 ff66 	bl	8003d18 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2104      	movs	r1, #4
 8001e50:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <LCD_IO_ReadData+0x5c>)
 8001e52:	f001 ff61 	bl	8003d18 <HAL_GPIO_WritePin>

  return readvalue;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00

08001e68 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 ff01 	bl	8002c78 <HAL_Delay>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001e86:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <BSP_LCD_Init+0xc0>)
 8001e88:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001e8c:	2209      	movs	r2, #9
 8001e8e:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001e90:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001e96:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001e98:	221d      	movs	r2, #29
 8001e9a:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001ea2:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001ea4:	f240 120d 	movw	r2, #269	@ 0x10d
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001eac:	f240 1243 	movw	r2, #323	@ 0x143
 8001eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001eb4:	f240 1217 	movw	r2, #279	@ 0x117
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001ebc:	f240 1247 	movw	r2, #327	@ 0x147
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <BSP_LCD_Init+0xc4>)
 8001edc:	2208      	movs	r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <BSP_LCD_Init+0xc4>)
 8001ee2:	22c0      	movs	r2, #192	@ 0xc0
 8001ee4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <BSP_LCD_Init+0xc4>)
 8001ee8:	2204      	movs	r2, #4
 8001eea:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001eec:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <BSP_LCD_Init+0xc4>)
 8001eee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001ef4:	4813      	ldr	r0, [pc, #76]	@ (8001f44 <BSP_LCD_Init+0xc4>)
 8001ef6:	f003 f863 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001f12:	f000 fa87 	bl	8002424 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001f16:	4809      	ldr	r0, [pc, #36]	@ (8001f3c <BSP_LCD_Init+0xbc>)
 8001f18:	f002 f8f1 	bl	80040fe <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <BSP_LCD_Init+0xc8>)
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <BSP_LCD_Init+0xcc>)
 8001f20:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <BSP_LCD_Init+0xc8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001f2a:	f000 fc69 	bl	8002800 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001f2e:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <BSP_LCD_Init+0xd0>)
 8001f30:	f000 f8b4 	bl	800209c <BSP_LCD_SetFont>

  return LCD_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200006c0 	.word	0x200006c0
 8001f40:	40016800 	.word	0x40016800
 8001f44:	200007a8 	.word	0x200007a8
 8001f48:	200007f4 	.word	0x200007f4
 8001f4c:	200003e4 	.word	0x200003e4
 8001f50:	20000420 	.word	0x20000420

08001f54 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <BSP_LCD_GetXSize+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	4798      	blx	r3
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200007f4 	.word	0x200007f4

08001f6c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <BSP_LCD_GetYSize+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	4798      	blx	r3
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200007f4 	.word	0x200007f4

08001f84 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b090      	sub	sp, #64	@ 0x40
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001f94:	f7ff ffde 	bl	8001f54 <BSP_LCD_GetXSize>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001fa0:	f7ff ffe4 	bl	8001f6c <BSP_LCD_GetYSize>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001fb0:	23ff      	movs	r3, #255	@ 0xff
 8001fb2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001fca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001fd4:	f7ff ffbe 	bl	8001f54 <BSP_LCD_GetXSize>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001fdc:	f7ff ffc6 	bl	8001f6c <BSP_LCD_GetYSize>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001fe4:	88fa      	ldrh	r2, [r7, #6]
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	4619      	mov	r1, r3
 8001fec:	4814      	ldr	r0, [pc, #80]	@ (8002040 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001fee:	f002 f923 	bl	8004238 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	4913      	ldr	r1, [pc, #76]	@ (8002044 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3304      	adds	r3, #4
 8002002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002006:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002008:	88fa      	ldrh	r2, [r7, #6]
 800200a:	490e      	ldr	r1, [pc, #56]	@ (8002044 <BSP_LCD_LayerDefaultInit+0xc0>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3308      	adds	r3, #8
 8002018:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <BSP_LCD_LayerDefaultInit+0xc4>)
 800201a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	4909      	ldr	r1, [pc, #36]	@ (8002044 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800202e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002030:	4803      	ldr	r0, [pc, #12]	@ (8002040 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002032:	f002 f93f 	bl	80042b4 <HAL_LTDC_EnableDither>
}
 8002036:	bf00      	nop
 8002038:	3740      	adds	r7, #64	@ 0x40
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200006c0 	.word	0x200006c0
 8002044:	200007dc 	.word	0x200007dc
 8002048:	20000420 	.word	0x20000420

0800204c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <BSP_LCD_SelectLayer+0x1c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200007d8 	.word	0x200007d8

0800206c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <BSP_LCD_SetTextColor+0x28>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <BSP_LCD_SetTextColor+0x2c>)
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	200007d8 	.word	0x200007d8
 8002098:	200007dc 	.word	0x200007dc

0800209c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <BSP_LCD_SetFont+0x2c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4908      	ldr	r1, [pc, #32]	@ (80020cc <BSP_LCD_SetFont+0x30>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3308      	adds	r3, #8
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200007d8 	.word	0x200007d8
 80020cc:	200007dc 	.word	0x200007dc

080020d0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <BSP_LCD_GetFont+0x24>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4907      	ldr	r1, [pc, #28]	@ (80020f8 <BSP_LCD_GetFont+0x28>)
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3308      	adds	r3, #8
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200007d8 	.word	0x200007d8
 80020f8:	200007dc 	.word	0x200007dc

080020fc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b085      	sub	sp, #20
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <BSP_LCD_Clear+0x48>)
 8002106:	681c      	ldr	r4, [r3, #0]
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <BSP_LCD_Clear+0x48>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0e      	ldr	r2, [pc, #56]	@ (8002148 <BSP_LCD_Clear+0x4c>)
 800210e:	2134      	movs	r1, #52	@ 0x34
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	335c      	adds	r3, #92	@ 0x5c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461e      	mov	r6, r3
 800211c:	f7ff ff1a 	bl	8001f54 <BSP_LCD_GetXSize>
 8002120:	4605      	mov	r5, r0
 8002122:	f7ff ff23 	bl	8001f6c <BSP_LCD_GetYSize>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2300      	movs	r3, #0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	462a      	mov	r2, r5
 8002134:	4631      	mov	r1, r6
 8002136:	4620      	mov	r0, r4
 8002138:	f000 fb2a 	bl	8002790 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002144:	200007d8 	.word	0x200007d8
 8002148:	200006c0 	.word	0x200006c0

0800214c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
 8002156:	460b      	mov	r3, r1
 8002158:	80bb      	strh	r3, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800215e:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <BSP_LCD_DisplayChar+0x80>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	491b      	ldr	r1, [pc, #108]	@ (80021d0 <BSP_LCD_DisplayChar+0x84>)
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3308      	adds	r3, #8
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <BSP_LCD_DisplayChar+0x80>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4c14      	ldr	r4, [pc, #80]	@ (80021d0 <BSP_LCD_DisplayChar+0x84>)
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4423      	add	r3, r4
 800218a:	3308      	adds	r3, #8
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002190:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <BSP_LCD_DisplayChar+0x80>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4c0d      	ldr	r4, [pc, #52]	@ (80021d0 <BSP_LCD_DisplayChar+0x84>)
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4423      	add	r3, r4
 80021a4:	3308      	adds	r3, #8
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	889b      	ldrh	r3, [r3, #4]
 80021aa:	3307      	adds	r3, #7
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da00      	bge.n	80021b2 <BSP_LCD_DisplayChar+0x66>
 80021b0:	3307      	adds	r3, #7
 80021b2:	10db      	asrs	r3, r3, #3
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80021b8:	18ca      	adds	r2, r1, r3
 80021ba:	88b9      	ldrh	r1, [r7, #4]
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fa2c 	bl	800261c <DrawChar>
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	200007d8 	.word	0x200007d8
 80021d0:	200007dc 	.word	0x200007dc

080021d4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	81fb      	strh	r3, [r7, #14]
 80021e2:	460b      	mov	r3, r1
 80021e4:	81bb      	strh	r3, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80021ea:	2301      	movs	r3, #1
 80021ec:	83fb      	strh	r3, [r7, #30]
 80021ee:	2300      	movs	r3, #0
 80021f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80021fe:	e002      	b.n	8002206 <BSP_LCD_DisplayStringAt+0x32>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	617a      	str	r2, [r7, #20]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f6      	bne.n	8002200 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002212:	f7ff fe9f 	bl	8001f54 <BSP_LCD_GetXSize>
 8002216:	4601      	mov	r1, r0
 8002218:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	484b      	ldr	r0, [pc, #300]	@ (800234c <BSP_LCD_DisplayStringAt+0x178>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4403      	add	r3, r0
 8002228:	3308      	adds	r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	889b      	ldrh	r3, [r3, #4]
 800222e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002232:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d01c      	beq.n	8002274 <BSP_LCD_DisplayStringAt+0xa0>
 800223a:	2b03      	cmp	r3, #3
 800223c:	dc33      	bgt.n	80022a6 <BSP_LCD_DisplayStringAt+0xd2>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d002      	beq.n	8002248 <BSP_LCD_DisplayStringAt+0x74>
 8002242:	2b02      	cmp	r3, #2
 8002244:	d019      	beq.n	800227a <BSP_LCD_DisplayStringAt+0xa6>
 8002246:	e02e      	b.n	80022a6 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad1      	subs	r1, r2, r3
 800224e:	4b3e      	ldr	r3, [pc, #248]	@ (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	483e      	ldr	r0, [pc, #248]	@ (800234c <BSP_LCD_DisplayStringAt+0x178>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4403      	add	r3, r0
 800225e:	3308      	adds	r3, #8
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	889b      	ldrh	r3, [r3, #4]
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	4413      	add	r3, r2
 8002270:	83fb      	strh	r3, [r7, #30]
      break;
 8002272:	e01b      	b.n	80022ac <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	83fb      	strh	r3, [r7, #30]
      break;
 8002278:	e018      	b.n	80022ac <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	b299      	uxth	r1, r3
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4831      	ldr	r0, [pc, #196]	@ (800234c <BSP_LCD_DisplayStringAt+0x178>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4403      	add	r3, r0
 8002292:	3308      	adds	r3, #8
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	fb11 f303 	smulbb	r3, r1, r3
 800229c:	b29a      	uxth	r2, r3
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	4413      	add	r3, r2
 80022a2:	83fb      	strh	r3, [r7, #30]
      break;
 80022a4:	e002      	b.n	80022ac <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 80022a6:	89fb      	ldrh	r3, [r7, #14]
 80022a8:	83fb      	strh	r3, [r7, #30]
      break;
 80022aa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80022ac:	e01a      	b.n	80022e4 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	89b9      	ldrh	r1, [r7, #12]
 80022b4:	8bfb      	ldrh	r3, [r7, #30]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff48 	bl	800214c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80022bc:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4922      	ldr	r1, [pc, #136]	@ (800234c <BSP_LCD_DisplayStringAt+0x178>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3308      	adds	r3, #8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	889a      	ldrh	r2, [r3, #4]
 80022d2:	8bfb      	ldrh	r3, [r7, #30]
 80022d4:	4413      	add	r3, r2
 80022d6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	3301      	adds	r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
    i++;
 80022de:	8bbb      	ldrh	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2dc      	uxtb	r4, r3
 80022f2:	f7ff fe2f 	bl	8001f54 <BSP_LCD_GetXSize>
 80022f6:	8bb9      	ldrh	r1, [r7, #28]
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4d13      	ldr	r5, [pc, #76]	@ (800234c <BSP_LCD_DisplayStringAt+0x178>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	442b      	add	r3, r5
 8002308:	3308      	adds	r3, #8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	889b      	ldrh	r3, [r3, #4]
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	1ac3      	subs	r3, r0, r3
 8002314:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	480c      	ldr	r0, [pc, #48]	@ (800234c <BSP_LCD_DisplayStringAt+0x178>)
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4403      	add	r3, r0
 8002326:	3308      	adds	r3, #8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800232c:	4299      	cmp	r1, r3
 800232e:	bf2c      	ite	cs
 8002330:	2301      	movcs	r3, #1
 8002332:	2300      	movcc	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4023      	ands	r3, r4
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1b7      	bne.n	80022ae <BSP_LCD_DisplayStringAt+0xda>
  }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bdb0      	pop	{r4, r5, r7, pc}
 8002348:	200007d8 	.word	0x200007d8
 800234c:	200007dc 	.word	0x200007dc

08002350 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af02      	add	r7, sp, #8
 8002358:	4604      	mov	r4, r0
 800235a:	4608      	mov	r0, r1
 800235c:	4611      	mov	r1, r2
 800235e:	461a      	mov	r2, r3
 8002360:	4623      	mov	r3, r4
 8002362:	80fb      	strh	r3, [r7, #6]
 8002364:	4603      	mov	r3, r0
 8002366:	80bb      	strh	r3, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002374:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <BSP_LCD_FillRect+0xa8>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4920      	ldr	r1, [pc, #128]	@ (80023fc <BSP_LCD_FillRect+0xac>)
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fe70 	bl	800206c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <BSP_LCD_FillRect+0xa8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1b      	ldr	r2, [pc, #108]	@ (8002400 <BSP_LCD_FillRect+0xb0>)
 8002392:	2134      	movs	r1, #52	@ 0x34
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	335c      	adds	r3, #92	@ 0x5c
 800239c:	681c      	ldr	r4, [r3, #0]
 800239e:	f7ff fdd9 	bl	8001f54 <BSP_LCD_GetXSize>
 80023a2:	4602      	mov	r2, r0
 80023a4:	88bb      	ldrh	r3, [r7, #4]
 80023a6:	fb03 f202 	mul.w	r2, r3, r2
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4423      	add	r3, r4
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <BSP_LCD_FillRect+0xa8>)
 80023b6:	681c      	ldr	r4, [r3, #0]
 80023b8:	68fd      	ldr	r5, [r7, #12]
 80023ba:	887e      	ldrh	r6, [r7, #2]
 80023bc:	f8b7 8000 	ldrh.w	r8, [r7]
 80023c0:	f7ff fdc8 	bl	8001f54 <BSP_LCD_GetXSize>
 80023c4:	4602      	mov	r2, r0
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	1ad1      	subs	r1, r2, r3
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <BSP_LCD_FillRect+0xa8>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	480b      	ldr	r0, [pc, #44]	@ (80023fc <BSP_LCD_FillRect+0xac>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4403      	add	r3, r0
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	9100      	str	r1, [sp, #0]
 80023e0:	4643      	mov	r3, r8
 80023e2:	4632      	mov	r2, r6
 80023e4:	4629      	mov	r1, r5
 80023e6:	4620      	mov	r0, r4
 80023e8:	f000 f9d2 	bl	8002790 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f6:	bf00      	nop
 80023f8:	200007d8 	.word	0x200007d8
 80023fc:	200007dc 	.word	0x200007dc
 8002400:	200006c0 	.word	0x200006c0

08002404 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <BSP_LCD_DisplayOn+0x1c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002412:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <BSP_LCD_DisplayOn+0x1c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4798      	blx	r3
  }
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200007f4 	.word	0x200007f4

08002424 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08e      	sub	sp, #56	@ 0x38
 8002428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	4b61      	ldr	r3, [pc, #388]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a60      	ldr	r2, [pc, #384]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b5e      	ldr	r3, [pc, #376]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	4b5a      	ldr	r3, [pc, #360]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a59      	ldr	r2, [pc, #356]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b57      	ldr	r3, [pc, #348]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	4b4c      	ldr	r3, [pc, #304]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a4b      	ldr	r2, [pc, #300]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b49      	ldr	r3, [pc, #292]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	4b45      	ldr	r3, [pc, #276]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a44      	ldr	r2, [pc, #272]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b42      	ldr	r3, [pc, #264]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4a3d      	ldr	r2, [pc, #244]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c6:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a36      	ldr	r2, [pc, #216]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024dc:	f043 0320 	orr.w	r3, r3, #32
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a2f      	ldr	r2, [pc, #188]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 80024f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <BSP_LCD_MspInit+0x190>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800250a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002518:	2302      	movs	r3, #2
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800251c:	230e      	movs	r3, #14
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002524:	4619      	mov	r1, r3
 8002526:	4824      	ldr	r0, [pc, #144]	@ (80025b8 <BSP_LCD_MspInit+0x194>)
 8002528:	f001 f926 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800252c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002536:	4619      	mov	r1, r3
 8002538:	4820      	ldr	r0, [pc, #128]	@ (80025bc <BSP_LCD_MspInit+0x198>)
 800253a:	f001 f91d 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800253e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002548:	4619      	mov	r1, r3
 800254a:	481d      	ldr	r0, [pc, #116]	@ (80025c0 <BSP_LCD_MspInit+0x19c>)
 800254c:	f001 f914 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002550:	2348      	movs	r3, #72	@ 0x48
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002558:	4619      	mov	r1, r3
 800255a:	481a      	ldr	r0, [pc, #104]	@ (80025c4 <BSP_LCD_MspInit+0x1a0>)
 800255c:	f001 f90c 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800256a:	4619      	mov	r1, r3
 800256c:	4816      	ldr	r0, [pc, #88]	@ (80025c8 <BSP_LCD_MspInit+0x1a4>)
 800256e:	f001 f903 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002572:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	4813      	ldr	r0, [pc, #76]	@ (80025cc <BSP_LCD_MspInit+0x1a8>)
 8002580:	f001 f8fa 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002584:	2303      	movs	r3, #3
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8002588:	2309      	movs	r3, #9
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800258c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002590:	4619      	mov	r1, r3
 8002592:	480a      	ldr	r0, [pc, #40]	@ (80025bc <BSP_LCD_MspInit+0x198>)
 8002594:	f001 f8f0 	bl	8003778 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002598:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800259e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a2:	4619      	mov	r1, r3
 80025a4:	4809      	ldr	r0, [pc, #36]	@ (80025cc <BSP_LCD_MspInit+0x1a8>)
 80025a6:	f001 f8e7 	bl	8003778 <HAL_GPIO_Init>
}
 80025aa:	bf00      	nop
 80025ac:	3738      	adds	r7, #56	@ 0x38
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021400 	.word	0x40021400
 80025cc:	40021800 	.word	0x40021800

080025d0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	603a      	str	r2, [r7, #0]
 80025da:	80fb      	strh	r3, [r7, #6]
 80025dc:	460b      	mov	r3, r1
 80025de:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <BSP_LCD_DrawPixel+0x44>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002618 <BSP_LCD_DrawPixel+0x48>)
 80025e6:	2134      	movs	r1, #52	@ 0x34
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	335c      	adds	r3, #92	@ 0x5c
 80025f0:	681c      	ldr	r4, [r3, #0]
 80025f2:	88bd      	ldrh	r5, [r7, #4]
 80025f4:	f7ff fcae 	bl	8001f54 <BSP_LCD_GetXSize>
 80025f8:	4603      	mov	r3, r0
 80025fa:	fb03 f205 	mul.w	r2, r3, r5
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4423      	add	r3, r4
 8002606:	461a      	mov	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	200007d8 	.word	0x200007d8
 8002618:	200006c0 	.word	0x200006c0

0800261c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	603a      	str	r2, [r7, #0]
 8002626:	80fb      	strh	r3, [r7, #6]
 8002628:	460b      	mov	r3, r1
 800262a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002638:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <DrawChar+0x16c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4953      	ldr	r1, [pc, #332]	@ (800278c <DrawChar+0x170>)
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3308      	adds	r3, #8
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	88db      	ldrh	r3, [r3, #6]
 800264e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002650:	4b4d      	ldr	r3, [pc, #308]	@ (8002788 <DrawChar+0x16c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	494d      	ldr	r1, [pc, #308]	@ (800278c <DrawChar+0x170>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3308      	adds	r3, #8
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	889b      	ldrh	r3, [r3, #4]
 8002666:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	3307      	adds	r3, #7
 800266c:	2b00      	cmp	r3, #0
 800266e:	da00      	bge.n	8002672 <DrawChar+0x56>
 8002670:	3307      	adds	r3, #7
 8002672:	10db      	asrs	r3, r3, #3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	b2da      	uxtb	r2, r3
 800267a:	8a3b      	ldrh	r3, [r7, #16]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e076      	b.n	8002776 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8002688:	8a3b      	ldrh	r3, [r7, #16]
 800268a:	3307      	adds	r3, #7
 800268c:	2b00      	cmp	r3, #0
 800268e:	da00      	bge.n	8002692 <DrawChar+0x76>
 8002690:	3307      	adds	r3, #7
 8002692:	10db      	asrs	r3, r3, #3
 8002694:	461a      	mov	r2, r3
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80026a2:	8a3b      	ldrh	r3, [r7, #16]
 80026a4:	3307      	adds	r3, #7
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da00      	bge.n	80026ac <DrawChar+0x90>
 80026aa:	3307      	adds	r3, #7
 80026ac:	10db      	asrs	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d002      	beq.n	80026b8 <DrawChar+0x9c>
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d004      	beq.n	80026c0 <DrawChar+0xa4>
 80026b6:	e00c      	b.n	80026d2 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
        break;
 80026be:	e016      	b.n	80026ee <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	3201      	adds	r2, #1
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
        break;
 80026d0:	e00d      	b.n	80026ee <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	041a      	lsls	r2, r3, #16
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3301      	adds	r3, #1
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	4313      	orrs	r3, r2
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	3202      	adds	r2, #2
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
        break;
 80026ec:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e036      	b.n	8002762 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 80026f4:	8a3a      	ldrh	r2, [r7, #16]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	1ad2      	subs	r2, r2, r3
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4413      	add	r3, r2
 80026fe:	3b01      	subs	r3, #1
 8002700:	2201      	movs	r2, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	461a      	mov	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	b29a      	uxth	r2, r3
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	4413      	add	r3, r2
 8002718:	b298      	uxth	r0, r3
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <DrawChar+0x16c>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	491b      	ldr	r1, [pc, #108]	@ (800278c <DrawChar+0x170>)
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	88bb      	ldrh	r3, [r7, #4]
 800272e:	4619      	mov	r1, r3
 8002730:	f7ff ff4e 	bl	80025d0 <BSP_LCD_DrawPixel>
 8002734:	e012      	b.n	800275c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	b29a      	uxth	r2, r3
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4413      	add	r3, r2
 800273e:	b298      	uxth	r0, r3
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <DrawChar+0x16c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4911      	ldr	r1, [pc, #68]	@ (800278c <DrawChar+0x170>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3304      	adds	r3, #4
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	88bb      	ldrh	r3, [r7, #4]
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff ff3a 	bl	80025d0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3301      	adds	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	8a3b      	ldrh	r3, [r7, #16]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d3c4      	bcc.n	80026f4 <DrawChar+0xd8>
      }
    }
    Ypos++;
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	3301      	adds	r3, #1
 800276e:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3301      	adds	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	429a      	cmp	r2, r3
 800277c:	d384      	bcc.n	8002688 <DrawChar+0x6c>
  }
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200007d8 	.word	0x200007d8
 800278c:	200007dc 	.word	0x200007dc

08002790 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <FillBuffer+0x68>)
 80027a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80027a4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80027a6:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <FillBuffer+0x68>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80027ac:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <FillBuffer+0x68>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <FillBuffer+0x68>)
 80027b4:	4a11      	ldr	r2, [pc, #68]	@ (80027fc <FillBuffer+0x6c>)
 80027b6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80027b8:	480f      	ldr	r0, [pc, #60]	@ (80027f8 <FillBuffer+0x68>)
 80027ba:	f000 fd51 	bl	8003260 <HAL_DMA2D_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d115      	bne.n	80027f0 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	480c      	ldr	r0, [pc, #48]	@ (80027f8 <FillBuffer+0x68>)
 80027c8:	f000 fea8 	bl	800351c <HAL_DMA2D_ConfigLayer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10e      	bne.n	80027f0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	4806      	ldr	r0, [pc, #24]	@ (80027f8 <FillBuffer+0x68>)
 80027de:	f000 fd88 	bl	80032f2 <HAL_DMA2D_Start>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80027e8:	210a      	movs	r1, #10
 80027ea:	4803      	ldr	r0, [pc, #12]	@ (80027f8 <FillBuffer+0x68>)
 80027ec:	f000 fdac 	bl	8003348 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000768 	.word	0x20000768
 80027fc:	4002b000 	.word	0x4002b000

08002800 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002804:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002806:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <BSP_SDRAM_Init+0xb0>)
 8002808:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002810:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 8002812:	2207      	movs	r2, #7
 8002814:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002816:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 8002818:	2204      	movs	r2, #4
 800281a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 800281e:	2207      	movs	r2, #7
 8002820:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 8002824:	2202      	movs	r2, #2
 8002826:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002828:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 800282a:	2202      	movs	r2, #2
 800282c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 8002830:	2202      	movs	r2, #2
 8002832:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002836:	2201      	movs	r2, #1
 8002838:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800283a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002842:	2204      	movs	r2, #4
 8002844:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002846:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002848:	2210      	movs	r2, #16
 800284a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800284c:	4b17      	ldr	r3, [pc, #92]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002852:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002854:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002858:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800285a:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 800285c:	2200      	movs	r2, #0
 800285e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002860:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002866:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800286e:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002876:	2100      	movs	r1, #0
 8002878:	480c      	ldr	r0, [pc, #48]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 800287a:	f000 f87f 	bl	800297c <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800287e:	490d      	ldr	r1, [pc, #52]	@ (80028b4 <BSP_SDRAM_Init+0xb4>)
 8002880:	480a      	ldr	r0, [pc, #40]	@ (80028ac <BSP_SDRAM_Init+0xac>)
 8002882:	f002 fd5d 	bl	8005340 <HAL_SDRAM_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <BSP_SDRAM_Init+0xb8>)
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e002      	b.n	800289a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <BSP_SDRAM_Init+0xb8>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800289a:	f240 506a 	movw	r0, #1386	@ 0x56a
 800289e:	f000 f80d 	bl	80028bc <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80028a2:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <BSP_SDRAM_Init+0xb8>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200007f8 	.word	0x200007f8
 80028b0:	a0000140 	.word	0xa0000140
 80028b4:	2000082c 	.word	0x2000082c
 80028b8:	20000428 	.word	0x20000428

080028bc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80028c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80028ce:	4b29      	ldr	r3, [pc, #164]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028d0:	2208      	movs	r2, #8
 80028d2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80028da:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80028e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028e4:	4923      	ldr	r1, [pc, #140]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028e6:	4824      	ldr	r0, [pc, #144]	@ (8002978 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028e8:	f002 fd5e 	bl	80053a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f000 f9c3 	bl	8002c78 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80028f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028fa:	2208      	movs	r2, #8
 80028fc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80028fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002900:	2201      	movs	r2, #1
 8002902:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002904:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800290a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290e:	4919      	ldr	r1, [pc, #100]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002910:	4819      	ldr	r0, [pc, #100]	@ (8002978 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002912:	f002 fd49 	bl	80053a8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002916:	4b17      	ldr	r3, [pc, #92]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002918:	2203      	movs	r2, #3
 800291a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800291c:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800291e:	2208      	movs	r2, #8
 8002920:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002922:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002924:	2204      	movs	r2, #4
 8002926:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002928:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800292e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002932:	4910      	ldr	r1, [pc, #64]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002934:	4810      	ldr	r0, [pc, #64]	@ (8002978 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002936:	f002 fd37 	bl	80053a8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800293a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800293e:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002942:	2204      	movs	r2, #4
 8002944:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002948:	2208      	movs	r2, #8
 800294a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800294c:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800294e:	2201      	movs	r2, #1
 8002950:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002956:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002958:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800295c:	4905      	ldr	r1, [pc, #20]	@ (8002974 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800295e:	4806      	ldr	r0, [pc, #24]	@ (8002978 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002960:	f002 fd22 	bl	80053a8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4804      	ldr	r0, [pc, #16]	@ (8002978 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002968:	f002 fd53 	bl	8005412 <HAL_SDRAM_ProgramRefreshRate>
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000848 	.word	0x20000848
 8002978:	200007f8 	.word	0x200007f8

0800297c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b090      	sub	sp, #64	@ 0x40
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80ec 	beq.w	8002b66 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002992:	4b77      	ldr	r3, [pc, #476]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	4a76      	ldr	r2, [pc, #472]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6393      	str	r3, [r2, #56]	@ 0x38
 800299e:	4b74      	ldr	r3, [pc, #464]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ae:	4b70      	ldr	r3, [pc, #448]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a68      	ldr	r2, [pc, #416]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	4b62      	ldr	r3, [pc, #392]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a61      	ldr	r2, [pc, #388]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	4b5b      	ldr	r3, [pc, #364]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a5a      	ldr	r2, [pc, #360]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b54      	ldr	r3, [pc, #336]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a53      	ldr	r2, [pc, #332]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a24:	f043 0310 	orr.w	r3, r3, #16
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b46      	ldr	r3, [pc, #280]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	4a45      	ldr	r2, [pc, #276]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a62:	4b43      	ldr	r3, [pc, #268]	@ (8002b70 <BSP_SDRAM_MspInit+0x1f4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a72:	2302      	movs	r3, #2
 8002a74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002a7e:	2360      	movs	r3, #96	@ 0x60
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	483a      	ldr	r0, [pc, #232]	@ (8002b74 <BSP_SDRAM_MspInit+0x1f8>)
 8002a8a:	f000 fe75 	bl	8003778 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002a92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a96:	4619      	mov	r1, r3
 8002a98:	4837      	ldr	r0, [pc, #220]	@ (8002b78 <BSP_SDRAM_MspInit+0x1fc>)
 8002a9a:	f000 fe6d 	bl	8003778 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002a9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4834      	ldr	r0, [pc, #208]	@ (8002b7c <BSP_SDRAM_MspInit+0x200>)
 8002aac:	f000 fe64 	bl	8003778 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ab0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aba:	4619      	mov	r1, r3
 8002abc:	4830      	ldr	r0, [pc, #192]	@ (8002b80 <BSP_SDRAM_MspInit+0x204>)
 8002abe:	f000 fe5b 	bl	8003778 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002ac2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002acc:	4619      	mov	r1, r3
 8002ace:	482d      	ldr	r0, [pc, #180]	@ (8002b84 <BSP_SDRAM_MspInit+0x208>)
 8002ad0:	f000 fe52 	bl	8003778 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ad4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4829      	ldr	r0, [pc, #164]	@ (8002b88 <BSP_SDRAM_MspInit+0x20c>)
 8002ae2:	f000 fe49 	bl	8003778 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002ae6:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002aec:	4b27      	ldr	r3, [pc, #156]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002aee:	2280      	movs	r2, #128	@ 0x80
 8002af0:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002af2:	4b26      	ldr	r3, [pc, #152]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002af8:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002afa:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b00:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b02:	4b22      	ldr	r3, [pc, #136]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b08:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b0a:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b10:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b18:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b1e:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002b20:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002b26:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b28:	2203      	movs	r2, #3
 8002b2a:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002b2c:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002b32:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002b38:	4b14      	ldr	r3, [pc, #80]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b3a:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <BSP_SDRAM_MspInit+0x214>)
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b44:	4a11      	ldr	r2, [pc, #68]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002b4a:	4810      	ldr	r0, [pc, #64]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b4c:	f000 fa78 	bl	8003040 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002b50:	480e      	ldr	r0, [pc, #56]	@ (8002b8c <BSP_SDRAM_MspInit+0x210>)
 8002b52:	f000 f9c7 	bl	8002ee4 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	210f      	movs	r1, #15
 8002b5a:	2038      	movs	r0, #56	@ 0x38
 8002b5c:	f000 f98b 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002b60:	2038      	movs	r0, #56	@ 0x38
 8002b62:	f000 f9a4 	bl	8002eae <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002b66:	bf00      	nop
 8002b68:	3740      	adds	r7, #64	@ 0x40
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40021400 	.word	0x40021400
 8002b88:	40021800 	.word	0x40021800
 8002b8c:	20000858 	.word	0x20000858
 8002b90:	40026410 	.word	0x40026410

08002b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b98:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <HAL_Init+0x40>)
 8002b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <HAL_Init+0x40>)
 8002baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <HAL_Init+0x40>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <HAL_Init+0x40>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bbc:	2003      	movs	r0, #3
 8002bbe:	f000 f94f 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc2:	200f      	movs	r0, #15
 8002bc4:	f000 f808 	bl	8002bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc8:	f7fe fa6e 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <HAL_InitTick+0x54>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_InitTick+0x58>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f967 	bl	8002eca <HAL_SYSTICK_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00e      	b.n	8002c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	d80a      	bhi.n	8002c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c14:	f000 f92f 	bl	8002e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c18:	4a06      	ldr	r2, [pc, #24]	@ (8002c34 <HAL_InitTick+0x5c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200003e0 	.word	0x200003e0
 8002c30:	20000430 	.word	0x20000430
 8002c34:	2000042c 	.word	0x2000042c

08002c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_IncTick+0x20>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_IncTick+0x24>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_IncTick+0x24>)
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000430 	.word	0x20000430
 8002c5c:	200008b8 	.word	0x200008b8

08002c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_GetTick+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200008b8 	.word	0x200008b8

08002c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff ffee 	bl	8002c60 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c90:	d005      	beq.n	8002c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <HAL_Delay+0x44>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c9e:	bf00      	nop
 8002ca0:	f7ff ffde 	bl	8002c60 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8f7      	bhi.n	8002ca0 <HAL_Delay+0x28>
  {
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000430 	.word	0x20000430

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	@ (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4907      	ldr	r1, [pc, #28]	@ (8002d5c <__NVIC_EnableIRQ+0x38>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db0a      	blt.n	8002d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	490c      	ldr	r1, [pc, #48]	@ (8002dac <__NVIC_SetPriority+0x4c>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d88:	e00a      	b.n	8002da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4908      	ldr	r1, [pc, #32]	@ (8002db0 <__NVIC_SetPriority+0x50>)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	3b04      	subs	r3, #4
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	761a      	strb	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f1c3 0307 	rsb	r3, r3, #7
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf28      	it	cs
 8002dd2:	2304      	movcs	r3, #4
 8002dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d902      	bls.n	8002de4 <NVIC_EncodePriority+0x30>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3b03      	subs	r3, #3
 8002de2:	e000      	b.n	8002de6 <NVIC_EncodePriority+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	4313      	orrs	r3, r2
         );
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	@ 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e2c:	d301      	bcc.n	8002e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00f      	b.n	8002e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e32:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <SysTick_Config+0x40>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e40:	f7ff ff8e 	bl	8002d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <SysTick_Config+0x40>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <SysTick_Config+0x40>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff29 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff3e 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff8e 	bl	8002db4 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5d 	bl	8002d60 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff31 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa2 	bl	8002e1c <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff feb6 	bl	8002c60 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e099      	b.n	8003034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f20:	e00f      	b.n	8002f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f22:	f7ff fe9d 	bl	8002c60 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d908      	bls.n	8002f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e078      	b.n	8003034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e8      	bne.n	8002f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4b38      	ldr	r3, [pc, #224]	@ (800303c <HAL_DMA_Init+0x158>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d107      	bne.n	8002fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d117      	bne.n	8003006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00e      	beq.n	8003006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8bd 	bl	8003168 <DMA_CheckFifoParam>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2240      	movs	r2, #64	@ 0x40
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003002:	2301      	movs	r3, #1
 8003004:	e016      	b.n	8003034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f874 	bl	80030fc <DMA_CalcBaseAndBitshift>
 8003014:	4603      	mov	r3, r0
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	223f      	movs	r2, #63	@ 0x3f
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	f010803f 	.word	0xf010803f

08003040 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e050      	b.n	80030f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d101      	bne.n	8003062 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	e048      	b.n	80030f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2221      	movs	r2, #33	@ 0x21
 80030a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f82a 	bl	80030fc <DMA_CalcBaseAndBitshift>
 80030a8:	4603      	mov	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	223f      	movs	r2, #63	@ 0x3f
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3b10      	subs	r3, #16
 800310c:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <DMA_CalcBaseAndBitshift+0x64>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003116:	4a13      	ldr	r2, [pc, #76]	@ (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d909      	bls.n	800313e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	1d1a      	adds	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	659a      	str	r2, [r3, #88]	@ 0x58
 800313c:	e007      	b.n	800314e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	aaaaaaab 	.word	0xaaaaaaab
 8003164:	080083c4 	.word	0x080083c4

08003168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11f      	bne.n	80031c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d856      	bhi.n	8003236 <DMA_CheckFifoParam+0xce>
 8003188:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <DMA_CheckFifoParam+0x28>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031b3 	.word	0x080031b3
 8003198:	080031a1 	.word	0x080031a1
 800319c:	08003237 	.word	0x08003237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d046      	beq.n	800323a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b0:	e043      	b.n	800323a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031ba:	d140      	bne.n	800323e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e03d      	b.n	800323e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ca:	d121      	bne.n	8003210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d837      	bhi.n	8003242 <DMA_CheckFifoParam+0xda>
 80031d2:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <DMA_CheckFifoParam+0x70>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031ef 	.word	0x080031ef
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	08003201 	.word	0x08003201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e030      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d025      	beq.n	8003246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e022      	b.n	8003246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003208:	d11f      	bne.n	800324a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800320e:	e01c      	b.n	800324a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d903      	bls.n	800321e <DMA_CheckFifoParam+0xb6>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d003      	beq.n	8003224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800321c:	e018      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      break;
 8003222:	e015      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e00b      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 8003236:	bf00      	nop
 8003238:	e00a      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
 800323c:	e008      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800323e:	bf00      	nop
 8003240:	e006      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e004      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;   
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
    }
  } 
  
  return status; 
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop

08003260 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e03b      	b.n	80032ea <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd ff36 	bl	80010f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	f023 0107 	bic.w	r1, r3, #7
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68d1      	ldr	r1, [r2, #12]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	430b      	orrs	r3, r1
 80032d8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af02      	add	r7, sp, #8
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_DMA2D_Start+0x1c>
 800330a:	2302      	movs	r3, #2
 800330c:	e018      	b.n	8003340 <HAL_DMA2D_Start+0x4e>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f989 	bl	8003640 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d056      	beq.n	8003412 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003364:	f7ff fc7c 	bl	8002c60 <HAL_GetTick>
 8003368:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800336a:	e04b      	b.n	8003404 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800337a:	2b00      	cmp	r3, #0
 800337c:	d023      	beq.n	80033c6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	f043 0202 	orr.w	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2221      	movs	r2, #33	@ 0x21
 80033b0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2204      	movs	r2, #4
 80033b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0a5      	b.n	8003512 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033cc:	d01a      	beq.n	8003404 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7ff fc47 	bl	8002c60 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <HAL_DMA2D_PollForTransfer+0x9c>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e086      	b.n	8003512 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ac      	beq.n	800336c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d061      	beq.n	80034f8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003434:	f7ff fc14 	bl	8002c60 <HAL_GetTick>
 8003438:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800343a:	e056      	b.n	80034ea <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02e      	beq.n	80034ac <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2229      	movs	r2, #41	@ 0x29
 8003496:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2204      	movs	r2, #4
 800349c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e032      	b.n	8003512 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b2:	d01a      	beq.n	80034ea <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7ff fbd4 	bl	8002c60 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <HAL_DMA2D_PollForTransfer+0x182>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e013      	b.n	8003512 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0a1      	beq.n	800343c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2212      	movs	r2, #18
 80034fe:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_DMA2D_ConfigLayer+0x20>
 8003538:	2302      	movs	r3, #2
 800353a:	e079      	b.n	8003630 <HAL_DMA2D_ConfigLayer+0x114>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	3318      	adds	r3, #24
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003566:	4b35      	ldr	r3, [pc, #212]	@ (800363c <HAL_DMA2D_ConfigLayer+0x120>)
 8003568:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b0a      	cmp	r3, #10
 8003570:	d003      	beq.n	800357a <HAL_DMA2D_ConfigLayer+0x5e>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b09      	cmp	r3, #9
 8003578:	d107      	bne.n	800358a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e005      	b.n	8003596 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d120      	bne.n	80035de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	ea02 0103 	and.w	r1, r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b0a      	cmp	r3, #10
 80035c4:	d003      	beq.n	80035ce <HAL_DMA2D_ConfigLayer+0xb2>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d127      	bne.n	800361e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
 80035dc:	e01f      	b.n	800361e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	ea02 0103 	and.w	r1, r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b0a      	cmp	r3, #10
 8003606:	d003      	beq.n	8003610 <HAL_DMA2D_ConfigLayer+0xf4>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b09      	cmp	r3, #9
 800360e:	d106      	bne.n	800361e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800361c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	ff03000f 	.word	0xff03000f

08003640 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003640:	b480      	push	{r7}
 8003642:	b08b      	sub	sp, #44	@ 0x2c
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	041a      	lsls	r2, r3, #16
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003678:	d174      	bne.n	8003764 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003680:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003688:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003690:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d108      	bne.n	80036b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b0:	e053      	b.n	800375a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d106      	bne.n	80036c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	e048      	b.n	800375a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d111      	bne.n	80036f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	0cdb      	lsrs	r3, r3, #19
 80036d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	0a9b      	lsrs	r3, r3, #10
 80036da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	08db      	lsrs	r3, r3, #3
 80036e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	02db      	lsls	r3, r3, #11
 80036ea:	4313      	orrs	r3, r2
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f2:	e032      	b.n	800375a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d117      	bne.n	800372c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	0fdb      	lsrs	r3, r3, #31
 8003700:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	0cdb      	lsrs	r3, r3, #19
 8003706:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0adb      	lsrs	r3, r3, #11
 800370c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	431a      	orrs	r2, r3
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	03db      	lsls	r3, r3, #15
 8003722:	4313      	orrs	r3, r2
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
 800372a:	e016      	b.n	800375a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	0f1b      	lsrs	r3, r3, #28
 8003730:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	0d1b      	lsrs	r3, r3, #20
 8003736:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	0b1b      	lsrs	r3, r3, #12
 800373c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	011a      	lsls	r2, r3, #4
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	431a      	orrs	r2, r3
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	031b      	lsls	r3, r3, #12
 8003752:	4313      	orrs	r3, r2
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003762:	e003      	b.n	800376c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	60da      	str	r2, [r3, #12]
}
 800376c:	bf00      	nop
 800376e:	372c      	adds	r7, #44	@ 0x2c
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	@ 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e177      	b.n	8003a84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	f040 8166 	bne.w	8003a7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d005      	beq.n	80037ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d130      	bne.n	800382c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003800:	2201      	movs	r2, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 0201 	and.w	r2, r3, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	2b03      	cmp	r3, #3
 8003836:	d017      	beq.n	8003868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2203      	movs	r2, #3
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d123      	bne.n	80038bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	08da      	lsrs	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3208      	adds	r2, #8
 800387c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	220f      	movs	r2, #15
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	08da      	lsrs	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3208      	adds	r2, #8
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0203 	and.w	r2, r3, #3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80c0 	beq.w	8003a7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b66      	ldr	r3, [pc, #408]	@ (8003a9c <HAL_GPIO_Init+0x324>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	4a65      	ldr	r2, [pc, #404]	@ (8003a9c <HAL_GPIO_Init+0x324>)
 8003908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800390c:	6453      	str	r3, [r2, #68]	@ 0x44
 800390e:	4b63      	ldr	r3, [pc, #396]	@ (8003a9c <HAL_GPIO_Init+0x324>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800391a:	4a61      	ldr	r2, [pc, #388]	@ (8003aa0 <HAL_GPIO_Init+0x328>)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a58      	ldr	r2, [pc, #352]	@ (8003aa4 <HAL_GPIO_Init+0x32c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d037      	beq.n	80039b6 <HAL_GPIO_Init+0x23e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a57      	ldr	r2, [pc, #348]	@ (8003aa8 <HAL_GPIO_Init+0x330>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d031      	beq.n	80039b2 <HAL_GPIO_Init+0x23a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a56      	ldr	r2, [pc, #344]	@ (8003aac <HAL_GPIO_Init+0x334>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02b      	beq.n	80039ae <HAL_GPIO_Init+0x236>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a55      	ldr	r2, [pc, #340]	@ (8003ab0 <HAL_GPIO_Init+0x338>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d025      	beq.n	80039aa <HAL_GPIO_Init+0x232>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_GPIO_Init+0x33c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01f      	beq.n	80039a6 <HAL_GPIO_Init+0x22e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a53      	ldr	r2, [pc, #332]	@ (8003ab8 <HAL_GPIO_Init+0x340>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d019      	beq.n	80039a2 <HAL_GPIO_Init+0x22a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a52      	ldr	r2, [pc, #328]	@ (8003abc <HAL_GPIO_Init+0x344>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_Init+0x226>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a51      	ldr	r2, [pc, #324]	@ (8003ac0 <HAL_GPIO_Init+0x348>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00d      	beq.n	800399a <HAL_GPIO_Init+0x222>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a50      	ldr	r2, [pc, #320]	@ (8003ac4 <HAL_GPIO_Init+0x34c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_Init+0x21e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac8 <HAL_GPIO_Init+0x350>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_GPIO_Init+0x21a>
 800398e:	2309      	movs	r3, #9
 8003990:	e012      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 8003992:	230a      	movs	r3, #10
 8003994:	e010      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 8003996:	2308      	movs	r3, #8
 8003998:	e00e      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 800399a:	2307      	movs	r3, #7
 800399c:	e00c      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 800399e:	2306      	movs	r3, #6
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039a2:	2305      	movs	r3, #5
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039b6:	2300      	movs	r3, #0
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	f002 0203 	and.w	r2, r2, #3
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c8:	4935      	ldr	r1, [pc, #212]	@ (8003aa0 <HAL_GPIO_Init+0x328>)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_GPIO_Init+0x354>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fa:	4a34      	ldr	r2, [pc, #208]	@ (8003acc <HAL_GPIO_Init+0x354>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <HAL_GPIO_Init+0x354>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a24:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <HAL_GPIO_Init+0x354>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a2a:	4b28      	ldr	r3, [pc, #160]	@ (8003acc <HAL_GPIO_Init+0x354>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003acc <HAL_GPIO_Init+0x354>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <HAL_GPIO_Init+0x354>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a78:	4a14      	ldr	r2, [pc, #80]	@ (8003acc <HAL_GPIO_Init+0x354>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	f67f ae84 	bls.w	8003794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3724      	adds	r7, #36	@ 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40021c00 	.word	0x40021c00
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022400 	.word	0x40022400
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e0d9      	b.n	8003ca0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f040 80c9 	bne.w	8003c9a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b08:	4a6b      	ldr	r2, [pc, #428]	@ (8003cb8 <HAL_GPIO_DeInit+0x1e8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a63      	ldr	r2, [pc, #396]	@ (8003cbc <HAL_GPIO_DeInit+0x1ec>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d037      	beq.n	8003ba2 <HAL_GPIO_DeInit+0xd2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a62      	ldr	r2, [pc, #392]	@ (8003cc0 <HAL_GPIO_DeInit+0x1f0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d031      	beq.n	8003b9e <HAL_GPIO_DeInit+0xce>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a61      	ldr	r2, [pc, #388]	@ (8003cc4 <HAL_GPIO_DeInit+0x1f4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02b      	beq.n	8003b9a <HAL_GPIO_DeInit+0xca>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a60      	ldr	r2, [pc, #384]	@ (8003cc8 <HAL_GPIO_DeInit+0x1f8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d025      	beq.n	8003b96 <HAL_GPIO_DeInit+0xc6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8003ccc <HAL_GPIO_DeInit+0x1fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01f      	beq.n	8003b92 <HAL_GPIO_DeInit+0xc2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd0 <HAL_GPIO_DeInit+0x200>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d019      	beq.n	8003b8e <HAL_GPIO_DeInit+0xbe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd4 <HAL_GPIO_DeInit+0x204>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_DeInit+0xba>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a5c      	ldr	r2, [pc, #368]	@ (8003cd8 <HAL_GPIO_DeInit+0x208>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00d      	beq.n	8003b86 <HAL_GPIO_DeInit+0xb6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a5b      	ldr	r2, [pc, #364]	@ (8003cdc <HAL_GPIO_DeInit+0x20c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_DeInit+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce0 <HAL_GPIO_DeInit+0x210>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_GPIO_DeInit+0xae>
 8003b7a:	2309      	movs	r3, #9
 8003b7c:	e012      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b7e:	230a      	movs	r3, #10
 8003b80:	e010      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b82:	2308      	movs	r3, #8
 8003b84:	e00e      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b86:	2307      	movs	r3, #7
 8003b88:	e00c      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b8a:	2306      	movs	r3, #6
 8003b8c:	e00a      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e008      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e004      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	f002 0203 	and.w	r2, r2, #3
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	4093      	lsls	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d132      	bne.n	8003c1a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	4949      	ldr	r1, [pc, #292]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003bc2:	4b48      	ldr	r3, [pc, #288]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	4946      	ldr	r1, [pc, #280]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bd0:	4b44      	ldr	r3, [pc, #272]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	4942      	ldr	r1, [pc, #264]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bde:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	493f      	ldr	r1, [pc, #252]	@ (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <HAL_GPIO_DeInit+0x1e8>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	482a      	ldr	r0, [pc, #168]	@ (8003cb8 <HAL_GPIO_DeInit+0x1e8>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	400a      	ands	r2, r1
 8003c14:	3302      	adds	r3, #2
 8003c16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2103      	movs	r1, #3
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	220f      	movs	r2, #15
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	08d2      	lsrs	r2, r2, #3
 8003c50:	4019      	ands	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2103      	movs	r1, #3
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	2101      	movs	r1, #1
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2103      	movs	r1, #3
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	401a      	ands	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b0f      	cmp	r3, #15
 8003ca4:	f67f af22 	bls.w	8003aec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40020400 	.word	0x40020400
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020c00 	.word	0x40020c00
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40021400 	.word	0x40021400
 8003cd4:	40021800 	.word	0x40021800
 8003cd8:	40021c00 	.word	0x40021c00
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40022400 	.word	0x40022400
 8003ce4:	40013c00 	.word	0x40013c00

08003ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e001      	b.n	8003d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d34:	e003      	b.n	8003d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	041a      	lsls	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	619a      	str	r2, [r3, #24]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	041a      	lsls	r2, r3, #16
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	619a      	str	r2, [r3, #24]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e12b      	b.n	8003fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd f9c8 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	@ 0x24
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de4:	f001 f8c4 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a81      	ldr	r2, [pc, #516]	@ (8003ff4 <HAL_I2C_Init+0x274>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d807      	bhi.n	8003e04 <HAL_I2C_Init+0x84>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a80      	ldr	r2, [pc, #512]	@ (8003ff8 <HAL_I2C_Init+0x278>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	bf94      	ite	ls
 8003dfc:	2301      	movls	r3, #1
 8003dfe:	2300      	movhi	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e006      	b.n	8003e12 <HAL_I2C_Init+0x92>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a7d      	ldr	r2, [pc, #500]	@ (8003ffc <HAL_I2C_Init+0x27c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bf94      	ite	ls
 8003e0c:	2301      	movls	r3, #1
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0e7      	b.n	8003fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a78      	ldr	r2, [pc, #480]	@ (8004000 <HAL_I2C_Init+0x280>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0c9b      	lsrs	r3, r3, #18
 8003e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff4 <HAL_I2C_Init+0x274>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d802      	bhi.n	8003e54 <HAL_I2C_Init+0xd4>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3301      	adds	r3, #1
 8003e52:	e009      	b.n	8003e68 <HAL_I2C_Init+0xe8>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	4a69      	ldr	r2, [pc, #420]	@ (8004004 <HAL_I2C_Init+0x284>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	3301      	adds	r3, #1
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	495c      	ldr	r1, [pc, #368]	@ (8003ff4 <HAL_I2C_Init+0x274>)
 8003e84:	428b      	cmp	r3, r1
 8003e86:	d819      	bhi.n	8003ebc <HAL_I2C_Init+0x13c>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e59      	subs	r1, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_I2C_Init+0x138>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e59      	subs	r1, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	e051      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e04f      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <HAL_I2C_Init+0x168>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1e58      	subs	r0, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e012      	b.n	8003f0e <HAL_I2C_Init+0x18e>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1e58      	subs	r0, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	0099      	lsls	r1, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Init+0x196>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10e      	bne.n	8003f3c <HAL_I2C_Init+0x1bc>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e58      	subs	r0, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	440b      	add	r3, r1
 8003f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f3a:	e00f      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e58      	subs	r0, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	0099      	lsls	r1, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	6809      	ldr	r1, [r1, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6911      	ldr	r1, [r2, #16]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68d2      	ldr	r2, [r2, #12]
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	000186a0 	.word	0x000186a0
 8003ff8:	001e847f 	.word	0x001e847f
 8003ffc:	003d08ff 	.word	0x003d08ff
 8004000:	431bde83 	.word	0x431bde83
 8004004:	10624dd3 	.word	0x10624dd3

08004008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	d129      	bne.n	8004072 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2224      	movs	r2, #36	@ 0x24
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0210 	bic.w	r2, r2, #16
 8004044:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
  }
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	d12a      	bne.n	80040f0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2224      	movs	r2, #36	@ 0x24
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	f023 030f 	bic.w	r3, r3, #15
 80040c0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	89fa      	ldrh	r2, [r7, #14]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e08f      	b.n	8004230 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fd f873 	bl	8001210 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004140:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6999      	ldr	r1, [r3, #24]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004156:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	430a      	orrs	r2, r1
 800417a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a19      	ldr	r1, [r3, #32]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	430a      	orrs	r2, r1
 8004190:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0206 	orr.w	r2, r2, #6
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004238:	b5b0      	push	{r4, r5, r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_LTDC_ConfigLayer+0x1a>
 800424e:	2302      	movs	r3, #2
 8004250:	e02c      	b.n	80042ac <HAL_LTDC_ConfigLayer+0x74>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2134      	movs	r1, #52	@ 0x34
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800427a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800427c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800427e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f83b 	bl	8004308 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2201      	movs	r2, #1
 8004298:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bdb0      	pop	{r4, r5, r7, pc}

080042b4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_LTDC_EnableDither+0x16>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e016      	b.n	80042f8 <HAL_LTDC_EnableDither+0x44>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80042da:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <HAL_LTDC_EnableDither+0x50>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <HAL_LTDC_EnableDither+0x50>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40016800 	.word	0x40016800

08004308 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	@ 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	4413      	add	r3, r2
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	01db      	lsls	r3, r3, #7
 8004334:	4413      	add	r3, r2
 8004336:	3384      	adds	r3, #132	@ 0x84
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	4611      	mov	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	01d2      	lsls	r2, r2, #7
 8004344:	440a      	add	r2, r1
 8004346:	3284      	adds	r2, #132	@ 0x84
 8004348:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800434c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800435e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004360:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	440b      	add	r3, r1
 800436e:	3384      	adds	r3, #132	@ 0x84
 8004370:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004376:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004386:	4413      	add	r3, r2
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	01db      	lsls	r3, r3, #7
 8004396:	4413      	add	r3, r2
 8004398:	3384      	adds	r3, #132	@ 0x84
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	4611      	mov	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	01d2      	lsls	r2, r2, #7
 80043a6:	440a      	add	r2, r1
 80043a8:	3284      	adds	r2, #132	@ 0x84
 80043aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80043ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043be:	4413      	add	r3, r2
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4619      	mov	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	440b      	add	r3, r1
 80043ce:	3384      	adds	r3, #132	@ 0x84
 80043d0:	4619      	mov	r1, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	01db      	lsls	r3, r3, #7
 80043e2:	4413      	add	r3, r2
 80043e4:	3384      	adds	r3, #132	@ 0x84
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	4611      	mov	r1, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	01d2      	lsls	r2, r2, #7
 80043f2:	440a      	add	r2, r1
 80043f4:	3284      	adds	r2, #132	@ 0x84
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	4413      	add	r3, r2
 8004408:	3384      	adds	r3, #132	@ 0x84
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004434:	461a      	mov	r2, r3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	431a      	orrs	r2, r3
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	440b      	add	r3, r1
 800444a:	3384      	adds	r3, #132	@ 0x84
 800444c:	4619      	mov	r1, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	01db      	lsls	r3, r3, #7
 800445e:	4413      	add	r3, r2
 8004460:	3384      	adds	r3, #132	@ 0x84
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4611      	mov	r1, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	01d2      	lsls	r2, r2, #7
 800446e:	440a      	add	r2, r1
 8004470:	3284      	adds	r2, #132	@ 0x84
 8004472:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004476:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	01db      	lsls	r3, r3, #7
 8004482:	4413      	add	r3, r2
 8004484:	3384      	adds	r3, #132	@ 0x84
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	01db      	lsls	r3, r3, #7
 8004498:	4413      	add	r3, r2
 800449a:	3384      	adds	r3, #132	@ 0x84
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4611      	mov	r1, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	01d2      	lsls	r2, r2, #7
 80044a8:	440a      	add	r2, r1
 80044aa:	3284      	adds	r2, #132	@ 0x84
 80044ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80044b0:	f023 0307 	bic.w	r3, r3, #7
 80044b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6809      	ldr	r1, [r1, #0]
 80044c2:	4608      	mov	r0, r1
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	01c9      	lsls	r1, r1, #7
 80044c8:	4401      	add	r1, r0
 80044ca:	3184      	adds	r1, #132	@ 0x84
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	01db      	lsls	r3, r3, #7
 80044da:	4413      	add	r3, r2
 80044dc:	3384      	adds	r3, #132	@ 0x84
 80044de:	461a      	mov	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 80044ee:	2304      	movs	r3, #4
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	e01b      	b.n	800452c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d102      	bne.n	8004502 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 80044fc:	2303      	movs	r3, #3
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e014      	b.n	800452c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00b      	beq.n	8004522 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800450e:	2b02      	cmp	r3, #2
 8004510:	d007      	beq.n	8004522 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004516:	2b03      	cmp	r3, #3
 8004518:	d003      	beq.n	8004522 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800451e:	2b07      	cmp	r3, #7
 8004520:	d102      	bne.n	8004528 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8004522:	2302      	movs	r3, #2
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	e001      	b.n	800452c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8004528:	2301      	movs	r3, #1
 800452a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	01db      	lsls	r3, r3, #7
 8004536:	4413      	add	r3, r2
 8004538:	3384      	adds	r3, #132	@ 0x84
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	4611      	mov	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	01d2      	lsls	r2, r2, #7
 8004546:	440a      	add	r2, r1
 8004548:	3284      	adds	r2, #132	@ 0x84
 800454a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800454e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1acb      	subs	r3, r1, r3
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6809      	ldr	r1, [r1, #0]
 8004572:	4608      	mov	r0, r1
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	01c9      	lsls	r1, r1, #7
 8004578:	4401      	add	r1, r0
 800457a:	3184      	adds	r1, #132	@ 0x84
 800457c:	4313      	orrs	r3, r2
 800457e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	01db      	lsls	r3, r3, #7
 800458a:	4413      	add	r3, r2
 800458c:	3384      	adds	r3, #132	@ 0x84
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	4611      	mov	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	01d2      	lsls	r2, r2, #7
 800459a:	440a      	add	r2, r1
 800459c:	3284      	adds	r2, #132	@ 0x84
 800459e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	01db      	lsls	r3, r3, #7
 80045b2:	4413      	add	r3, r2
 80045b4:	3384      	adds	r3, #132	@ 0x84
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	01db      	lsls	r3, r3, #7
 80045c8:	4413      	add	r3, r2
 80045ca:	3384      	adds	r3, #132	@ 0x84
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	4611      	mov	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	01d2      	lsls	r2, r2, #7
 80045d8:	440a      	add	r2, r1
 80045da:	3284      	adds	r2, #132	@ 0x84
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	3724      	adds	r7, #36	@ 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	4b20      	ldr	r3, [pc, #128]	@ (8004680 <HAL_PWREx_EnableOverDrive+0x90>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <HAL_PWREx_EnableOverDrive+0x90>)
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	@ 0x40
 800460a:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <HAL_PWREx_EnableOverDrive+0x90>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004616:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_PWREx_EnableOverDrive+0x94>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800461c:	f7fe fb20 	bl	8002c60 <HAL_GetTick>
 8004620:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004622:	e009      	b.n	8004638 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004624:	f7fe fb1c 	bl	8002c60 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004632:	d901      	bls.n	8004638 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e01f      	b.n	8004678 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004638:	4b13      	ldr	r3, [pc, #76]	@ (8004688 <HAL_PWREx_EnableOverDrive+0x98>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d1ee      	bne.n	8004624 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004646:	4b11      	ldr	r3, [pc, #68]	@ (800468c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800464c:	f7fe fb08 	bl	8002c60 <HAL_GetTick>
 8004650:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004652:	e009      	b.n	8004668 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004654:	f7fe fb04 	bl	8002c60 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004662:	d901      	bls.n	8004668 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e007      	b.n	8004678 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004668:	4b07      	ldr	r3, [pc, #28]	@ (8004688 <HAL_PWREx_EnableOverDrive+0x98>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004674:	d1ee      	bne.n	8004654 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	420e0040 	.word	0x420e0040
 8004688:	40007000 	.word	0x40007000
 800468c:	420e0044 	.word	0x420e0044

08004690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e267      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d075      	beq.n	800479a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ae:	4b88      	ldr	r3, [pc, #544]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d00c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ba:	4b85      	ldr	r3, [pc, #532]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d112      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b82      	ldr	r3, [pc, #520]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046d2:	d10b      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	4b7e      	ldr	r3, [pc, #504]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05b      	beq.n	8004798 <HAL_RCC_OscConfig+0x108>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d157      	bne.n	8004798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e242      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0x74>
 80046f6:	4b76      	ldr	r3, [pc, #472]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a75      	ldr	r2, [pc, #468]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e01d      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b70      	ldr	r3, [pc, #448]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6f      	ldr	r2, [pc, #444]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b6d      	ldr	r3, [pc, #436]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6c      	ldr	r2, [pc, #432]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004728:	4b69      	ldr	r3, [pc, #420]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a68      	ldr	r2, [pc, #416]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800472e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b66      	ldr	r3, [pc, #408]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a65      	ldr	r2, [pc, #404]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800473a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d013      	beq.n	8004770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe fa8a 	bl	8002c60 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004750:	f7fe fa86 	bl	8002c60 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	@ 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e207      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b5b      	ldr	r3, [pc, #364]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0xc0>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fe fa76 	bl	8002c60 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004778:	f7fe fa72 	bl	8002c60 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1f3      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	4b51      	ldr	r3, [pc, #324]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0xe8>
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d063      	beq.n	800486e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047a6:	4b4a      	ldr	r3, [pc, #296]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b2:	4b47      	ldr	r3, [pc, #284]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b44      	ldr	r3, [pc, #272]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	4b41      	ldr	r3, [pc, #260]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1c7      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b3b      	ldr	r3, [pc, #236]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4937      	ldr	r1, [pc, #220]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f6:	e03a      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004800:	4b34      	ldr	r3, [pc, #208]	@ (80048d4 <HAL_RCC_OscConfig+0x244>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fe fa2b 	bl	8002c60 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480e:	f7fe fa27 	bl	8002c60 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1a8      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	4b2b      	ldr	r3, [pc, #172]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b28      	ldr	r3, [pc, #160]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4925      	ldr	r1, [pc, #148]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	e015      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004842:	4b24      	ldr	r3, [pc, #144]	@ (80048d4 <HAL_RCC_OscConfig+0x244>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fe fa0a 	bl	8002c60 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004850:	f7fe fa06 	bl	8002c60 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e187      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d036      	beq.n	80048e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004882:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <HAL_RCC_OscConfig+0x248>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fe f9ea 	bl	8002c60 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004890:	f7fe f9e6 	bl	8002c60 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e167      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <HAL_RCC_OscConfig+0x240>)
 80048a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x200>
 80048ae:	e01b      	b.n	80048e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b0:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <HAL_RCC_OscConfig+0x248>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fe f9d3 	bl	8002c60 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	e00e      	b.n	80048dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048be:	f7fe f9cf 	bl	8002c60 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d907      	bls.n	80048dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e150      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	42470000 	.word	0x42470000
 80048d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048dc:	4b88      	ldr	r3, [pc, #544]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ea      	bne.n	80048be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8097 	beq.w	8004a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fa:	4b81      	ldr	r3, [pc, #516]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004914:	6413      	str	r3, [r2, #64]	@ 0x40
 8004916:	4b7a      	ldr	r3, [pc, #488]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	4b77      	ldr	r3, [pc, #476]	@ (8004b04 <HAL_RCC_OscConfig+0x474>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d118      	bne.n	8004964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004932:	4b74      	ldr	r3, [pc, #464]	@ (8004b04 <HAL_RCC_OscConfig+0x474>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a73      	ldr	r2, [pc, #460]	@ (8004b04 <HAL_RCC_OscConfig+0x474>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493e:	f7fe f98f 	bl	8002c60 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004946:	f7fe f98b 	bl	8002c60 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e10c      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	4b6a      	ldr	r3, [pc, #424]	@ (8004b04 <HAL_RCC_OscConfig+0x474>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x2ea>
 800496c:	4b64      	ldr	r3, [pc, #400]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004970:	4a63      	ldr	r2, [pc, #396]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6713      	str	r3, [r2, #112]	@ 0x70
 8004978:	e01c      	b.n	80049b4 <HAL_RCC_OscConfig+0x324>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b05      	cmp	r3, #5
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0x30c>
 8004982:	4b5f      	ldr	r3, [pc, #380]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004986:	4a5e      	ldr	r2, [pc, #376]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	6713      	str	r3, [r2, #112]	@ 0x70
 800498e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004992:	4a5b      	ldr	r2, [pc, #364]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	6713      	str	r3, [r2, #112]	@ 0x70
 800499a:	e00b      	b.n	80049b4 <HAL_RCC_OscConfig+0x324>
 800499c:	4b58      	ldr	r3, [pc, #352]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	4a57      	ldr	r2, [pc, #348]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a8:	4b55      	ldr	r3, [pc, #340]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	4a54      	ldr	r2, [pc, #336]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049ae:	f023 0304 	bic.w	r3, r3, #4
 80049b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d015      	beq.n	80049e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fe f950 	bl	8002c60 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	e00a      	b.n	80049da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fe f94c 	bl	8002c60 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0cb      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049da:	4b49      	ldr	r3, [pc, #292]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ee      	beq.n	80049c4 <HAL_RCC_OscConfig+0x334>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e8:	f7fe f93a 	bl	8002c60 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f0:	f7fe f936 	bl	8002c60 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0b5      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a06:	4b3e      	ldr	r3, [pc, #248]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ee      	bne.n	80049f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a18:	4b39      	ldr	r3, [pc, #228]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	4a38      	ldr	r2, [pc, #224]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80a1 	beq.w	8004b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2e:	4b34      	ldr	r3, [pc, #208]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d05c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d141      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <HAL_RCC_OscConfig+0x478>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fe f90a 	bl	8002c60 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fe f906 	bl	8002c60 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e087      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	4b27      	ldr	r3, [pc, #156]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	3b01      	subs	r3, #1
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	491b      	ldr	r1, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x478>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fe f8df 	bl	8002c60 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7fe f8db 	bl	8002c60 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e05c      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x416>
 8004ac4:	e054      	b.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_RCC_OscConfig+0x478>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe f8c8 	bl	8002c60 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe f8c4 	bl	8002c60 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e045      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x444>
 8004af2:	e03d      	b.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e038      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000
 8004b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <HAL_RCC_OscConfig+0x4ec>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d028      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d121      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d11a      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d111      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	3b01      	subs	r3, #1
 8004b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0cc      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b68      	ldr	r3, [pc, #416]	@ (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d90c      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b65      	ldr	r3, [pc, #404]	@ (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b63      	ldr	r3, [pc, #396]	@ (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0b8      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bec:	4b53      	ldr	r3, [pc, #332]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a52      	ldr	r2, [pc, #328]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b50      	ldr	r3, [pc, #320]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	494d      	ldr	r1, [pc, #308]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d044      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b47      	ldr	r3, [pc, #284]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d119      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e06f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e067      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5e:	4b37      	ldr	r3, [pc, #220]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4934      	ldr	r1, [pc, #208]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fd fff6 	bl	8002c60 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c78:	f7fd fff2 	bl	8002c60 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e04f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 020c 	and.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1eb      	bne.n	8004c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b25      	ldr	r3, [pc, #148]	@ (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20c      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b22      	ldr	r3, [pc, #136]	@ (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b20      	ldr	r3, [pc, #128]	@ (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e032      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4916      	ldr	r1, [pc, #88]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf2:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490e      	ldr	r1, [pc, #56]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d06:	f000 f821 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490a      	ldr	r1, [pc, #40]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1e:	4a09      	ldr	r2, [pc, #36]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d22:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd ff56 	bl	8002bd8 <HAL_InitTick>

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023c00 	.word	0x40023c00
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	080068f4 	.word	0x080068f4
 8004d44:	200003e0 	.word	0x200003e0
 8004d48:	2000042c 	.word	0x2000042c

08004d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d50:	b094      	sub	sp, #80	@ 0x50
 8004d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d64:	4b79      	ldr	r3, [pc, #484]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x40>
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	f200 80e1 	bhi.w	8004f38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7e:	e0db      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d80:	4b73      	ldr	r3, [pc, #460]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d84:	e0db      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d86:	4b73      	ldr	r3, [pc, #460]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d8a:	e0d8      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d96:	4b6d      	ldr	r3, [pc, #436]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	2200      	movs	r2, #0
 8004daa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	0159      	lsls	r1, r3, #5
 8004dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd0:	0150      	lsls	r0, r2, #5
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	1a51      	subs	r1, r2, r1
 8004dda:	6139      	str	r1, [r7, #16]
 8004ddc:	4629      	mov	r1, r5
 8004dde:	eb63 0301 	sbc.w	r3, r3, r1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df0:	4659      	mov	r1, fp
 8004df2:	018b      	lsls	r3, r1, #6
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	018a      	lsls	r2, r1, #6
 8004dfe:	4651      	mov	r1, sl
 8004e00:	ebb2 0801 	subs.w	r8, r2, r1
 8004e04:	4659      	mov	r1, fp
 8004e06:	eb63 0901 	sbc.w	r9, r3, r1
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1e:	4690      	mov	r8, r2
 8004e20:	4699      	mov	r9, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	eb18 0303 	adds.w	r3, r8, r3
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	eb49 0303 	adc.w	r3, r9, r3
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e3e:	4629      	mov	r1, r5
 8004e40:	024b      	lsls	r3, r1, #9
 8004e42:	4621      	mov	r1, r4
 8004e44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e48:	4621      	mov	r1, r4
 8004e4a:	024a      	lsls	r2, r1, #9
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e52:	2200      	movs	r2, #0
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e5c:	f7fb f9c6 	bl	80001ec <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4613      	mov	r3, r2
 8004e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e68:	e058      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b38      	ldr	r3, [pc, #224]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	2200      	movs	r2, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	4611      	mov	r1, r2
 8004e76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e7a:	623b      	str	r3, [r7, #32]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e84:	4642      	mov	r2, r8
 8004e86:	464b      	mov	r3, r9
 8004e88:	f04f 0000 	mov.w	r0, #0
 8004e8c:	f04f 0100 	mov.w	r1, #0
 8004e90:	0159      	lsls	r1, r3, #5
 8004e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e96:	0150      	lsls	r0, r2, #5
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ebc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ec0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	00eb      	lsls	r3, r5, #3
 8004ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed2:	00e2      	lsls	r2, r4, #3
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	461d      	mov	r5, r3
 8004ed8:	4643      	mov	r3, r8
 8004eda:	18e3      	adds	r3, r4, r3
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	464b      	mov	r3, r9
 8004ee0:	eb45 0303 	adc.w	r3, r5, r3
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	028b      	lsls	r3, r1, #10
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004efc:	4621      	mov	r1, r4
 8004efe:	028a      	lsls	r2, r1, #10
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f06:	2200      	movs	r2, #0
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	61fa      	str	r2, [r7, #28]
 8004f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f10:	f7fb f96c 	bl	80001ec <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4613      	mov	r3, r2
 8004f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	3301      	adds	r3, #1
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f36:	e002      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3750      	adds	r7, #80	@ 0x50
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	00f42400 	.word	0x00f42400
 8004f54:	007a1200 	.word	0x007a1200

08004f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f5c:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	200003e0 	.word	0x200003e0

08004f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f74:	f7ff fff0 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0a9b      	lsrs	r3, r3, #10
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4903      	ldr	r1, [pc, #12]	@ (8004f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40023800 	.word	0x40023800
 8004f94:	08006904 	.word	0x08006904

08004f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f9c:	f7ff ffdc 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	0b5b      	lsrs	r3, r3, #13
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4903      	ldr	r1, [pc, #12]	@ (8004fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	08006904 	.word	0x08006904

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d075      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff4:	4b91      	ldr	r3, [pc, #580]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffa:	f7fd fe31 	bl	8002c60 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005002:	f7fd fe2d 	bl	8002c60 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e189      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005014:	4b8a      	ldr	r3, [pc, #552]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	019a      	lsls	r2, r3, #6
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	071b      	lsls	r3, r3, #28
 8005038:	4981      	ldr	r1, [pc, #516]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01f      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800504c:	4b7c      	ldr	r3, [pc, #496]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005052:	0f1b      	lsrs	r3, r3, #28
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	019a      	lsls	r2, r3, #6
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	431a      	orrs	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	071b      	lsls	r3, r3, #28
 800506c:	4974      	ldr	r1, [pc, #464]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005074:	4b72      	ldr	r3, [pc, #456]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800507a:	f023 021f 	bic.w	r2, r3, #31
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	3b01      	subs	r3, #1
 8005084:	496e      	ldr	r1, [pc, #440]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	019a      	lsls	r2, r3, #6
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	071b      	lsls	r3, r3, #28
 80050ac:	4964      	ldr	r1, [pc, #400]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b4:	4b61      	ldr	r3, [pc, #388]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ba:	f7fd fdd1 	bl	8002c60 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050c2:	f7fd fdcd 	bl	8002c60 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e129      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d079      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050f8:	4b52      	ldr	r3, [pc, #328]	@ (8005244 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050fe:	f7fd fdaf 	bl	8002c60 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005106:	f7fd fdab 	bl	8002c60 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e107      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005118:	4b49      	ldr	r3, [pc, #292]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005124:	d0ef      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005132:	4b43      	ldr	r3, [pc, #268]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005138:	0f1b      	lsrs	r3, r3, #28
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	019a      	lsls	r2, r3, #6
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	431a      	orrs	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	071b      	lsls	r3, r3, #28
 8005152:	493b      	ldr	r1, [pc, #236]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800515a:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005160:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	3b01      	subs	r3, #1
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	4934      	ldr	r1, [pc, #208]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005180:	4b2f      	ldr	r3, [pc, #188]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	0e1b      	lsrs	r3, r3, #24
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	019a      	lsls	r2, r3, #6
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	071b      	lsls	r3, r3, #28
 80051a0:	4927      	ldr	r1, [pc, #156]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051a8:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	4922      	ldr	r1, [pc, #136]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051be:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051c4:	f7fd fd4c 	bl	8002c60 <HAL_GetTick>
 80051c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051cc:	f7fd fd48 	bl	8002c60 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0a4      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051de:	4b18      	ldr	r3, [pc, #96]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ea:	d1ef      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 808b 	beq.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	4a0f      	ldr	r2, [pc, #60]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005208:	6413      	str	r3, [r2, #64]	@ 0x40
 800520a:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005216:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a0b      	ldr	r2, [pc, #44]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800521c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005220:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005222:	f7fd fd1d 	bl	8002c60 <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005228:	e010      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522a:	f7fd fd19 	bl	8002c60 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d909      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e075      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800523c:	42470068 	.word	0x42470068
 8005240:	40023800 	.word	0x40023800
 8005244:	42470070 	.word	0x42470070
 8005248:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800524c:	4b38      	ldr	r3, [pc, #224]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0e8      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005258:	4b36      	ldr	r3, [pc, #216]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005260:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02f      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	429a      	cmp	r2, r3
 8005274:	d028      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005276:	4b2f      	ldr	r3, [pc, #188]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800527e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005280:	4b2d      	ldr	r3, [pc, #180]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005286:	4b2c      	ldr	r3, [pc, #176]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800528c:	4a29      	ldr	r2, [pc, #164]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005292:	4b28      	ldr	r3, [pc, #160]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d114      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd fcdf 	bl	8002c60 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a4:	e00a      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fd fcdb 	bl	8002c60 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e035      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ee      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052d4:	d10d      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80052d6:	4b17      	ldr	r3, [pc, #92]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80052e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ea:	4912      	ldr	r1, [pc, #72]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]
 80052f0:	e005      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052f8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052fc:	6093      	str	r3, [r2, #8]
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005300:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530a:	490a      	ldr	r1, [pc, #40]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800530c:	4313      	orrs	r3, r2
 800530e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005324:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40007000 	.word	0x40007000
 8005334:	40023800 	.word	0x40023800
 8005338:	42470e40 	.word	0x42470e40
 800533c:	424711e0 	.word	0x424711e0

08005340 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e025      	b.n	80053a0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fc f9b9 	bl	80016e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f001 f939 	bl	80065f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	461a      	mov	r2, r3
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	f001 f98e 	bl	80066b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80053ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d101      	bne.n	80053c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	e021      	b.n	800540a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d002      	beq.n	80053d2 <HAL_SDRAM_SendCommand+0x2a>
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d118      	bne.n	8005404 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 f9ce 	bl	8006784 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d104      	bne.n	80053fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2205      	movs	r2, #5
 80053f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80053f8:	e006      	b.n	8005408 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005402:	e001      	b.n	8005408 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d101      	bne.n	800542c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
 800542a:	e016      	b.n	800545a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10f      	bne.n	8005458 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f001 f9d9 	bl	80067fe <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e07b      	b.n	800556c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d108      	bne.n	800548e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005484:	d009      	beq.n	800549a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	61da      	str	r2, [r3, #28]
 800548c:	e005      	b.n	800549a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fb ffd3 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551e:	ea42 0103 	orr.w	r1, r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	f003 0104 	and.w	r1, r3, #4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	f003 0210 	and.w	r2, r3, #16
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800555a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e01a      	b.n	80055bc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800559c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fb ffa6 	bl	80014f0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d4:	f7fd fb44 	bl	8002c60 <HAL_GetTick>
 80055d8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d001      	beq.n	80055ee <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	e12a      	b.n	8005844 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_Transmit+0x36>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e122      	b.n	8005844 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_SPI_Transmit+0x48>
 8005608:	2302      	movs	r3, #2
 800560a:	e11b      	b.n	8005844 <HAL_SPI_Transmit+0x280>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2203      	movs	r2, #3
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800565a:	d10f      	bne.n	800567c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800566a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800567a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005686:	2b40      	cmp	r3, #64	@ 0x40
 8005688:	d007      	beq.n	800569a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a2:	d152      	bne.n	800574a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_SPI_Transmit+0xee>
 80056ac:	8b7b      	ldrh	r3, [r7, #26]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d145      	bne.n	800573e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	881a      	ldrh	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056d6:	e032      	b.n	800573e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d112      	bne.n	800570c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	86da      	strh	r2, [r3, #54]	@ 0x36
 800570a:	e018      	b.n	800573e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570c:	f7fd faa8 	bl	8002c60 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d803      	bhi.n	8005724 <HAL_SPI_Transmit+0x160>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005722:	d102      	bne.n	800572a <HAL_SPI_Transmit+0x166>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e082      	b.n	8005844 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1c7      	bne.n	80056d8 <HAL_SPI_Transmit+0x114>
 8005748:	e053      	b.n	80057f2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_SPI_Transmit+0x194>
 8005752:	8b7b      	ldrh	r3, [r7, #26]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d147      	bne.n	80057e8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	7812      	ldrb	r2, [r2, #0]
 8005764:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800577e:	e033      	b.n	80057e8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d113      	bne.n	80057b6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057b4:	e018      	b.n	80057e8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b6:	f7fd fa53 	bl	8002c60 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d803      	bhi.n	80057ce <HAL_SPI_Transmit+0x20a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057cc:	d102      	bne.n	80057d4 <HAL_SPI_Transmit+0x210>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e02d      	b.n	8005844 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1c6      	bne.n	8005780 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fbe6 	bl	8005fc8 <SPI_EndRxTxTransaction>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005842:	2300      	movs	r3, #0
  }
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
 800586a:	e104      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Receive+0x2c>
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0fc      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005884:	d112      	bne.n	80058ac <HAL_SPI_Receive+0x60>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10e      	bne.n	80058ac <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2204      	movs	r2, #4
 8005892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f8eb 	bl	8005a7e <HAL_SPI_TransmitReceive>
 80058a8:	4603      	mov	r3, r0
 80058aa:	e0e4      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058ac:	f7fd f9d8 	bl	8002c60 <HAL_GetTick>
 80058b0:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_SPI_Receive+0x74>
 80058bc:	2302      	movs	r3, #2
 80058be:	e0da      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2204      	movs	r2, #4
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800590e:	d10f      	bne.n	8005930 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800591e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800592e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b40      	cmp	r3, #64	@ 0x40
 800593c:	d007      	beq.n	800594e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d170      	bne.n	8005a38 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005956:	e035      	b.n	80059c4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d115      	bne.n	8005992 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f103 020c 	add.w	r2, r3, #12
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005990:	e018      	b.n	80059c4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005992:	f7fd f965 	bl	8002c60 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d803      	bhi.n	80059aa <HAL_SPI_Receive+0x15e>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a8:	d102      	bne.n	80059b0 <HAL_SPI_Receive+0x164>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e058      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1c4      	bne.n	8005958 <HAL_SPI_Receive+0x10c>
 80059ce:	e038      	b.n	8005a42 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d113      	bne.n	8005a06 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e8:	b292      	uxth	r2, r2
 80059ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	1c9a      	adds	r2, r3, #2
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a04:	e018      	b.n	8005a38 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a06:	f7fd f92b 	bl	8002c60 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d803      	bhi.n	8005a1e <HAL_SPI_Receive+0x1d2>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a1c:	d102      	bne.n	8005a24 <HAL_SPI_Receive+0x1d8>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e01e      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1c6      	bne.n	80059d0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 fa58 	bl	8005efc <SPI_EndRxTransaction>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005a74:	2300      	movs	r3, #0
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b08a      	sub	sp, #40	@ 0x28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a90:	f7fd f8e6 	bl	8002c60 <HAL_GetTick>
 8005a94:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a9c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aa8:	7ffb      	ldrb	r3, [r7, #31]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d00c      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x4a>
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ab4:	d106      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x46>
 8005abe:	7ffb      	ldrb	r3, [r7, #31]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d001      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e17f      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x5c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x5c>
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e174      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x6e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e16d      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d003      	beq.n	8005b08 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2205      	movs	r2, #5
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	887a      	ldrh	r2, [r7, #2]
 8005b1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	887a      	ldrh	r2, [r7, #2]
 8005b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d007      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b64:	d17e      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0xf6>
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d16c      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	881a      	ldrh	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b98:	e059      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d11b      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x162>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x162>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d113      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbc:	881a      	ldrh	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc8:	1c9a      	adds	r2, r3, #2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d119      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x1a4>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d014      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c02:	b292      	uxth	r2, r2
 8005c04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0a:	1c9a      	adds	r2, r3, #2
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c22:	f7fd f81d 	bl	8002c60 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d80d      	bhi.n	8005c4e <HAL_SPI_TransmitReceive+0x1d0>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c38:	d009      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e0bc      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1a0      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x11c>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d19b      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x11c>
 8005c62:	e082      	b.n	8005d6a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x1f4>
 8005c6c:	8afb      	ldrh	r3, [r7, #22]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d171      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	7812      	ldrb	r2, [r2, #0]
 8005c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c98:	e05d      	b.n	8005d56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d11c      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x264>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d017      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x264>
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d114      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d119      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x2a6>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d20:	2301      	movs	r3, #1
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d24:	f7fc ff9c 	bl	8002c60 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d803      	bhi.n	8005d3c <HAL_SPI_TransmitReceive+0x2be>
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d3a:	d102      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x2c4>
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e038      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d19c      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x21c>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d197      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d6a:	6a3a      	ldr	r2, [r7, #32]
 8005d6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f92a 	bl	8005fc8 <SPI_EndRxTxTransaction>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e01d      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dde:	b2db      	uxtb	r3, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dfc:	f7fc ff30 	bl	8002c60 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e0c:	f7fc ff28 	bl	8002c60 <HAL_GetTick>
 8005e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e12:	4b39      	ldr	r3, [pc, #228]	@ (8005ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	015b      	lsls	r3, r3, #5
 8005e18:	0d1b      	lsrs	r3, r3, #20
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e22:	e055      	b.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e2a:	d051      	beq.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e2c:	f7fc ff18 	bl	8002c60 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d902      	bls.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d13d      	bne.n	8005ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e5a:	d111      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e64:	d004      	beq.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6e:	d107      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e88:	d10f      	bne.n	8005eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e018      	b.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e002      	b.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d19a      	bne.n	8005e24 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	200003e0 	.word	0x200003e0

08005efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f10:	d111      	bne.n	8005f36 <SPI_EndRxTransaction+0x3a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f1a:	d004      	beq.n	8005f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f24:	d107      	bne.n	8005f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3e:	d12a      	bne.n	8005f96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f48:	d012      	beq.n	8005f70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	2180      	movs	r1, #128	@ 0x80
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ff49 	bl	8005dec <SPI_WaitFlagStateUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d02d      	beq.n	8005fbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f64:	f043 0220 	orr.w	r2, r3, #32
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e026      	b.n	8005fbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2101      	movs	r1, #1
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff36 	bl	8005dec <SPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01a      	beq.n	8005fbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e013      	b.n	8005fbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ff23 	bl	8005dec <SPI_WaitFlagStateUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb0:	f043 0220 	orr.w	r2, r3, #32
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e000      	b.n	8005fbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	2102      	movs	r1, #2
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff ff04 	bl	8005dec <SPI_WaitFlagStateUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e032      	b.n	8006060 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8006068 <SPI_EndRxTxTransaction+0xa0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <SPI_EndRxTxTransaction+0xa4>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	0d5b      	lsrs	r3, r3, #21
 8006006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006018:	d112      	bne.n	8006040 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2200      	movs	r2, #0
 8006022:	2180      	movs	r1, #128	@ 0x80
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff fee1 	bl	8005dec <SPI_WaitFlagStateUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d016      	beq.n	800605e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	f043 0220 	orr.w	r2, r3, #32
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e00f      	b.n	8006060 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	3b01      	subs	r3, #1
 800604a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006056:	2b80      	cmp	r3, #128	@ 0x80
 8006058:	d0f2      	beq.n	8006040 <SPI_EndRxTxTransaction+0x78>
 800605a:	e000      	b.n	800605e <SPI_EndRxTxTransaction+0x96>
        break;
 800605c:	bf00      	nop
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	200003e0 	.word	0x200003e0
 800606c:	165e9f81 	.word	0x165e9f81

08006070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e042      	b.n	8006108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb fa48 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	@ 0x24
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f82b 	bl	8006110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006114:	b0c0      	sub	sp, #256	@ 0x100
 8006116:	af00      	add	r7, sp, #0
 8006118:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	68d9      	ldr	r1, [r3, #12]
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	ea40 0301 	orr.w	r3, r0, r1
 8006138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	431a      	orrs	r2, r3
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	431a      	orrs	r2, r3
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006168:	f021 010c 	bic.w	r1, r1, #12
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006176:	430b      	orrs	r3, r1
 8006178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618a:	6999      	ldr	r1, [r3, #24]
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	ea40 0301 	orr.w	r3, r0, r1
 8006196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b8f      	ldr	r3, [pc, #572]	@ (80063dc <UART_SetConfig+0x2cc>)
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d005      	beq.n	80061b0 <UART_SetConfig+0xa0>
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b8d      	ldr	r3, [pc, #564]	@ (80063e0 <UART_SetConfig+0x2d0>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d104      	bne.n	80061ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fe fef2 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80061b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061b8:	e003      	b.n	80061c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ba:	f7fe fed9 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 80061be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061cc:	f040 810c 	bne.w	80063e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061e2:	4622      	mov	r2, r4
 80061e4:	462b      	mov	r3, r5
 80061e6:	1891      	adds	r1, r2, r2
 80061e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061ea:	415b      	adcs	r3, r3
 80061ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061f2:	4621      	mov	r1, r4
 80061f4:	eb12 0801 	adds.w	r8, r2, r1
 80061f8:	4629      	mov	r1, r5
 80061fa:	eb43 0901 	adc.w	r9, r3, r1
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800620e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006212:	4690      	mov	r8, r2
 8006214:	4699      	mov	r9, r3
 8006216:	4623      	mov	r3, r4
 8006218:	eb18 0303 	adds.w	r3, r8, r3
 800621c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006220:	462b      	mov	r3, r5
 8006222:	eb49 0303 	adc.w	r3, r9, r3
 8006226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006236:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800623a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800623e:	460b      	mov	r3, r1
 8006240:	18db      	adds	r3, r3, r3
 8006242:	653b      	str	r3, [r7, #80]	@ 0x50
 8006244:	4613      	mov	r3, r2
 8006246:	eb42 0303 	adc.w	r3, r2, r3
 800624a:	657b      	str	r3, [r7, #84]	@ 0x54
 800624c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006254:	f7f9 ffca 	bl	80001ec <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4b61      	ldr	r3, [pc, #388]	@ (80063e4 <UART_SetConfig+0x2d4>)
 800625e:	fba3 2302 	umull	r2, r3, r3, r2
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	011c      	lsls	r4, r3, #4
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006270:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006280:	415b      	adcs	r3, r3
 8006282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006288:	4641      	mov	r1, r8
 800628a:	eb12 0a01 	adds.w	sl, r2, r1
 800628e:	4649      	mov	r1, r9
 8006290:	eb43 0b01 	adc.w	fp, r3, r1
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a8:	4692      	mov	sl, r2
 80062aa:	469b      	mov	fp, r3
 80062ac:	4643      	mov	r3, r8
 80062ae:	eb1a 0303 	adds.w	r3, sl, r3
 80062b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062b6:	464b      	mov	r3, r9
 80062b8:	eb4b 0303 	adc.w	r3, fp, r3
 80062bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062d4:	460b      	mov	r3, r1
 80062d6:	18db      	adds	r3, r3, r3
 80062d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80062da:	4613      	mov	r3, r2
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062ea:	f7f9 ff7f 	bl	80001ec <__aeabi_uldivmod>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	4b3b      	ldr	r3, [pc, #236]	@ (80063e4 <UART_SetConfig+0x2d4>)
 80062f6:	fba3 2301 	umull	r2, r3, r3, r1
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2264      	movs	r2, #100	@ 0x64
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	1acb      	subs	r3, r1, r3
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800630a:	4b36      	ldr	r3, [pc, #216]	@ (80063e4 <UART_SetConfig+0x2d4>)
 800630c:	fba3 2302 	umull	r2, r3, r3, r2
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006318:	441c      	add	r4, r3
 800631a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006324:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	1891      	adds	r1, r2, r2
 8006332:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006334:	415b      	adcs	r3, r3
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800633c:	4641      	mov	r1, r8
 800633e:	1851      	adds	r1, r2, r1
 8006340:	6339      	str	r1, [r7, #48]	@ 0x30
 8006342:	4649      	mov	r1, r9
 8006344:	414b      	adcs	r3, r1
 8006346:	637b      	str	r3, [r7, #52]	@ 0x34
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006354:	4659      	mov	r1, fp
 8006356:	00cb      	lsls	r3, r1, #3
 8006358:	4651      	mov	r1, sl
 800635a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800635e:	4651      	mov	r1, sl
 8006360:	00ca      	lsls	r2, r1, #3
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	4603      	mov	r3, r0
 8006368:	4642      	mov	r2, r8
 800636a:	189b      	adds	r3, r3, r2
 800636c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006370:	464b      	mov	r3, r9
 8006372:	460a      	mov	r2, r1
 8006374:	eb42 0303 	adc.w	r3, r2, r3
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006388:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800638c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006390:	460b      	mov	r3, r1
 8006392:	18db      	adds	r3, r3, r3
 8006394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006396:	4613      	mov	r3, r2
 8006398:	eb42 0303 	adc.w	r3, r2, r3
 800639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800639e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063a6:	f7f9 ff21 	bl	80001ec <__aeabi_uldivmod>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <UART_SetConfig+0x2d4>)
 80063b0:	fba3 1302 	umull	r1, r3, r3, r2
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	2164      	movs	r1, #100	@ 0x64
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	3332      	adds	r3, #50	@ 0x32
 80063c2:	4a08      	ldr	r2, [pc, #32]	@ (80063e4 <UART_SetConfig+0x2d4>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	f003 0207 	and.w	r2, r3, #7
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4422      	add	r2, r4
 80063d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063d8:	e106      	b.n	80065e8 <UART_SetConfig+0x4d8>
 80063da:	bf00      	nop
 80063dc:	40011000 	.word	0x40011000
 80063e0:	40011400 	.word	0x40011400
 80063e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063fa:	4642      	mov	r2, r8
 80063fc:	464b      	mov	r3, r9
 80063fe:	1891      	adds	r1, r2, r2
 8006400:	6239      	str	r1, [r7, #32]
 8006402:	415b      	adcs	r3, r3
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
 8006406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800640a:	4641      	mov	r1, r8
 800640c:	1854      	adds	r4, r2, r1
 800640e:	4649      	mov	r1, r9
 8006410:	eb43 0501 	adc.w	r5, r3, r1
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	00eb      	lsls	r3, r5, #3
 800641e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006422:	00e2      	lsls	r2, r4, #3
 8006424:	4614      	mov	r4, r2
 8006426:	461d      	mov	r5, r3
 8006428:	4643      	mov	r3, r8
 800642a:	18e3      	adds	r3, r4, r3
 800642c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006430:	464b      	mov	r3, r9
 8006432:	eb45 0303 	adc.w	r3, r5, r3
 8006436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006456:	4629      	mov	r1, r5
 8006458:	008b      	lsls	r3, r1, #2
 800645a:	4621      	mov	r1, r4
 800645c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006460:	4621      	mov	r1, r4
 8006462:	008a      	lsls	r2, r1, #2
 8006464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006468:	f7f9 fec0 	bl	80001ec <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4b60      	ldr	r3, [pc, #384]	@ (80065f4 <UART_SetConfig+0x4e4>)
 8006472:	fba3 2302 	umull	r2, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	011c      	lsls	r4, r3, #4
 800647a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	1891      	adds	r1, r2, r2
 8006492:	61b9      	str	r1, [r7, #24]
 8006494:	415b      	adcs	r3, r3
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800649c:	4641      	mov	r1, r8
 800649e:	1851      	adds	r1, r2, r1
 80064a0:	6139      	str	r1, [r7, #16]
 80064a2:	4649      	mov	r1, r9
 80064a4:	414b      	adcs	r3, r1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064b4:	4659      	mov	r1, fp
 80064b6:	00cb      	lsls	r3, r1, #3
 80064b8:	4651      	mov	r1, sl
 80064ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064be:	4651      	mov	r1, sl
 80064c0:	00ca      	lsls	r2, r1, #3
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	4642      	mov	r2, r8
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d0:	464b      	mov	r3, r9
 80064d2:	460a      	mov	r2, r1
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064f4:	4649      	mov	r1, r9
 80064f6:	008b      	lsls	r3, r1, #2
 80064f8:	4641      	mov	r1, r8
 80064fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064fe:	4641      	mov	r1, r8
 8006500:	008a      	lsls	r2, r1, #2
 8006502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006506:	f7f9 fe71 	bl	80001ec <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4611      	mov	r1, r2
 8006510:	4b38      	ldr	r3, [pc, #224]	@ (80065f4 <UART_SetConfig+0x4e4>)
 8006512:	fba3 2301 	umull	r2, r3, r3, r1
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	2264      	movs	r2, #100	@ 0x64
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	1acb      	subs	r3, r1, r3
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	3332      	adds	r3, #50	@ 0x32
 8006524:	4a33      	ldr	r2, [pc, #204]	@ (80065f4 <UART_SetConfig+0x4e4>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006530:	441c      	add	r4, r3
 8006532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006536:	2200      	movs	r2, #0
 8006538:	673b      	str	r3, [r7, #112]	@ 0x70
 800653a:	677a      	str	r2, [r7, #116]	@ 0x74
 800653c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006540:	4642      	mov	r2, r8
 8006542:	464b      	mov	r3, r9
 8006544:	1891      	adds	r1, r2, r2
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	415b      	adcs	r3, r3
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006550:	4641      	mov	r1, r8
 8006552:	1851      	adds	r1, r2, r1
 8006554:	6039      	str	r1, [r7, #0]
 8006556:	4649      	mov	r1, r9
 8006558:	414b      	adcs	r3, r1
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006568:	4659      	mov	r1, fp
 800656a:	00cb      	lsls	r3, r1, #3
 800656c:	4651      	mov	r1, sl
 800656e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006572:	4651      	mov	r1, sl
 8006574:	00ca      	lsls	r2, r1, #3
 8006576:	4610      	mov	r0, r2
 8006578:	4619      	mov	r1, r3
 800657a:	4603      	mov	r3, r0
 800657c:	4642      	mov	r2, r8
 800657e:	189b      	adds	r3, r3, r2
 8006580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006582:	464b      	mov	r3, r9
 8006584:	460a      	mov	r2, r1
 8006586:	eb42 0303 	adc.w	r3, r2, r3
 800658a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	663b      	str	r3, [r7, #96]	@ 0x60
 8006596:	667a      	str	r2, [r7, #100]	@ 0x64
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065a4:	4649      	mov	r1, r9
 80065a6:	008b      	lsls	r3, r1, #2
 80065a8:	4641      	mov	r1, r8
 80065aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ae:	4641      	mov	r1, r8
 80065b0:	008a      	lsls	r2, r1, #2
 80065b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065b6:	f7f9 fe19 	bl	80001ec <__aeabi_uldivmod>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <UART_SetConfig+0x4e4>)
 80065c0:	fba3 1302 	umull	r1, r3, r3, r2
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	2164      	movs	r1, #100	@ 0x64
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	3332      	adds	r3, #50	@ 0x32
 80065d2:	4a08      	ldr	r2, [pc, #32]	@ (80065f4 <UART_SetConfig+0x4e4>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4422      	add	r2, r4
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065ee:	46bd      	mov	sp, r7
 80065f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f4:	51eb851f 	.word	0x51eb851f

080065f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d123      	bne.n	8006652 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006612:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	6851      	ldr	r1, [r2, #4]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	6892      	ldr	r2, [r2, #8]
 800661e:	4311      	orrs	r1, r2
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68d2      	ldr	r2, [r2, #12]
 8006624:	4311      	orrs	r1, r2
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	6912      	ldr	r2, [r2, #16]
 800662a:	4311      	orrs	r1, r2
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	6952      	ldr	r2, [r2, #20]
 8006630:	4311      	orrs	r1, r2
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	6992      	ldr	r2, [r2, #24]
 8006636:	4311      	orrs	r1, r2
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	69d2      	ldr	r2, [r2, #28]
 800663c:	4311      	orrs	r1, r2
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	6a12      	ldr	r2, [r2, #32]
 8006642:	4311      	orrs	r1, r2
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006648:	430a      	orrs	r2, r1
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	e028      	b.n	80066a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	69d9      	ldr	r1, [r3, #28]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	4319      	orrs	r1, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	430b      	orrs	r3, r1
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006678:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	6851      	ldr	r1, [r2, #4]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	6892      	ldr	r2, [r2, #8]
 8006684:	4311      	orrs	r1, r2
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	68d2      	ldr	r2, [r2, #12]
 800668a:	4311      	orrs	r1, r2
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	6912      	ldr	r2, [r2, #16]
 8006690:	4311      	orrs	r1, r2
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	6952      	ldr	r2, [r2, #20]
 8006696:	4311      	orrs	r1, r2
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	6992      	ldr	r2, [r2, #24]
 800669c:	430a      	orrs	r2, r1
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d128      	bne.n	8006716 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1e59      	subs	r1, r3, #1
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	4319      	orrs	r1, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	4319      	orrs	r1, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	031b      	lsls	r3, r3, #12
 80066ee:	4319      	orrs	r1, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	4319      	orrs	r1, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	3b01      	subs	r3, #1
 8006700:	051b      	lsls	r3, r3, #20
 8006702:	4319      	orrs	r1, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	3b01      	subs	r3, #1
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	430b      	orrs	r3, r1
 800670e:	431a      	orrs	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	609a      	str	r2, [r3, #8]
 8006714:	e02f      	b.n	8006776 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800671e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	68d2      	ldr	r2, [r2, #12]
 8006726:	3a01      	subs	r2, #1
 8006728:	0311      	lsls	r1, r2, #12
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	6952      	ldr	r2, [r2, #20]
 800672e:	3a01      	subs	r2, #1
 8006730:	0512      	lsls	r2, r2, #20
 8006732:	430a      	orrs	r2, r1
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1e59      	subs	r1, r3, #1
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	3b01      	subs	r3, #1
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	4319      	orrs	r1, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	3b01      	subs	r3, #1
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	4319      	orrs	r1, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	3b01      	subs	r3, #1
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	4319      	orrs	r1, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	3b01      	subs	r3, #1
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	430b      	orrs	r3, r1
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	0d9b      	lsrs	r3, r3, #22
 800679a:	059b      	lsls	r3, r3, #22
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	6811      	ldr	r1, [r2, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	6852      	ldr	r2, [r2, #4]
 80067a4:	4311      	orrs	r1, r2
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	6892      	ldr	r2, [r2, #8]
 80067aa:	3a01      	subs	r2, #1
 80067ac:	0152      	lsls	r2, r2, #5
 80067ae:	4311      	orrs	r1, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	68d2      	ldr	r2, [r2, #12]
 80067b4:	0252      	lsls	r2, r2, #9
 80067b6:	430a      	orrs	r2, r1
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80067be:	f7fc fa4f 	bl	8002c60 <HAL_GetTick>
 80067c2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80067c4:	e010      	b.n	80067e8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067cc:	d00c      	beq.n	80067e8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d007      	beq.n	80067e4 <FMC_SDRAM_SendCommand+0x60>
 80067d4:	f7fc fa44 	bl	8002c60 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d201      	bcs.n	80067e8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e006      	b.n	80067f6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d0e8      	beq.n	80067c6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006810:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	0052      	lsls	r2, r2, #1
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <memset>:
 800682c:	4402      	add	r2, r0
 800682e:	4603      	mov	r3, r0
 8006830:	4293      	cmp	r3, r2
 8006832:	d100      	bne.n	8006836 <memset+0xa>
 8006834:	4770      	bx	lr
 8006836:	f803 1b01 	strb.w	r1, [r3], #1
 800683a:	e7f9      	b.n	8006830 <memset+0x4>

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4d0d      	ldr	r5, [pc, #52]	@ (8006874 <__libc_init_array+0x38>)
 8006840:	4c0d      	ldr	r4, [pc, #52]	@ (8006878 <__libc_init_array+0x3c>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	2600      	movs	r6, #0
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	4d0b      	ldr	r5, [pc, #44]	@ (800687c <__libc_init_array+0x40>)
 800684e:	4c0c      	ldr	r4, [pc, #48]	@ (8006880 <__libc_init_array+0x44>)
 8006850:	f000 f818 	bl	8006884 <_init>
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	2600      	movs	r6, #0
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	080083d4 	.word	0x080083d4
 8006878:	080083d4 	.word	0x080083d4
 800687c:	080083d4 	.word	0x080083d4
 8006880:	080083d8 	.word	0x080083d8

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
