
SRLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc74  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  0800be28  0800be28  0000ce28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd64  0800dd64  0000f5fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd64  0800dd64  0000ed64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd6c  0800dd6c  0000f5fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd6c  0800dd6c  0000ed6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd70  0800dd70  0000ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005fc  20000000  0800dd74  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f5fc  2**0
                  CONTENTS
 10 .bss          0000062c  200005fc  200005fc  0000f5fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c28  20000c28  0000f5fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f5fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f012  00000000  00000000  0000f62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b98  00000000  00000000  0002e63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  000331d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ca  00000000  00000000  00034e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b4e  00000000  00000000  000363ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002243d  00000000  00000000  0005ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebe0a  00000000  00000000  00082355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e15f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008678  00000000  00000000  0016e1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0017681c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200005fc 	.word	0x200005fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800be0c 	.word	0x0800be0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000600 	.word	0x20000600
 80001ec:	0800be0c 	.word	0x0800be0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <ADXL345_Init>:
 *      Author: Mati
 */

#include "acc_ADXL345.h"

void ADXL345_Init(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    uint8_t id;
    ADXL345_Read(ADXL345_DEVID_REG, &id, 1);
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f881 	bl	80010a8 <ADXL345_Read>
    if (id != 0x8)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d001      	beq.n	8000fb0 <ADXL345_Init+0x1c>
    {
        // Handle error
        while (1);
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <ADXL345_Init+0x18>
    }

    ADXL345_Write(ADXL345_POWER_CTL, 0x08);      // Set measure bit
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	202d      	movs	r0, #45	@ 0x2d
 8000fb4:	f000 f85c 	bl	8001070 <ADXL345_Write>
    ADXL345_Write(ADXL345_DATA_FORMAT, 0x00);    // Set range to ±2g
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2031      	movs	r0, #49	@ 0x31
 8000fbc:	f000 f858 	bl	8001070 <ADXL345_Write>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <ADXL345_ReadAccel>:

void ADXL345_ReadAccel(float* x, float* y, float* z){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    int16_t rawX, rawY, rawZ;
    float sensitivity = 0.004f; // 4 mg/LSB
 8000fd4:	4b25      	ldr	r3, [pc, #148]	@ (800106c <ADXL345_ReadAccel+0xa4>)
 8000fd6:	61fb      	str	r3, [r7, #28]

    ADXL345_Read(ADXL345_DATAX0, buffer, 6);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2206      	movs	r2, #6
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2032      	movs	r0, #50	@ 0x32
 8000fe2:	f000 f861 	bl	80010a8 <ADXL345_Read>

    rawX = (int16_t)(buffer[1] << 8 | buffer[0]);
 8000fe6:	7c7b      	ldrb	r3, [r7, #17]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	7c3b      	ldrb	r3, [r7, #16]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	837b      	strh	r3, [r7, #26]
    rawY = (int16_t)(buffer[3] << 8 | buffer[2]);
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7cbb      	ldrb	r3, [r7, #18]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	833b      	strh	r3, [r7, #24]
    rawZ = (int16_t)(buffer[5] << 8 | buffer[4]);
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	b21b      	sxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7d3b      	ldrb	r3, [r7, #20]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	82fb      	strh	r3, [r7, #22]

    *x = rawX * sensitivity;
 8001016:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	edd7 7a07 	vldr	s15, [r7, #28]
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	edc3 7a00 	vstr	s15, [r3]
    *y = rawY * sensitivity;
 8001030:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	edc3 7a00 	vstr	s15, [r3]
    *z = rawZ * sensitivity;
 800104a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001056:	edd7 7a07 	vldr	s15, [r7, #28]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edc3 7a00 	vstr	s15, [r3]
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	3b83126f 	.word	0x3b83126f

08001070 <ADXL345_Write>:

void ADXL345_Write(uint8_t reg, uint8_t data){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, ADXL345_ADDR, reg, 1, &data, 1, HAL_MAX_DELAY);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	b29a      	uxth	r2, r3
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	1dbb      	adds	r3, r7, #6
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	21a6      	movs	r1, #166	@ 0xa6
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <ADXL345_Write+0x34>)
 8001098:	f004 f978 	bl	800538c <HAL_I2C_Mem_Write>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000690 	.word	0x20000690

080010a8 <ADXL345_Read>:

void ADXL345_Read(uint8_t reg, uint8_t* buffer, uint8_t length){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, ADXL345_ADDR, reg, 1, buffer, length, HAL_MAX_DELAY);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	21a6      	movs	r1, #166	@ 0xa6
 80010d0:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <ADXL345_Read+0x38>)
 80010d2:	f004 fa55 	bl	8005580 <HAL_I2C_Mem_Read>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000690 	.word	0x20000690

080010e4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 80010ea:	4a16      	ldr	r2, [pc, #88]	@ (8001144 <MX_DMA2D_Init+0x60>)
 80010ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 8001108:	2202      	movs	r2, #2
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001118:	4809      	ldr	r0, [pc, #36]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 800111a:	f003 fa63 	bl	80045e4 <HAL_DMA2D_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001124:	f001 fa34 	bl	8002590 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001128:	2101      	movs	r1, #1
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_DMA2D_Init+0x5c>)
 800112c:	f003 fbb8 	bl	80048a0 <HAL_DMA2D_ConfigLayer>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001136:	f001 fa2b 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000618 	.word	0x20000618
 8001144:	4002b000 	.word	0x4002b000

08001148 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_DMA2D_MspInit+0x3c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10d      	bne.n	8001176 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_DMA2D_MspInit+0x40>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <HAL_DMA2D_MspInit+0x40>)
 8001164:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <HAL_DMA2D_MspInit+0x40>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	4002b000 	.word	0x4002b000
 8001188:	40023800 	.word	0x40023800

0800118c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <MX_FMC_Init+0x94>)
 80011a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <MX_FMC_Init+0x98>)
 80011a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_FMC_Init+0x94>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_FMC_Init+0x94>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_FMC_Init+0x94>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_FMC_Init+0x94>)
 80011be:	2210      	movs	r2, #16
 80011c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_FMC_Init+0x94>)
 80011c4:	2240      	movs	r2, #64	@ 0x40
 80011c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_FMC_Init+0x94>)
 80011ca:	2280      	movs	r2, #128	@ 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_FMC_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_FMC_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_FMC_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_FMC_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80011e6:	2310      	movs	r3, #16
 80011e8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80011ea:	2310      	movs	r3, #16
 80011ec:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80011ee:	2310      	movs	r3, #16
 80011f0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80011f2:	2310      	movs	r3, #16
 80011f4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80011fa:	2310      	movs	r3, #16
 80011fc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80011fe:	2310      	movs	r3, #16
 8001200:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	@ (8001220 <MX_FMC_Init+0x94>)
 8001208:	f006 f93c 	bl	8007484 <HAL_SDRAM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001212:	f001 f9bd 	bl	8002590 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000658 	.word	0x20000658
 8001224:	a0000140 	.word	0xa0000140

08001228 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800123c:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_FMC_MspInit+0x104>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d16f      	bne.n	8001324 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_FMC_MspInit+0x104>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b38      	ldr	r3, [pc, #224]	@ (8001330 <HAL_FMC_MspInit+0x108>)
 8001250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001252:	4a37      	ldr	r2, [pc, #220]	@ (8001330 <HAL_FMC_MspInit+0x108>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6393      	str	r3, [r2, #56]	@ 0x38
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <HAL_FMC_MspInit+0x108>)
 800125c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001266:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800126a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001278:	230c      	movs	r3, #12
 800127a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	482c      	ldr	r0, [pc, #176]	@ (8001334 <HAL_FMC_MspInit+0x10c>)
 8001282:	f003 fc3b 	bl	8004afc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001286:	2301      	movs	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001296:	230c      	movs	r3, #12
 8001298:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4826      	ldr	r0, [pc, #152]	@ (8001338 <HAL_FMC_MspInit+0x110>)
 80012a0:	f003 fc2c 	bl	8004afc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80012a4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80012a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b6:	230c      	movs	r3, #12
 80012b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	481f      	ldr	r0, [pc, #124]	@ (800133c <HAL_FMC_MspInit+0x114>)
 80012c0:	f003 fc1c 	bl	8004afc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012c4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80012c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d6:	230c      	movs	r3, #12
 80012d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4818      	ldr	r0, [pc, #96]	@ (8001340 <HAL_FMC_MspInit+0x118>)
 80012e0:	f003 fc0c 	bl	8004afc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012e4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80012e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4811      	ldr	r0, [pc, #68]	@ (8001344 <HAL_FMC_MspInit+0x11c>)
 8001300:	f003 fbfc 	bl	8004afc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001304:	2360      	movs	r3, #96	@ 0x60
 8001306:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001314:	230c      	movs	r3, #12
 8001316:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	480a      	ldr	r0, [pc, #40]	@ (8001348 <HAL_FMC_MspInit+0x120>)
 800131e:	f003 fbed 	bl	8004afc <HAL_GPIO_Init>
 8001322:	e000      	b.n	8001326 <HAL_FMC_MspInit+0xfe>
    return;
 8001324:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000068c 	.word	0x2000068c
 8001330:	40023800 	.word	0x40023800
 8001334:	40021400 	.word	0x40021400
 8001338:	40020800 	.word	0x40020800
 800133c:	40021800 	.word	0x40021800
 8001340:	40021000 	.word	0x40021000
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001354:	f7ff ff68 	bl	8001228 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	@ 0x38
 8001364:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
 800137a:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <MX_GPIO_Init+0x140>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a48      	ldr	r2, [pc, #288]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001380:	f043 0320 	orr.w	r3, r3, #32
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b46      	ldr	r3, [pc, #280]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	623b      	str	r3, [r7, #32]
 8001390:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	4b42      	ldr	r3, [pc, #264]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a41      	ldr	r2, [pc, #260]	@ (80014a0 <MX_GPIO_Init+0x140>)
 800139c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a3a      	ldr	r2, [pc, #232]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b38      	ldr	r3, [pc, #224]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a33      	ldr	r2, [pc, #204]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a2c      	ldr	r2, [pc, #176]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <MX_GPIO_Init+0x140>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a25      	ldr	r2, [pc, #148]	@ (80014a0 <MX_GPIO_Init+0x140>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <MX_GPIO_Init+0x140>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <MX_GPIO_Init+0x140>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800145c:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_GPIO_Init+0x144>)
 800145e:	f003 fe1d 	bl	800509c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <MX_GPIO_Init+0x148>)
 8001476:	f003 fb41 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_GPIO_Init+0x144>)
 8001494:	f003 fb32 	bl	8004afc <HAL_GPIO_Init>

}
 8001498:	bf00      	nop
 800149a:	3738      	adds	r7, #56	@ 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021800 	.word	0x40021800
 80014a8:	40020000 	.word	0x40020000

080014ac <Gyro_Init>:
#include <stdio.h>
#include "gyro.h"
#include "spi.h"

// Gyroscope initialization
void Gyro_Init(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    // CTRL_REG1: 0x0F = Normal mode, all axes enabled, 95 Hz ODR
    Gyro_WriteReg(0x20, 0x0F);
 80014b0:	210f      	movs	r1, #15
 80014b2:	2020      	movs	r0, #32
 80014b4:	f000 f806 	bl	80014c4 <Gyro_WriteReg>
    // CTRL_REG4: 0x20 = 2000 dps full scale
    Gyro_WriteReg(0x23, 0x20);
 80014b8:	2120      	movs	r1, #32
 80014ba:	2023      	movs	r0, #35	@ 0x23
 80014bc:	f000 f802 	bl	80014c4 <Gyro_WriteReg>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Gyro_WriteReg>:

// Write to gyroscope register
void Gyro_WriteReg(uint8_t reg, uint8_t data){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	733b      	strb	r3, [r7, #12]
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	4809      	ldr	r0, [pc, #36]	@ (8001508 <Gyro_WriteReg+0x44>)
 80014e2:	f003 fddb 	bl	800509c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, tx, 2, HAL_MAX_DELAY);
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ee:	2202      	movs	r2, #2
 80014f0:	4806      	ldr	r0, [pc, #24]	@ (800150c <Gyro_WriteReg+0x48>)
 80014f2:	f006 f909 	bl	8007708 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2102      	movs	r1, #2
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <Gyro_WriteReg+0x44>)
 80014fc:	f003 fdce 	bl	800509c <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020800 	.word	0x40020800
 800150c:	20000798 	.word	0x20000798

08001510 <Gyro_ReadRegs>:
    HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, GPIO_PIN_SET);
    return rx;
}

// Read multiple bytes from gyroscope
void Gyro_ReadRegs(uint8_t reg, uint8_t* buffer, uint8_t length){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx = reg | 0xC0; // Set auto-increment and read bits
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2102      	movs	r1, #2
 800152e:	480e      	ldr	r0, [pc, #56]	@ (8001568 <Gyro_ReadRegs+0x58>)
 8001530:	f003 fdb4 	bl	800509c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, &tx, 1, HAL_MAX_DELAY);
 8001534:	f107 010f 	add.w	r1, r7, #15
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153c:	2201      	movs	r2, #1
 800153e:	480b      	ldr	r0, [pc, #44]	@ (800156c <Gyro_ReadRegs+0x5c>)
 8001540:	f006 f8e2 	bl	8007708 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi5, buffer, length, HAL_MAX_DELAY);
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	4807      	ldr	r0, [pc, #28]	@ (800156c <Gyro_ReadRegs+0x5c>)
 8001550:	f006 fa1e 	bl	8007990 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2102      	movs	r1, #2
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <Gyro_ReadRegs+0x58>)
 800155a:	f003 fd9f 	bl	800509c <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020800 	.word	0x40020800
 800156c:	20000798 	.word	0x20000798

08001570 <Gyro_ReadData>:

// Read and convert gyroscope data
void Gyro_ReadData(float* x, float* y, float* z){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    int16_t rawX, rawY, rawZ;
    float sensitivity = 70.0f; // Sensitivity for 2000 dps full scale
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <Gyro_ReadData+0xbc>)
 800157e:	61fb      	str	r3, [r7, #28]

    Gyro_ReadRegs(0x28, buffer, 6);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2206      	movs	r2, #6
 8001586:	4619      	mov	r1, r3
 8001588:	2028      	movs	r0, #40	@ 0x28
 800158a:	f7ff ffc1 	bl	8001510 <Gyro_ReadRegs>

    rawX = (int16_t)(buffer[1] << 8 | buffer[0]);
 800158e:	7c7b      	ldrb	r3, [r7, #17]
 8001590:	b21b      	sxth	r3, r3
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	7c3b      	ldrb	r3, [r7, #16]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	837b      	strh	r3, [r7, #26]
    rawY = (int16_t)(buffer[3] << 8 | buffer[2]);
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	7cbb      	ldrb	r3, [r7, #18]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	833b      	strh	r3, [r7, #24]
    rawZ = (int16_t)(buffer[5] << 8 | buffer[4]);
 80015ae:	7d7b      	ldrb	r3, [r7, #21]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	7d3b      	ldrb	r3, [r7, #20]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	82fb      	strh	r3, [r7, #22]

    // LSB * mg/LSB / 1000 = g
    *x = rawX * sensitivity / 1000.0f;
 80015be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80015ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d2:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001630 <Gyro_ReadData+0xc0>
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	edc3 7a00 	vstr	s15, [r3]
    *y = rawY * sensitivity / 1000.0f;
 80015e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001630 <Gyro_ReadData+0xc0>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	edc3 7a00 	vstr	s15, [r3]
    *z = rawZ * sensitivity / 1000.0f;
 8001602:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001616:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001630 <Gyro_ReadData+0xc0>
 800161a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	edc3 7a00 	vstr	s15, [r3]
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	428c0000 	.word	0x428c0000
 8001630:	447a0000 	.word	0x447a0000

08001634 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_I2C3_Init+0x74>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <MX_I2C3_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001640:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <MX_I2C3_Init+0x7c>)
 8001642:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_I2C3_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001656:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_I2C3_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_I2C3_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001672:	f003 fd47 	bl	8005104 <HAL_I2C_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800167c:	f000 ff88 	bl	8002590 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001684:	f004 fd62 	bl	800614c <HAL_I2CEx_ConfigAnalogFilter>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800168e:	f000 ff7f 	bl	8002590 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_I2C3_Init+0x74>)
 8001696:	f004 fd95 	bl	80061c4 <HAL_I2CEx_ConfigDigitalFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80016a0:	f000 ff76 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000690 	.word	0x20000690
 80016ac:	40005c00 	.word	0x40005c00
 80016b0:	000186a0 	.word	0x000186a0

080016b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a29      	ldr	r2, [pc, #164]	@ (8001778 <HAL_I2C_MspInit+0xc4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d14b      	bne.n	800176e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b28      	ldr	r3, [pc, #160]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a27      	ldr	r2, [pc, #156]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a20      	ldr	r2, [pc, #128]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800170e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4815      	ldr	r0, [pc, #84]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800172c:	f003 f9e6 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <HAL_I2C_MspInit+0xd0>)
 800174e:	f003 f9d5 	bl	8004afc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 800175c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005c00 	.word	0x40005c00
 800177c:	40023800 	.word	0x40023800
 8001780:	40020800 	.word	0x40020800
 8001784:	40020000 	.word	0x40020000

08001788 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b09a      	sub	sp, #104	@ 0x68
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800178e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001792:	2234      	movs	r2, #52	@ 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f008 fa71 	bl	8009c7e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2234      	movs	r2, #52	@ 0x34
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fa6b 	bl	8009c7e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017aa:	4a4e      	ldr	r2, [pc, #312]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017ac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017ae:	4b4c      	ldr	r3, [pc, #304]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017b4:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017c0:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80017cc:	4b44      	ldr	r3, [pc, #272]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017ce:	2203      	movs	r2, #3
 80017d0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80017d2:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017d4:	220e      	movs	r2, #14
 80017d6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80017d8:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017da:	2205      	movs	r2, #5
 80017dc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80017de:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017e0:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017e8:	22f5      	movs	r2, #245	@ 0xf5
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 80017ec:	4b3c      	ldr	r3, [pc, #240]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017ee:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017f6:	22f7      	movs	r2, #247	@ 0xf7
 80017f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017fa:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <MX_LTDC_Init+0x158>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800180a:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <MX_LTDC_Init+0x158>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001812:	4833      	ldr	r0, [pc, #204]	@ (80018e0 <MX_LTDC_Init+0x158>)
 8001814:	f004 fd15 	bl	8006242 <HAL_LTDC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 800181e:	f000 feb7 	bl	8002590 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001832:	2300      	movs	r3, #0
 8001834:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800183e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001842:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001844:	2305      	movs	r3, #5
 8001846:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001866:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <MX_LTDC_Init+0x158>)
 8001870:	f004 fd84 	bl	800637c <HAL_LTDC_ConfigLayer>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 800187a:	f000 fe89 	bl	8002590 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800189a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800189e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018a0:	2305      	movs	r3, #5
 80018a2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_LTDC_Init+0x158>)
 80018ca:	f004 fd57 	bl	800637c <HAL_LTDC_ConfigLayer>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 80018d4:	f000 fe5c 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3768      	adds	r7, #104	@ 0x68
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200006e4 	.word	0x200006e4
 80018e4:	40016800 	.word	0x40016800

080018e8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	@ 0x68
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	2230      	movs	r2, #48	@ 0x30
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f008 f9b8 	bl	8009c7e <memset>
  if(ltdcHandle->Instance==LTDC)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a81      	ldr	r2, [pc, #516]	@ (8001b18 <HAL_LTDC_MspInit+0x230>)
 8001914:	4293      	cmp	r3, r2
 8001916:	f040 80fa 	bne.w	8001b0e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800191a:	2308      	movs	r3, #8
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800191e:	2364      	movs	r3, #100	@ 0x64
 8001920:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001922:	2305      	movs	r3, #5
 8001924:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001926:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800192a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001930:	4618      	mov	r0, r3
 8001932:	f005 fbe7 	bl	8007104 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800193c:	f000 fe28 	bl	8002590 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	4b75      	ldr	r3, [pc, #468]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 8001946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001948:	4a74      	ldr	r2, [pc, #464]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 800194a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800194e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001950:	4b72      	ldr	r3, [pc, #456]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	4b6e      	ldr	r3, [pc, #440]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	4a6d      	ldr	r2, [pc, #436]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	6313      	str	r3, [r2, #48]	@ 0x30
 800196c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	4b67      	ldr	r3, [pc, #412]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a66      	ldr	r2, [pc, #408]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b64      	ldr	r3, [pc, #400]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	4b60      	ldr	r3, [pc, #384]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4a5f      	ldr	r2, [pc, #380]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	4b59      	ldr	r3, [pc, #356]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b8:	4a58      	ldr	r2, [pc, #352]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019be:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c0:	4b56      	ldr	r3, [pc, #344]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	4b52      	ldr	r3, [pc, #328]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	4a51      	ldr	r2, [pc, #324]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6313      	str	r3, [r2, #48]	@ 0x30
 80019dc:	4b4f      	ldr	r3, [pc, #316]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	4b4b      	ldr	r3, [pc, #300]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	4a4a      	ldr	r2, [pc, #296]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f8:	4b48      	ldr	r3, [pc, #288]	@ (8001b1c <HAL_LTDC_MspInit+0x234>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a16:	230e      	movs	r3, #14
 8001a18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a1e:	4619      	mov	r1, r3
 8001a20:	483f      	ldr	r0, [pc, #252]	@ (8001b20 <HAL_LTDC_MspInit+0x238>)
 8001a22:	f003 f86b 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001a26:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001a2a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a38:	230e      	movs	r3, #14
 8001a3a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a40:	4619      	mov	r1, r3
 8001a42:	4838      	ldr	r0, [pc, #224]	@ (8001b24 <HAL_LTDC_MspInit+0x23c>)
 8001a44:	f003 f85a 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a58:	2309      	movs	r3, #9
 8001a5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a60:	4619      	mov	r1, r3
 8001a62:	4831      	ldr	r0, [pc, #196]	@ (8001b28 <HAL_LTDC_MspInit+0x240>)
 8001a64:	f003 f84a 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001a68:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001a6c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a7a:	230e      	movs	r3, #14
 8001a7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a82:	4619      	mov	r1, r3
 8001a84:	4828      	ldr	r0, [pc, #160]	@ (8001b28 <HAL_LTDC_MspInit+0x240>)
 8001a86:	f003 f839 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001a8a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001a8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a9c:	230e      	movs	r3, #14
 8001a9e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4821      	ldr	r0, [pc, #132]	@ (8001b2c <HAL_LTDC_MspInit+0x244>)
 8001aa8:	f003 f828 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aac:	23c0      	movs	r3, #192	@ 0xc0
 8001aae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001abc:	230e      	movs	r3, #14
 8001abe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481a      	ldr	r0, [pc, #104]	@ (8001b30 <HAL_LTDC_MspInit+0x248>)
 8001ac8:	f003 f818 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001acc:	2308      	movs	r3, #8
 8001ace:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001adc:	230e      	movs	r3, #14
 8001ade:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4813      	ldr	r0, [pc, #76]	@ (8001b34 <HAL_LTDC_MspInit+0x24c>)
 8001ae8:	f003 f808 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001aec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001af0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001afe:	2309      	movs	r3, #9
 8001b00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b06:	4619      	mov	r1, r3
 8001b08:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <HAL_LTDC_MspInit+0x244>)
 8001b0a:	f002 fff7 	bl	8004afc <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3768      	adds	r7, #104	@ 0x68
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40016800 	.word	0x40016800
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40021400 	.word	0x40021400
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020c00 	.word	0x40020c00

08001b38 <update_ball_tile_position>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void update_ball_tile_position(Ball *ball) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    ball->tile_x = (uint8_t)(ball->x_px / CELL_SIZE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b52:	edc7 7a00 	vstr	s15, [r7]
 8001b56:	783b      	ldrb	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	721a      	strb	r2, [r3, #8]
    ball->tile_y = (uint8_t)(ball->y_px / CELL_SIZE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b64:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b70:	edc7 7a00 	vstr	s15, [r7]
 8001b74:	783b      	ldrb	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	725a      	strb	r2, [r3, #9]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <draw_cell>:
void draw_cell(uint8_t tile_x, uint8_t tile_y, uint32_t color)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	603a      	str	r2, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	460b      	mov	r3, r1
 8001b96:	71bb      	strb	r3, [r7, #6]
    BSP_LCD_SetTextColor(color);
 8001b98:	6838      	ldr	r0, [r7, #0]
 8001b9a:	f001 fc29 	bl	80033f0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	b298      	uxth	r0, r3
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	2314      	movs	r3, #20
 8001bbc:	2214      	movs	r2, #20
 8001bbe:	f001 fd89 	bl	80036d4 <BSP_LCD_FillRect>
        MAZE_ORIGIN_X + tile_x * CELL_SIZE,
        MAZE_ORIGIN_Y + tile_y * CELL_SIZE,
        CELL_SIZE,
        CELL_SIZE
    );
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <draw_ballSprite>:
void draw_ballSprite(float x_px, float y_px)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bd6:	edc7 0a00 	vstr	s1, [r7]
	int top_left_x = (int)(x_px - CELL_SIZE / 2);
 8001bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bde:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bea:	ee17 3a90 	vmov	r3, s15
 8001bee:	60fb      	str	r3, [r7, #12]
	int top_left_y = (int)(y_px - CELL_SIZE / 2);
 8001bf0:	edd7 7a00 	vldr	s15, [r7]
 8001bf4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c00:	ee17 3a90 	vmov	r3, s15
 8001c04:	60bb      	str	r3, [r7, #8]

	for (int py = 0; py < CELL_SIZE; py++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e028      	b.n	8001c5e <draw_ballSprite+0x92>
		for (int px = 0; px < CELL_SIZE; px++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e01f      	b.n	8001c52 <draw_ballSprite+0x86>
			if (ballSprite[py][px] == 1) {
 8001c12:	4917      	ldr	r1, [pc, #92]	@ (8001c70 <draw_ballSprite+0xa4>)
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	18ca      	adds	r2, r1, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d110      	bne.n	8001c4c <draw_ballSprite+0x80>
				BSP_LCD_DrawPixel(top_left_x + px, top_left_y + py, LCD_COLOR_YELLOW);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b298      	uxth	r0, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 8001c46:	4619      	mov	r1, r3
 8001c48:	f001 fe84 	bl	8003954 <BSP_LCD_DrawPixel>
		for (int px = 0; px < CELL_SIZE; px++) {
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b13      	cmp	r3, #19
 8001c56:	dddc      	ble.n	8001c12 <draw_ballSprite+0x46>
	for (int py = 0; py < CELL_SIZE; py++) {
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b13      	cmp	r3, #19
 8001c62:	ddd3      	ble.n	8001c0c <draw_ballSprite+0x40>
	        }
	    }
	}
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000240 	.word	0x20000240

08001c74 <draw_maze>:
void draw_maze(const uint8_t maze_data[MAZE_HEIGHT][MAZE_WIDTH])
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	for (int y = 0; y < MAZE_HEIGHT; y++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e03d      	b.n	8001cfe <draw_maze+0x8a>
	        for (int x = 0; x < MAZE_WIDTH; x++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e034      	b.n	8001cf2 <draw_maze+0x7e>
	        	uint32_t color;

	        	switch (maze_data[y][x]) {
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	441a      	add	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d818      	bhi.n	8001cd4 <draw_maze+0x60>
 8001ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <draw_maze+0x34>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cc1 	.word	0x08001cc1
 8001cb0:	08001cc7 	.word	0x08001cc7
 8001cb4:	08001ccf 	.word	0x08001ccf
	        	case 0:  color = LCD_COLOR_BLACK; break;
 8001cb8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e00d      	b.n	8001cdc <draw_maze+0x68>
	        	case 1:  color = LCD_COLOR_DARKBLUE; break;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <draw_maze+0x9c>)
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e00a      	b.n	8001cdc <draw_maze+0x68>
	        	case 2:  color = LCD_COLOR_GREEN; break;
 8001cc6:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e006      	b.n	8001cdc <draw_maze+0x68>
	        	case 3:  color = LCD_COLOR_RED; break;
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <draw_maze+0xa0>)
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e003      	b.n	8001cdc <draw_maze+0x68>
	        	default: color = LCD_COLOR_WHITE; break;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	bf00      	nop
	        	}

	        	draw_cell(x, y, color);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	b2d1      	uxtb	r1, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff4e 	bl	8001b88 <draw_cell>
	        for (int x = 0; x < MAZE_WIDTH; x++) {
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b0b      	cmp	r3, #11
 8001cf6:	ddc7      	ble.n	8001c88 <draw_maze+0x14>
	for (int y = 0; y < MAZE_HEIGHT; y++) {
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	ddbe      	ble.n	8001c82 <draw_maze+0xe>
	        }
	    }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	ff000080 	.word	0xff000080
 8001d14:	ffff0000 	.word	0xffff0000

08001d18 <wait_for_user_button>:

void wait_for_user_button(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
 8001d1c:	bf00      	nop
 8001d1e:	2101      	movs	r1, #1
 8001d20:	480a      	ldr	r0, [pc, #40]	@ (8001d4c <wait_for_user_button+0x34>)
 8001d22:	f003 f9a3 	bl	800506c <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d0f8      	beq.n	8001d1e <wait_for_user_button+0x6>
    HAL_Delay(200);
 8001d2c:	20c8      	movs	r0, #200	@ 0xc8
 8001d2e:	f002 f965 	bl	8003ffc <HAL_Delay>
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);
 8001d32:	bf00      	nop
 8001d34:	2101      	movs	r1, #1
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <wait_for_user_button+0x34>)
 8001d38:	f003 f998 	bl	800506c <HAL_GPIO_ReadPin>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f8      	beq.n	8001d34 <wait_for_user_button+0x1c>
    HAL_Delay(200);
 8001d42:	20c8      	movs	r0, #200	@ 0xc8
 8001d44:	f002 f95a 	bl	8003ffc <HAL_Delay>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020000 	.word	0x40020000

08001d50 <reset_ball_position>:

void reset_ball_position(Ball *ball) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    ball->x_px = 1 * CELL_SIZE + CELL_SIZE / 2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <reset_ball_position+0x24>)
 8001d5c:	601a      	str	r2, [r3, #0]
    ball->y_px = 1 * CELL_SIZE + CELL_SIZE / 2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <reset_ball_position+0x24>)
 8001d62:	605a      	str	r2, [r3, #4]
    update_ball_tile_position(ball);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fee7 	bl	8001b38 <update_ball_tile_position>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	41f00000 	.word	0x41f00000

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d7c:	ed2d 8b02 	vpush	{d8}
 8001d80:	b09c      	sub	sp, #112	@ 0x70
 8001d82:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d84:	f002 f8c8 	bl	8003f18 <HAL_Init>

  /* USER CODE BEGIN Init */
  Gyro_Init();
 8001d88:	f7ff fb90 	bl	80014ac <Gyro_Init>
  ADXL345_Init();
 8001d8c:	f7ff f902 	bl	8000f94 <ADXL345_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d90:	f000 fb1c 	bl	80023cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d94:	f7ff fae4 	bl	8001360 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001d98:	f7ff f9a4 	bl	80010e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001d9c:	f7ff f9f6 	bl	800118c <MX_FMC_Init>
  MX_I2C3_Init();
 8001da0:	f7ff fc48 	bl	8001634 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001da4:	f7ff fcf0 	bl	8001788 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001da8:	f000 fbf8 	bl	800259c <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001dac:	f000 fe34 	bl	8002a18 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001db0:	f000 fdc0 	bl	8002934 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001db4:	f001 fa26 	bl	8003204 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8001db8:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f001 faa3 	bl	8003308 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f001 fb04 	bl	80033d0 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001dc8:	f001 fcde 	bl	8003788 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001dcc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001dd0:	f001 fb56 	bl	8003480 <BSP_LCD_Clear>


  update_ball_tile_position(&ball);
 8001dd4:	48b0      	ldr	r0, [pc, #704]	@ (8002098 <main+0x320>)
 8001dd6:	f7ff feaf 	bl	8001b38 <update_ball_tile_position>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  GameState currentGameState = GAME_RUNNING;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  uint8_t currTile = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint8_t currLevel = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e



  float sensordata[6]; //0 gyro_x, 1 gyro_y, 2 gyro_z, 3 acc_x, 4 acc_y, 5 acc_z
  float roll=0, pitch=0;
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	657b      	str	r3, [r7, #84]	@ 0x54
  float acc_roll, acc_pitch, alpha = 0.98f;
 8001df8:	4ba8      	ldr	r3, [pc, #672]	@ (800209c <main+0x324>)
 8001dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  float dt = 0.1f; // 100ms loop
 8001dfc:	4ba8      	ldr	r3, [pc, #672]	@ (80020a0 <main+0x328>)
 8001dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  float* gyro_bias; gyro_bias = Gyro_CountBias(sensordata);   // kompensacja odchyleń żyro
 8001e00:	463b      	mov	r3, r7
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fb54 	bl	80024b0 <Gyro_CountBias>
 8001e08:	6438      	str	r0, [r7, #64]	@ 0x40

  uint32_t lastTick = HAL_GetTick();
 8001e0a:	f002 f8eb 	bl	8003fe4 <HAL_GetTick>
 8001e0e:	6538      	str	r0, [r7, #80]	@ 0x50

  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e14:	48a3      	ldr	r0, [pc, #652]	@ (80020a4 <main+0x32c>)
 8001e16:	f003 f95a 	bl	80050ce <HAL_GPIO_TogglePin>
//	  HAL_Delay(17);


	  uint32_t now = HAL_GetTick();
 8001e1a:	f002 f8e3 	bl	8003fe4 <HAL_GetTick>
 8001e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  dt = (now - lastTick) / 1000.0f; // in seconds
 8001e20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e2e:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80020a8 <main+0x330>
 8001e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e36:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	  lastTick = now;
 8001e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e3c:	653b      	str	r3, [r7, #80]	@ 0x50

	  Gyro_ReadData(&gyro_x, &gyro_y, &gyro_z);
 8001e3e:	463b      	mov	r3, r7
 8001e40:	f103 0208 	add.w	r2, r3, #8
 8001e44:	463b      	mov	r3, r7
 8001e46:	1d19      	adds	r1, r3, #4
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fb90 	bl	8001570 <Gyro_ReadData>
	  ADXL345_ReadAccel(&acc_x, &acc_y, &acc_z);
 8001e50:	463b      	mov	r3, r7
 8001e52:	f103 0214 	add.w	r2, r3, #20
 8001e56:	463b      	mov	r3, r7
 8001e58:	f103 0110 	add.w	r1, r3, #16
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	330c      	adds	r3, #12
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f8b1 	bl	8000fc8 <ADXL345_ReadAccel>

	  gyro_x -= gyro_bias[0];
 8001e66:	ed97 7a00 	vldr	s14, [r7]
 8001e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e74:	edc7 7a00 	vstr	s15, [r7]
	  gyro_y -= gyro_bias[1];
 8001e78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e7e:	3304      	adds	r3, #4
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e88:	edc7 7a01 	vstr	s15, [r7, #4]
	  gyro_z -= gyro_bias[2];
 8001e8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e92:	3308      	adds	r3, #8
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9c:	edc7 7a02 	vstr	s15, [r7, #8]
	  acc_pitch = atan2f(-acc_x, sqrtf(acc_y*acc_y + acc_z*acc_z)) * 180.0f / M_PI;
 8001ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea4:	eeb1 8a67 	vneg.f32	s16, s15
 8001ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb4:	edd7 6a05 	vldr	s13, [r7, #20]
 8001eb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	f009 fe02 	bl	800bad0 <sqrtf>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	eef0 0a67 	vmov.f32	s1, s15
 8001ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8001ed8:	f009 fdf8 	bl	800bacc <atan2f>
 8001edc:	eef0 7a40 	vmov.f32	s15, s0
 8001ee0:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80020ac <main+0x334>
 8001ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee8:	ee17 0a90 	vmov	r0, s15
 8001eec:	f7fe fb3c 	bl	8000568 <__aeabi_f2d>
 8001ef0:	a367      	add	r3, pc, #412	@ (adr r3, 8002090 <main+0x318>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fcb9 	bl	800086c <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe61 	bl	8000bc8 <__aeabi_d2f>
 8001f06:	4603      	mov	r3, r0
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
	  acc_roll = atan2f(acc_y, acc_z) * 180.0f / M_PI;
 8001f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f12:	eef0 0a47 	vmov.f32	s1, s14
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	f009 fdd7 	bl	800bacc <atan2f>
 8001f1e:	eef0 7a40 	vmov.f32	s15, s0
 8001f22:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80020ac <main+0x334>
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	ee17 0a90 	vmov	r0, s15
 8001f2e:	f7fe fb1b 	bl	8000568 <__aeabi_f2d>
 8001f32:	a357      	add	r3, pc, #348	@ (adr r3, 8002090 <main+0x318>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fc98 	bl	800086c <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7fe fe40 	bl	8000bc8 <__aeabi_d2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34

//	  acc_pitch = 0;
//	  acc_roll = 0;

	  if(gyro_x > NOISE_THRESHOLD) pitch = alpha * (pitch + gyro_x * dt) + (1 - alpha) * acc_pitch;
 8001f4c:	edd7 7a00 	vldr	s15, [r7]
 8001f50:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	dd1b      	ble.n	8001f96 <main+0x21e>
 8001f5e:	ed97 7a00 	vldr	s14, [r7]
 8001f62:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f72:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f7e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001f82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f86:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f92:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	  if(gyro_y > NOISE_THRESHOLD) roll  = alpha * (roll  + gyro_y * dt) + (1 - alpha) * acc_roll;
 8001f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f9a:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa6:	dd1b      	ble.n	8001fe0 <main+0x268>
 8001fa8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fbc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fc8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001fcc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fdc:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58


	  printf("gyro_x: [%f], \tgyro_y: [%f], \tgyro_z: [%f]\r\n", gyro_x, gyro_y, gyro_z);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fac0 	bl	8000568 <__aeabi_f2d>
 8001fe8:	4680      	mov	r8, r0
 8001fea:	4689      	mov	r9, r1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe faba 	bl	8000568 <__aeabi_f2d>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460d      	mov	r5, r1
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fab4 	bl	8000568 <__aeabi_f2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002008:	e9cd 4500 	strd	r4, r5, [sp]
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	4827      	ldr	r0, [pc, #156]	@ (80020b0 <main+0x338>)
 8002012:	f007 fddf 	bl	8009bd4 <iprintf>
	  printf("acc_x: [%f], \tacc_y: [%f], \t acc_z: [%f]\r\n", acc_x, acc_y, acc_z);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe faa5 	bl	8000568 <__aeabi_f2d>
 800201e:	4680      	mov	r8, r0
 8002020:	4689      	mov	r9, r1
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa9f 	bl	8000568 <__aeabi_f2d>
 800202a:	4604      	mov	r4, r0
 800202c:	460d      	mov	r5, r1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa99 	bl	8000568 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800203e:	e9cd 4500 	strd	r4, r5, [sp]
 8002042:	4642      	mov	r2, r8
 8002044:	464b      	mov	r3, r9
 8002046:	481b      	ldr	r0, [pc, #108]	@ (80020b4 <main+0x33c>)
 8002048:	f007 fdc4 	bl	8009bd4 <iprintf>
	   * ###########################
	   * ####  GAME STATE CHECK  ###
	   * ###########################
	   * */

	  currTile = currMaze[ball.tile_y][ball.tile_x];
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <main+0x340>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <main+0x320>)
 8002052:	7a5b      	ldrb	r3, [r3, #9]
 8002054:	4619      	mov	r1, r3
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <main+0x320>)
 8002062:	7a12      	ldrb	r2, [r2, #8]
 8002064:	5c9b      	ldrb	r3, [r3, r2]
 8002066:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	  if (currTile == 2) {
 800206a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800206e:	2b02      	cmp	r3, #2
 8002070:	d103      	bne.n	800207a <main+0x302>
	      currentGameState = GAME_WIN;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002078:	e023      	b.n	80020c2 <main+0x34a>
	  }
	  else if(currTile == 3){
 800207a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800207e:	2b03      	cmp	r3, #3
 8002080:	d11c      	bne.n	80020bc <main+0x344>
		  currentGameState = GAME_LOSE;
 8002082:	2302      	movs	r3, #2
 8002084:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002088:	e01b      	b.n	80020c2 <main+0x34a>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	54442d18 	.word	0x54442d18
 8002094:	400921fb 	.word	0x400921fb
 8002098:	200003d0 	.word	0x200003d0
 800209c:	3f7ae148 	.word	0x3f7ae148
 80020a0:	3dcccccd 	.word	0x3dcccccd
 80020a4:	40021800 	.word	0x40021800
 80020a8:	447a0000 	.word	0x447a0000
 80020ac:	43340000 	.word	0x43340000
 80020b0:	0800be28 	.word	0x0800be28
 80020b4:	0800be58 	.word	0x0800be58
 80020b8:	200003dc 	.word	0x200003dc
	  }
	  else{
	  	  currentGameState = GAME_RUNNING;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	  	   * ###########################
	  	   * ######### GAME LOGIC  #####
	  	   * ###########################
	  	   * */

	  if(currentGameState == GAME_RUNNING){
 80020c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d16a      	bne.n	80021a0 <main+0x428>
		 draw_maze(currMaze);
 80020ca:	4bb0      	ldr	r3, [pc, #704]	@ (800238c <main+0x614>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fdd0 	bl	8001c74 <draw_maze>
		 float vx = /*roll * */SPEED;
 80020d4:	4bae      	ldr	r3, [pc, #696]	@ (8002390 <main+0x618>)
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
		 float vy = /*pitch * */SPEED;
 80020d8:	4bad      	ldr	r3, [pc, #692]	@ (8002390 <main+0x618>)
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c

		 float new_x = ball.x_px + vx * dt;
 80020dc:	4bad      	ldr	r3, [pc, #692]	@ (8002394 <main+0x61c>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80020e6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80020ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		 int next_tile_x = (int)(new_x / CELL_SIZE);
 80020f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020fa:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80020fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002106:	ee17 3a90 	vmov	r3, s15
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
		 if (currMaze[ball.tile_y][next_tile_x] != 1) {
 800210c:	4b9f      	ldr	r3, [pc, #636]	@ (800238c <main+0x614>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4ba0      	ldr	r3, [pc, #640]	@ (8002394 <main+0x61c>)
 8002112:	7a5b      	ldrb	r3, [r3, #9]
 8002114:	4619      	mov	r1, r3
 8002116:	460b      	mov	r3, r1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	440b      	add	r3, r1
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d002      	beq.n	8002130 <main+0x3b8>
		     ball.x_px = new_x;
 800212a:	4a9a      	ldr	r2, [pc, #616]	@ (8002394 <main+0x61c>)
 800212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212e:	6013      	str	r3, [r2, #0]
		 }


		 float new_y = ball.y_px + vy * dt;
 8002130:	4b98      	ldr	r3, [pc, #608]	@ (8002394 <main+0x61c>)
 8002132:	ed93 7a01 	vldr	s14, [r3, #4]
 8002136:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800213a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	edc7 7a08 	vstr	s15, [r7, #32]
		 int next_tile_y = (int)(new_y / CELL_SIZE);
 800214a:	ed97 7a08 	vldr	s14, [r7, #32]
 800214e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215a:	ee17 3a90 	vmov	r3, s15
 800215e:	61fb      	str	r3, [r7, #28]
		 if (currMaze[next_tile_y][ball.tile_x] != 1) {
 8002160:	4b8a      	ldr	r3, [pc, #552]	@ (800238c <main+0x614>)
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	4a88      	ldr	r2, [pc, #544]	@ (8002394 <main+0x61c>)
 8002172:	7a12      	ldrb	r2, [r2, #8]
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d002      	beq.n	8002180 <main+0x408>
		     ball.y_px = new_y;
 800217a:	4a86      	ldr	r2, [pc, #536]	@ (8002394 <main+0x61c>)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	6053      	str	r3, [r2, #4]
		 }

		 update_ball_tile_position(&ball);
 8002180:	4884      	ldr	r0, [pc, #528]	@ (8002394 <main+0x61c>)
 8002182:	f7ff fcd9 	bl	8001b38 <update_ball_tile_position>
		 draw_ballSprite(ball.x_px, ball.y_px);
 8002186:	4b83      	ldr	r3, [pc, #524]	@ (8002394 <main+0x61c>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	4b81      	ldr	r3, [pc, #516]	@ (8002394 <main+0x61c>)
 800218e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002192:	eef0 0a47 	vmov.f32	s1, s14
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	f7ff fd17 	bl	8001bcc <draw_ballSprite>
 800219e:	e0e3      	b.n	8002368 <main+0x5f0>
	  }
	  else if(currentGameState == GAME_LOSE){
 80021a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d136      	bne.n	8002216 <main+0x49e>
		  BSP_LCD_Clear(LCD_COLOR_RED);
 80021a8:	487b      	ldr	r0, [pc, #492]	@ (8002398 <main+0x620>)
 80021aa:	f001 f969 	bl	8003480 <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80021ae:	487a      	ldr	r0, [pc, #488]	@ (8002398 <main+0x620>)
 80021b0:	f001 f91e 	bl	80033f0 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"YOU LOSE!", CENTER_MODE);
 80021b4:	f001 f94e 	bl	8003454 <BSP_LCD_GetFont>
 80021b8:	4603      	mov	r3, r0
 80021ba:	88db      	ldrh	r3, [r3, #6]
 80021bc:	461a      	mov	r2, r3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	b299      	uxth	r1, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	4a75      	ldr	r2, [pc, #468]	@ (800239c <main+0x624>)
 80021c8:	2000      	movs	r0, #0
 80021ca:	f001 f9c5 	bl	8003558 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"Press button", CENTER_MODE);
 80021ce:	f001 f941 	bl	8003454 <BSP_LCD_GetFont>
 80021d2:	4603      	mov	r3, r0
 80021d4:	88db      	ldrh	r3, [r3, #6]
 80021d6:	461a      	mov	r2, r3
 80021d8:	0052      	lsls	r2, r2, #1
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	b299      	uxth	r1, r3
 80021e0:	2301      	movs	r3, #1
 80021e2:	4a6f      	ldr	r2, [pc, #444]	@ (80023a0 <main+0x628>)
 80021e4:	2000      	movs	r0, #0
 80021e6:	f001 f9b7 	bl	8003558 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"to restart", CENTER_MODE);
 80021ea:	f001 f933 	bl	8003454 <BSP_LCD_GetFont>
 80021ee:	4603      	mov	r3, r0
 80021f0:	88db      	ldrh	r3, [r3, #6]
 80021f2:	461a      	mov	r2, r3
 80021f4:	00d2      	lsls	r2, r2, #3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	b299      	uxth	r1, r3
 80021fa:	2301      	movs	r3, #1
 80021fc:	4a69      	ldr	r2, [pc, #420]	@ (80023a4 <main+0x62c>)
 80021fe:	2000      	movs	r0, #0
 8002200:	f001 f9aa 	bl	8003558 <BSP_LCD_DisplayStringAt>
		  wait_for_user_button();
 8002204:	f7ff fd88 	bl	8001d18 <wait_for_user_button>
		  reset_ball_position(&ball);
 8002208:	4862      	ldr	r0, [pc, #392]	@ (8002394 <main+0x61c>)
 800220a:	f7ff fda1 	bl	8001d50 <reset_ball_position>
		  currentGameState = GAME_RUNNING;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002214:	e0a8      	b.n	8002368 <main+0x5f0>
	  }
	  else{
		  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8002216:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800221a:	f001 f931 	bl	8003480 <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800221e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8002222:	f001 f8e5 	bl	80033f0 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"YOU WIN!", CENTER_MODE);
 8002226:	f001 f915 	bl	8003454 <BSP_LCD_GetFont>
 800222a:	4603      	mov	r3, r0
 800222c:	88db      	ldrh	r3, [r3, #6]
 800222e:	461a      	mov	r2, r3
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	4413      	add	r3, r2
 8002234:	b299      	uxth	r1, r3
 8002236:	2301      	movs	r3, #1
 8002238:	4a5b      	ldr	r2, [pc, #364]	@ (80023a8 <main+0x630>)
 800223a:	2000      	movs	r0, #0
 800223c:	f001 f98c 	bl	8003558 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"Press button", CENTER_MODE);
 8002240:	f001 f908 	bl	8003454 <BSP_LCD_GetFont>
 8002244:	4603      	mov	r3, r0
 8002246:	88db      	ldrh	r3, [r3, #6]
 8002248:	461a      	mov	r2, r3
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	4413      	add	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	b299      	uxth	r1, r3
 8002252:	2301      	movs	r3, #1
 8002254:	4a52      	ldr	r2, [pc, #328]	@ (80023a0 <main+0x628>)
 8002256:	2000      	movs	r0, #0
 8002258:	f001 f97e 	bl	8003558 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"to advance", CENTER_MODE);
 800225c:	f001 f8fa 	bl	8003454 <BSP_LCD_GetFont>
 8002260:	4603      	mov	r3, r0
 8002262:	88db      	ldrh	r3, [r3, #6]
 8002264:	461a      	mov	r2, r3
 8002266:	00d2      	lsls	r2, r2, #3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b299      	uxth	r1, r3
 800226c:	2301      	movs	r3, #1
 800226e:	4a4f      	ldr	r2, [pc, #316]	@ (80023ac <main+0x634>)
 8002270:	2000      	movs	r0, #0
 8002272:	f001 f971 	bl	8003558 <BSP_LCD_DisplayStringAt>
		  wait_for_user_button();
 8002276:	f7ff fd4f 	bl	8001d18 <wait_for_user_button>


		  currLevel = (currLevel + 1) % 3;
 800227a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <main+0x638>)
 8002282:	fb83 3102 	smull	r3, r1, r3, r2
 8002286:	17d3      	asrs	r3, r2, #31
 8002288:	1ac9      	subs	r1, r1, r3
 800228a:	460b      	mov	r3, r1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	440b      	add	r3, r1
 8002290:	1ad1      	subs	r1, r2, r3
 8002292:	460b      	mov	r3, r1
 8002294:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		  switch (currLevel) {
 8002298:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800229c:	2b02      	cmp	r3, #2
 800229e:	d040      	beq.n	8002322 <main+0x5aa>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	dc5b      	bgt.n	800235c <main+0x5e4>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <main+0x536>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d01d      	beq.n	80022e8 <main+0x570>
 80022ac:	e056      	b.n	800235c <main+0x5e4>
		          case 0: currMaze = maze1;
 80022ae:	4b37      	ldr	r3, [pc, #220]	@ (800238c <main+0x614>)
 80022b0:	4a40      	ldr	r2, [pc, #256]	@ (80023b4 <main+0x63c>)
 80022b2:	601a      	str	r2, [r3, #0]
		          	  	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 80022b4:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80022b8:	f001 f8e2 	bl	8003480 <BSP_LCD_Clear>
		          	  	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80022bc:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80022c0:	f001 f896 	bl	80033f0 <BSP_LCD_SetTextColor>
		          	  	  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Level 1", CENTER_MODE);
 80022c4:	f001 f8c6 	bl	8003454 <BSP_LCD_GetFont>
 80022c8:	4603      	mov	r3, r0
 80022ca:	88db      	ldrh	r3, [r3, #6]
 80022cc:	461a      	mov	r2, r3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	b299      	uxth	r1, r3
 80022d4:	2301      	movs	r3, #1
 80022d6:	4a38      	ldr	r2, [pc, #224]	@ (80023b8 <main+0x640>)
 80022d8:	2000      	movs	r0, #0
 80022da:	f001 f93d 	bl	8003558 <BSP_LCD_DisplayStringAt>
		          	  	  HAL_Delay(1000);
 80022de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022e2:	f001 fe8b 	bl	8003ffc <HAL_Delay>
		          	  	  break;
 80022e6:	e039      	b.n	800235c <main+0x5e4>
		          case 1: currMaze = maze2;
 80022e8:	4b28      	ldr	r3, [pc, #160]	@ (800238c <main+0x614>)
 80022ea:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <main+0x644>)
 80022ec:	601a      	str	r2, [r3, #0]
		          	  	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 80022ee:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80022f2:	f001 f8c5 	bl	8003480 <BSP_LCD_Clear>
		          	  	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80022f6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80022fa:	f001 f879 	bl	80033f0 <BSP_LCD_SetTextColor>
		          	  	  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Level 2", CENTER_MODE);
 80022fe:	f001 f8a9 	bl	8003454 <BSP_LCD_GetFont>
 8002302:	4603      	mov	r3, r0
 8002304:	88db      	ldrh	r3, [r3, #6]
 8002306:	461a      	mov	r2, r3
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	4413      	add	r3, r2
 800230c:	b299      	uxth	r1, r3
 800230e:	2301      	movs	r3, #1
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <main+0x648>)
 8002312:	2000      	movs	r0, #0
 8002314:	f001 f920 	bl	8003558 <BSP_LCD_DisplayStringAt>
		          	  	  HAL_Delay(1000);
 8002318:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800231c:	f001 fe6e 	bl	8003ffc <HAL_Delay>
		          	  	  break;
 8002320:	e01c      	b.n	800235c <main+0x5e4>
		          case 2: currMaze = maze3;
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <main+0x614>)
 8002324:	4a27      	ldr	r2, [pc, #156]	@ (80023c4 <main+0x64c>)
 8002326:	601a      	str	r2, [r3, #0]
		          	  	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8002328:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800232c:	f001 f8a8 	bl	8003480 <BSP_LCD_Clear>
		          	  	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002330:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8002334:	f001 f85c 	bl	80033f0 <BSP_LCD_SetTextColor>
		          	  	  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Level 3", CENTER_MODE);
 8002338:	f001 f88c 	bl	8003454 <BSP_LCD_GetFont>
 800233c:	4603      	mov	r3, r0
 800233e:	88db      	ldrh	r3, [r3, #6]
 8002340:	461a      	mov	r2, r3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4413      	add	r3, r2
 8002346:	b299      	uxth	r1, r3
 8002348:	2301      	movs	r3, #1
 800234a:	4a1f      	ldr	r2, [pc, #124]	@ (80023c8 <main+0x650>)
 800234c:	2000      	movs	r0, #0
 800234e:	f001 f903 	bl	8003558 <BSP_LCD_DisplayStringAt>
		          	  	  HAL_Delay(1000);
 8002352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002356:	f001 fe51 	bl	8003ffc <HAL_Delay>
		          	  	  break;
 800235a:	bf00      	nop
		  }

		  reset_ball_position(&ball);
 800235c:	480d      	ldr	r0, [pc, #52]	@ (8002394 <main+0x61c>)
 800235e:	f7ff fcf7 	bl	8001d50 <reset_ball_position>
		  currentGameState = GAME_RUNNING;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	  }


	  uint32_t frameTime = HAL_GetTick() - now;
 8002368:	f001 fe3c 	bl	8003fe4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	61bb      	str	r3, [r7, #24]
	  if (frameTime < 17)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b10      	cmp	r3, #16
 8002378:	f63f ad4a 	bhi.w	8001e10 <main+0x98>
	      HAL_Delay(17 - frameTime);
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f1c3 0311 	rsb	r3, r3, #17
 8002382:	4618      	mov	r0, r3
 8002384:	f001 fe3a 	bl	8003ffc <HAL_Delay>
  {
 8002388:	e542      	b.n	8001e10 <main+0x98>
 800238a:	bf00      	nop
 800238c:	200003dc 	.word	0x200003dc
 8002390:	40b00000 	.word	0x40b00000
 8002394:	200003d0 	.word	0x200003d0
 8002398:	ffff0000 	.word	0xffff0000
 800239c:	0800be84 	.word	0x0800be84
 80023a0:	0800be90 	.word	0x0800be90
 80023a4:	0800bea0 	.word	0x0800bea0
 80023a8:	0800beac 	.word	0x0800beac
 80023ac:	0800beb8 	.word	0x0800beb8
 80023b0:	55555556 	.word	0x55555556
 80023b4:	20000000 	.word	0x20000000
 80023b8:	0800bec4 	.word	0x0800bec4
 80023bc:	200000c0 	.word	0x200000c0
 80023c0:	0800becc 	.word	0x0800becc
 80023c4:	20000180 	.word	0x20000180
 80023c8:	0800bed4 	.word	0x0800bed4

080023cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	@ 0x50
 80023d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	2230      	movs	r2, #48	@ 0x30
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f007 fc4f 	bl	8009c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <SystemClock_Config+0xdc>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	4a2b      	ldr	r2, [pc, #172]	@ (80024a8 <SystemClock_Config+0xdc>)
 80023fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <SystemClock_Config+0xdc>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <SystemClock_Config+0xe0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a25      	ldr	r2, [pc, #148]	@ (80024ac <SystemClock_Config+0xe0>)
 8002416:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <SystemClock_Config+0xe0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002428:	2301      	movs	r3, #1
 800242a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800242c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002432:	2302      	movs	r3, #2
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002436:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800243c:	2308      	movs	r3, #8
 800243e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002440:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002446:	2302      	movs	r3, #2
 8002448:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800244a:	2303      	movs	r3, #3
 800244c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f9be 	bl	80067d4 <HAL_RCC_OscConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800245e:	f000 f897 	bl	8002590 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002462:	f004 f967 	bl	8006734 <HAL_PWREx_EnableOverDrive>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800246c:	f000 f890 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002470:	230f      	movs	r3, #15
 8002472:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800247c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002486:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2105      	movs	r1, #5
 800248e:	4618      	mov	r0, r3
 8002490:	f004 fc18 	bl	8006cc4 <HAL_RCC_ClockConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800249a:	f000 f879 	bl	8002590 <Error_Handler>
  }
}
 800249e:	bf00      	nop
 80024a0:	3750      	adds	r7, #80	@ 0x50
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000

080024b0 <Gyro_CountBias>:

/* USER CODE BEGIN 4 */
float* Gyro_CountBias(float sensordata[]){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	static float bias[3];
	for (int i = 0; i < 1000; ++i) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e030      	b.n	8002520 <Gyro_CountBias+0x70>
		  Gyro_ReadData(&gyro_x, &gyro_y, &gyro_z);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	1d19      	adds	r1, r3, #4
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3308      	adds	r3, #8
 80024c6:	461a      	mov	r2, r3
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff f851 	bl	8001570 <Gyro_ReadData>
	      bias[0] += gyro_x; bias[1] += gyro_y; bias[2] += gyro_z;
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <Gyro_CountBias+0xb4>)
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <Gyro_CountBias+0xb4>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]
 80024e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <Gyro_CountBias+0xb4>)
 80024e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3304      	adds	r3, #4
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <Gyro_CountBias+0xb4>)
 80024f8:	edc3 7a01 	vstr	s15, [r3, #4]
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <Gyro_CountBias+0xb4>)
 80024fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3308      	adds	r3, #8
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <Gyro_CountBias+0xb4>)
 8002510:	edc3 7a02 	vstr	s15, [r3, #8]
	      HAL_Delay(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f001 fd71 	bl	8003ffc <HAL_Delay>
	for (int i = 0; i < 1000; ++i) {
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002526:	dbca      	blt.n	80024be <Gyro_CountBias+0xe>
	  }
	for(int j=0; j<3; j++)
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	e012      	b.n	8002554 <Gyro_CountBias+0xa4>
	  bias[j] /= 1000.0f;
 800252e:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <Gyro_CountBias+0xb4>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	ed93 7a00 	vldr	s14, [r3]
 800253a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002568 <Gyro_CountBias+0xb8>
 800253e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002542:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <Gyro_CountBias+0xb4>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	edc3 7a00 	vstr	s15, [r3]
	for(int j=0; j<3; j++)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3301      	adds	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b02      	cmp	r3, #2
 8002558:	dde9      	ble.n	800252e <Gyro_CountBias+0x7e>

	return bias;
 800255a:	4b02      	ldr	r3, [pc, #8]	@ (8002564 <Gyro_CountBias+0xb4>)
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	2000078c 	.word	0x2000078c
 8002568:	447a0000 	.word	0x447a0000

0800256c <__io_putchar>:
int __io_putchar(int ch) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002574:	1d39      	adds	r1, r7, #4
 8002576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800257a:	2201      	movs	r2, #1
 800257c:	4803      	ldr	r0, [pc, #12]	@ (800258c <__io_putchar+0x20>)
 800257e:	f006 f93b 	bl	80087f8 <HAL_UART_Transmit>
    return ch;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000083c 	.word	0x2000083c

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <Error_Handler+0x8>

0800259c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025a2:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <MX_SPI5_Init+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025ac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025cc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025e8:	220a      	movs	r2, #10
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	@ (8002600 <MX_SPI5_Init+0x64>)
 80025ee:	f004 ffda 	bl	80075a6 <HAL_SPI_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025f8:	f7ff ffca 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000798 	.word	0x20000798
 8002604:	40015000 	.word	0x40015000

08002608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_SPI_MspInit+0x84>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12c      	bne.n	8002684 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_SPI_MspInit+0x88>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4a17      	ldr	r2, [pc, #92]	@ (8002690 <HAL_SPI_MspInit+0x88>)
 8002634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002638:	6453      	str	r3, [r2, #68]	@ 0x44
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_SPI_MspInit+0x88>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_SPI_MspInit+0x88>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <HAL_SPI_MspInit+0x88>)
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <HAL_SPI_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002662:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002674:	2305      	movs	r3, #5
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4805      	ldr	r0, [pc, #20]	@ (8002694 <HAL_SPI_MspInit+0x8c>)
 8002680:	f002 fa3c 	bl	8004afc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	@ 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40015000 	.word	0x40015000
 8002690:	40023800 	.word	0x40023800
 8002694:	40021400 	.word	0x40021400

08002698 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <HAL_SPI_MspDeInit+0x30>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10a      	bne.n	80026c0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_SPI_MspDeInit+0x34>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a07      	ldr	r2, [pc, #28]	@ (80026cc <HAL_SPI_MspDeInit+0x34>)
 80026b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80026b6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <HAL_SPI_MspDeInit+0x38>)
 80026bc:	f002 fbca 	bl	8004e54 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40015000 	.word	0x40015000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40021400 	.word	0x40021400

080026d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002720 <HAL_MspInit+0x4c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_MspInit+0x4c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <HAL_MspInit+0x4c>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277a:	f001 fc1f 	bl	8003fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}

08002782 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <_kill>:

int _kill(int pid, int sig)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800279c:	f007 fac2 	bl	8009d24 <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2216      	movs	r2, #22
 80027a4:	601a      	str	r2, [r3, #0]
  return -1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_exit>:

void _exit (int status)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffe7 	bl	8002792 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <_exit+0x12>

080027c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e00a      	b.n	80027f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027da:	f3af 8000 	nop.w
 80027de:	4601      	mov	r1, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	b2ca      	uxtb	r2, r1
 80027e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbf0      	blt.n	80027da <_read+0x12>
  }

  return len;
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e009      	b.n	8002828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	60ba      	str	r2, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fea5 	bl	800256c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf1      	blt.n	8002814 <_write+0x12>
  }
  return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_close>:

int _close(int file)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002862:	605a      	str	r2, [r3, #4]
  return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_isatty>:

int _isatty(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f007 fa26 	bl	8009d24 <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	@ (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20030000 	.word	0x20030000
 8002904:	00000400 	.word	0x00000400
 8002908:	200007f0 	.word	0x200007f0
 800290c:	20000c28 	.word	0x20000c28

08002910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002948:	463b      	mov	r3, r7
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002950:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <MX_TIM1_Init+0x98>)
 8002952:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <MX_TIM1_Init+0x9c>)
 8002954:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <MX_TIM1_Init+0x98>)
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <MX_TIM1_Init+0x98>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <MX_TIM1_Init+0x98>)
 8002964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296a:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <MX_TIM1_Init+0x98>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002970:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <MX_TIM1_Init+0x98>)
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <MX_TIM1_Init+0x98>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800297c:	4813      	ldr	r0, [pc, #76]	@ (80029cc <MX_TIM1_Init+0x98>)
 800297e:	f005 fc19 	bl	80081b4 <HAL_TIM_Base_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002988:	f7ff fe02 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	4619      	mov	r1, r3
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <MX_TIM1_Init+0x98>)
 800299a:	f005 fc5a 	bl	8008252 <HAL_TIM_ConfigClockSource>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029a4:	f7ff fdf4 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029b0:	463b      	mov	r3, r7
 80029b2:	4619      	mov	r1, r3
 80029b4:	4805      	ldr	r0, [pc, #20]	@ (80029cc <MX_TIM1_Init+0x98>)
 80029b6:	f005 fe53 	bl	8008660 <HAL_TIMEx_MasterConfigSynchronization>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029c0:	f7ff fde6 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200007f4 	.word	0x200007f4
 80029d0:	40010000 	.word	0x40010000

080029d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a10 <HAL_TIM_Base_MspInit+0x3c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_TIM_Base_MspInit+0x40>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <HAL_TIM_Base_MspInit+0x40>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_TIM_Base_MspInit+0x40>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40023800 	.word	0x40023800

08002a18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a1e:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <MX_USART1_UART_Init+0x50>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a4e:	4805      	ldr	r0, [pc, #20]	@ (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a50:	f005 fe82 	bl	8008758 <HAL_UART_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a5a:	f7ff fd99 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	2000083c 	.word	0x2000083c
 8002a68:	40011000 	.word	0x40011000

08002a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_UART_MspInit+0x84>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12c      	bne.n	8002ae8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <HAL_UART_MspInit+0x88>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <HAL_UART_MspInit+0x88>)
 8002a98:	f043 0310 	orr.w	r3, r3, #16
 8002a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <HAL_UART_MspInit+0x88>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_UART_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_UART_MspInit+0x88>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_UART_MspInit+0x88>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ac6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <HAL_UART_MspInit+0x8c>)
 8002ae4:	f002 f80a 	bl	8004afc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	@ 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40011000 	.word	0x40011000
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000

08002afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b00:	f7ff ff06 	bl	8002910 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b04:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b06:	490d      	ldr	r1, [pc, #52]	@ (8002b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b0c:	e002      	b.n	8002b14 <LoopCopyDataInit>

08002b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b12:	3304      	adds	r3, #4

08002b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b18:	d3f9      	bcc.n	8002b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b20:	e001      	b.n	8002b26 <LoopFillZerobss>

08002b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b24:	3204      	adds	r2, #4

08002b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b28:	d3fb      	bcc.n	8002b22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f007 f901 	bl	8009d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2e:	f7ff f923 	bl	8001d78 <main>
  bx  lr    
 8002b32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b3c:	200005fc 	.word	0x200005fc
  ldr r2, =_sidata
 8002b40:	0800dd74 	.word	0x0800dd74
  ldr r2, =_sbss
 8002b44:	200005fc 	.word	0x200005fc
  ldr r4, =_ebss
 8002b48:	20000c28 	.word	0x20000c28

08002b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b4c:	e7fe      	b.n	8002b4c <ADC_IRQHandler>

08002b4e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002b52:	f000 fa5d 	bl	8003010 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002b56:	20ca      	movs	r0, #202	@ 0xca
 8002b58:	f000 f95d 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002b5c:	20c3      	movs	r0, #195	@ 0xc3
 8002b5e:	f000 f967 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002b62:	2008      	movs	r0, #8
 8002b64:	f000 f964 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002b68:	2050      	movs	r0, #80	@ 0x50
 8002b6a:	f000 f961 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002b6e:	20cf      	movs	r0, #207	@ 0xcf
 8002b70:	f000 f951 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f000 f95b 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002b7a:	20c1      	movs	r0, #193	@ 0xc1
 8002b7c:	f000 f958 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002b80:	2030      	movs	r0, #48	@ 0x30
 8002b82:	f000 f955 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002b86:	20ed      	movs	r0, #237	@ 0xed
 8002b88:	f000 f945 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002b8c:	2064      	movs	r0, #100	@ 0x64
 8002b8e:	f000 f94f 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002b92:	2003      	movs	r0, #3
 8002b94:	f000 f94c 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002b98:	2012      	movs	r0, #18
 8002b9a:	f000 f949 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002b9e:	2081      	movs	r0, #129	@ 0x81
 8002ba0:	f000 f946 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002ba4:	20e8      	movs	r0, #232	@ 0xe8
 8002ba6:	f000 f936 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002baa:	2085      	movs	r0, #133	@ 0x85
 8002bac:	f000 f940 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f000 f93d 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002bb6:	2078      	movs	r0, #120	@ 0x78
 8002bb8:	f000 f93a 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002bbc:	20cb      	movs	r0, #203	@ 0xcb
 8002bbe:	f000 f92a 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002bc2:	2039      	movs	r0, #57	@ 0x39
 8002bc4:	f000 f934 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002bc8:	202c      	movs	r0, #44	@ 0x2c
 8002bca:	f000 f931 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f000 f92e 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002bd4:	2034      	movs	r0, #52	@ 0x34
 8002bd6:	f000 f92b 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f000 f928 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002be0:	20f7      	movs	r0, #247	@ 0xf7
 8002be2:	f000 f918 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002be6:	2020      	movs	r0, #32
 8002be8:	f000 f922 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002bec:	20ea      	movs	r0, #234	@ 0xea
 8002bee:	f000 f912 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f000 f91c 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f000 f919 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002bfe:	20b1      	movs	r0, #177	@ 0xb1
 8002c00:	f000 f909 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f000 f913 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002c0a:	201b      	movs	r0, #27
 8002c0c:	f000 f910 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c10:	20b6      	movs	r0, #182	@ 0xb6
 8002c12:	f000 f900 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c16:	200a      	movs	r0, #10
 8002c18:	f000 f90a 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002c1c:	20a2      	movs	r0, #162	@ 0xa2
 8002c1e:	f000 f907 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002c22:	20c0      	movs	r0, #192	@ 0xc0
 8002c24:	f000 f8f7 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c28:	2010      	movs	r0, #16
 8002c2a:	f000 f901 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002c2e:	20c1      	movs	r0, #193	@ 0xc1
 8002c30:	f000 f8f1 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c34:	2010      	movs	r0, #16
 8002c36:	f000 f8fb 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002c3a:	20c5      	movs	r0, #197	@ 0xc5
 8002c3c:	f000 f8eb 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002c40:	2045      	movs	r0, #69	@ 0x45
 8002c42:	f000 f8f5 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002c46:	2015      	movs	r0, #21
 8002c48:	f000 f8f2 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002c4c:	20c7      	movs	r0, #199	@ 0xc7
 8002c4e:	f000 f8e2 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002c52:	2090      	movs	r0, #144	@ 0x90
 8002c54:	f000 f8ec 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002c58:	2036      	movs	r0, #54	@ 0x36
 8002c5a:	f000 f8dc 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002c5e:	20c8      	movs	r0, #200	@ 0xc8
 8002c60:	f000 f8e6 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002c64:	20f2      	movs	r0, #242	@ 0xf2
 8002c66:	f000 f8d6 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f000 f8e0 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002c70:	20b0      	movs	r0, #176	@ 0xb0
 8002c72:	f000 f8d0 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002c76:	20c2      	movs	r0, #194	@ 0xc2
 8002c78:	f000 f8da 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c7c:	20b6      	movs	r0, #182	@ 0xb6
 8002c7e:	f000 f8ca 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c82:	200a      	movs	r0, #10
 8002c84:	f000 f8d4 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002c88:	20a7      	movs	r0, #167	@ 0xa7
 8002c8a:	f000 f8d1 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002c8e:	2027      	movs	r0, #39	@ 0x27
 8002c90:	f000 f8ce 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002c94:	2004      	movs	r0, #4
 8002c96:	f000 f8cb 	bl	8002e30 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002c9a:	202a      	movs	r0, #42	@ 0x2a
 8002c9c:	f000 f8bb 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f000 f8c5 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 f8c2 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 f8bf 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002cb2:	20ef      	movs	r0, #239	@ 0xef
 8002cb4:	f000 f8bc 	bl	8002e30 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002cb8:	202b      	movs	r0, #43	@ 0x2b
 8002cba:	f000 f8ac 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f000 f8b6 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f000 f8b3 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f000 f8b0 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002cd0:	203f      	movs	r0, #63	@ 0x3f
 8002cd2:	f000 f8ad 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002cd6:	20f6      	movs	r0, #246	@ 0xf6
 8002cd8:	f000 f89d 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f000 f8a7 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f000 f8a4 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002ce8:	2006      	movs	r0, #6
 8002cea:	f000 f8a1 	bl	8002e30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002cee:	202c      	movs	r0, #44	@ 0x2c
 8002cf0:	f000 f891 	bl	8002e16 <ili9341_WriteReg>
  LCD_Delay(200);
 8002cf4:	20c8      	movs	r0, #200	@ 0xc8
 8002cf6:	f000 fa79 	bl	80031ec <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002cfa:	2026      	movs	r0, #38	@ 0x26
 8002cfc:	f000 f88b 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f000 f895 	bl	8002e30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002d06:	20e0      	movs	r0, #224	@ 0xe0
 8002d08:	f000 f885 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002d0c:	200f      	movs	r0, #15
 8002d0e:	f000 f88f 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002d12:	2029      	movs	r0, #41	@ 0x29
 8002d14:	f000 f88c 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002d18:	2024      	movs	r0, #36	@ 0x24
 8002d1a:	f000 f889 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002d1e:	200c      	movs	r0, #12
 8002d20:	f000 f886 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002d24:	200e      	movs	r0, #14
 8002d26:	f000 f883 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d2a:	2009      	movs	r0, #9
 8002d2c:	f000 f880 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002d30:	204e      	movs	r0, #78	@ 0x4e
 8002d32:	f000 f87d 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002d36:	2078      	movs	r0, #120	@ 0x78
 8002d38:	f000 f87a 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002d3c:	203c      	movs	r0, #60	@ 0x3c
 8002d3e:	f000 f877 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d42:	2009      	movs	r0, #9
 8002d44:	f000 f874 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002d48:	2013      	movs	r0, #19
 8002d4a:	f000 f871 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d4e:	2005      	movs	r0, #5
 8002d50:	f000 f86e 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002d54:	2017      	movs	r0, #23
 8002d56:	f000 f86b 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d5a:	2011      	movs	r0, #17
 8002d5c:	f000 f868 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 f865 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002d66:	20e1      	movs	r0, #225	@ 0xe1
 8002d68:	f000 f855 	bl	8002e16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f000 f85f 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002d72:	2016      	movs	r0, #22
 8002d74:	f000 f85c 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002d78:	201b      	movs	r0, #27
 8002d7a:	f000 f859 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002d7e:	2004      	movs	r0, #4
 8002d80:	f000 f856 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d84:	2011      	movs	r0, #17
 8002d86:	f000 f853 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002d8a:	2007      	movs	r0, #7
 8002d8c:	f000 f850 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002d90:	2031      	movs	r0, #49	@ 0x31
 8002d92:	f000 f84d 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002d96:	2033      	movs	r0, #51	@ 0x33
 8002d98:	f000 f84a 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002d9c:	2042      	movs	r0, #66	@ 0x42
 8002d9e:	f000 f847 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002da2:	2005      	movs	r0, #5
 8002da4:	f000 f844 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002da8:	200c      	movs	r0, #12
 8002daa:	f000 f841 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002dae:	200a      	movs	r0, #10
 8002db0:	f000 f83e 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002db4:	2028      	movs	r0, #40	@ 0x28
 8002db6:	f000 f83b 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002dba:	202f      	movs	r0, #47	@ 0x2f
 8002dbc:	f000 f838 	bl	8002e30 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002dc0:	200f      	movs	r0, #15
 8002dc2:	f000 f835 	bl	8002e30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002dc6:	2011      	movs	r0, #17
 8002dc8:	f000 f825 	bl	8002e16 <ili9341_WriteReg>
  LCD_Delay(200);
 8002dcc:	20c8      	movs	r0, #200	@ 0xc8
 8002dce:	f000 fa0d 	bl	80031ec <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002dd2:	2029      	movs	r0, #41	@ 0x29
 8002dd4:	f000 f81f 	bl	8002e16 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002dd8:	202c      	movs	r0, #44	@ 0x2c
 8002dda:	f000 f81c 	bl	8002e16 <ili9341_WriteReg>
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002de6:	f000 f913 	bl	8003010 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002dea:	2103      	movs	r1, #3
 8002dec:	20d3      	movs	r0, #211	@ 0xd3
 8002dee:	f000 f82c 	bl	8002e4a <ili9341_ReadData>
 8002df2:	4603      	mov	r3, r0
 8002df4:	b29b      	uxth	r3, r3
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002dfe:	2029      	movs	r0, #41	@ 0x29
 8002e00:	f000 f809 	bl	8002e16 <ili9341_WriteReg>
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002e0c:	2028      	movs	r0, #40	@ 0x28
 8002e0e:	f000 f802 	bl	8002e16 <ili9341_WriteReg>
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f98e 	bl	8003144 <LCD_IO_WriteReg>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f95f 	bl	8003100 <LCD_IO_WriteData>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	460a      	mov	r2, r1
 8002e54:	80fb      	strh	r3, [r7, #6]
 8002e56:	4613      	mov	r3, r2
 8002e58:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002e5a:	797a      	ldrb	r2, [r7, #5]
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f991 	bl	8003188 <LCD_IO_ReadData>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002e74:	23f0      	movs	r3, #240	@ 0xf0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002e84:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002e98:	4819      	ldr	r0, [pc, #100]	@ (8002f00 <SPIx_Init+0x6c>)
 8002e9a:	f005 f83b 	bl	8007f14 <HAL_SPI_GetState>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d12b      	bne.n	8002efc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ea6:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <SPIx_Init+0x70>)
 8002ea8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <SPIx_Init+0x6c>)
 8002eac:	2218      	movs	r2, #24
 8002eae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <SPIx_Init+0x6c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <SPIx_Init+0x6c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <SPIx_Init+0x6c>)
 8002eca:	2207      	movs	r2, #7
 8002ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <SPIx_Init+0x6c>)
 8002edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SPIx_Init+0x6c>)
 8002eea:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002eee:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002ef0:	4803      	ldr	r0, [pc, #12]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ef2:	f000 f853 	bl	8002f9c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002ef6:	4802      	ldr	r0, [pc, #8]	@ (8002f00 <SPIx_Init+0x6c>)
 8002ef8:	f004 fb55 	bl	80075a6 <HAL_SPI_Init>
  }
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000884 	.word	0x20000884
 8002f04:	40015000 	.word	0x40015000

08002f08 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <SPIx_Read+0x38>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f107 0108 	add.w	r1, r7, #8
 8002f22:	4808      	ldr	r0, [pc, #32]	@ (8002f44 <SPIx_Read+0x3c>)
 8002f24:	f004 fd34 	bl	8007990 <HAL_SPI_Receive>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f32:	f000 f827 	bl	8002f84 <SPIx_Error>
  }

  return readvalue;
 8002f36:	68bb      	ldr	r3, [r7, #8]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000041c 	.word	0x2000041c
 8002f44:	20000884 	.word	0x20000884

08002f48 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <SPIx_Write+0x34>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1db9      	adds	r1, r7, #6
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <SPIx_Write+0x38>)
 8002f60:	f004 fbd2 	bl	8007708 <HAL_SPI_Transmit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f6e:	f000 f809 	bl	8002f84 <SPIx_Error>
  }
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000041c 	.word	0x2000041c
 8002f80:	20000884 	.word	0x20000884

08002f84 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002f88:	4803      	ldr	r0, [pc, #12]	@ (8002f98 <SPIx_Error+0x14>)
 8002f8a:	f004 fb95 	bl	80076b8 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002f8e:	f7ff ff81 	bl	8002e94 <SPIx_Init>
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000884 	.word	0x20000884

08002f9c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <SPIx_MspInit+0x6c>)
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <SPIx_MspInit+0x6c>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fb4:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <SPIx_MspInit+0x6c>)
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <SPIx_MspInit+0x6c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <SPIx_MspInit+0x6c>)
 8002fca:	f043 0320 	orr.w	r3, r3, #32
 8002fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <SPIx_MspInit+0x6c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002fdc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002fea:	2301      	movs	r3, #1
 8002fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002fee:	2305      	movs	r3, #5
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4804      	ldr	r0, [pc, #16]	@ (800300c <SPIx_MspInit+0x70>)
 8002ffa:	f001 fd7f 	bl	8004afc <HAL_GPIO_Init>
}
 8002ffe:	bf00      	nop
 8003000:	3728      	adds	r7, #40	@ 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40021400 	.word	0x40021400

08003010 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8003016:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <LCD_IO_Init+0xe0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d164      	bne.n	80030e8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800301e:	4b34      	ldr	r3, [pc, #208]	@ (80030f0 <LCD_IO_Init+0xe0>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	4b32      	ldr	r3, [pc, #200]	@ (80030f4 <LCD_IO_Init+0xe4>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	4a31      	ldr	r2, [pc, #196]	@ (80030f4 <LCD_IO_Init+0xe4>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6313      	str	r3, [r2, #48]	@ 0x30
 8003034:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <LCD_IO_Init+0xe4>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003044:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800304e:	2302      	movs	r3, #2
 8003050:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	4619      	mov	r1, r3
 8003058:	4827      	ldr	r0, [pc, #156]	@ (80030f8 <LCD_IO_Init+0xe8>)
 800305a:	f001 fd4f 	bl	8004afc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	4b24      	ldr	r3, [pc, #144]	@ (80030f4 <LCD_IO_Init+0xe4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a23      	ldr	r2, [pc, #140]	@ (80030f4 <LCD_IO_Init+0xe4>)
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
 800306e:	4b21      	ldr	r3, [pc, #132]	@ (80030f4 <LCD_IO_Init+0xe4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800307a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003088:	2302      	movs	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	4619      	mov	r1, r3
 8003092:	4819      	ldr	r0, [pc, #100]	@ (80030f8 <LCD_IO_Init+0xe8>)
 8003094:	f001 fd32 	bl	8004afc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <LCD_IO_Init+0xe4>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <LCD_IO_Init+0xe4>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <LCD_IO_Init+0xe4>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80030b4:	2304      	movs	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030b8:	2301      	movs	r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4619      	mov	r1, r3
 80030ca:	480c      	ldr	r0, [pc, #48]	@ (80030fc <LCD_IO_Init+0xec>)
 80030cc:	f001 fd16 	bl	8004afc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80030d0:	2200      	movs	r2, #0
 80030d2:	2104      	movs	r1, #4
 80030d4:	4809      	ldr	r0, [pc, #36]	@ (80030fc <LCD_IO_Init+0xec>)
 80030d6:	f001 ffe1 	bl	800509c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80030da:	2201      	movs	r2, #1
 80030dc:	2104      	movs	r1, #4
 80030de:	4807      	ldr	r0, [pc, #28]	@ (80030fc <LCD_IO_Init+0xec>)
 80030e0:	f001 ffdc 	bl	800509c <HAL_GPIO_WritePin>

    SPIx_Init();
 80030e4:	f7ff fed6 	bl	8002e94 <SPIx_Init>
  }
}
 80030e8:	bf00      	nop
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200008dc 	.word	0x200008dc
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020c00 	.word	0x40020c00
 80030fc:	40020800 	.word	0x40020800

08003100 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800310a:	2201      	movs	r2, #1
 800310c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003110:	480a      	ldr	r0, [pc, #40]	@ (800313c <LCD_IO_WriteData+0x3c>)
 8003112:	f001 ffc3 	bl	800509c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003116:	2200      	movs	r2, #0
 8003118:	2104      	movs	r1, #4
 800311a:	4809      	ldr	r0, [pc, #36]	@ (8003140 <LCD_IO_WriteData+0x40>)
 800311c:	f001 ffbe 	bl	800509c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff10 	bl	8002f48 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003128:	2201      	movs	r2, #1
 800312a:	2104      	movs	r1, #4
 800312c:	4804      	ldr	r0, [pc, #16]	@ (8003140 <LCD_IO_WriteData+0x40>)
 800312e:	f001 ffb5 	bl	800509c <HAL_GPIO_WritePin>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40020c00 	.word	0x40020c00
 8003140:	40020800 	.word	0x40020800

08003144 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800314e:	2200      	movs	r2, #0
 8003150:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003154:	480a      	ldr	r0, [pc, #40]	@ (8003180 <LCD_IO_WriteReg+0x3c>)
 8003156:	f001 ffa1 	bl	800509c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800315a:	2200      	movs	r2, #0
 800315c:	2104      	movs	r1, #4
 800315e:	4809      	ldr	r0, [pc, #36]	@ (8003184 <LCD_IO_WriteReg+0x40>)
 8003160:	f001 ff9c 	bl	800509c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	b29b      	uxth	r3, r3
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff feed 	bl	8002f48 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800316e:	2201      	movs	r2, #1
 8003170:	2104      	movs	r1, #4
 8003172:	4804      	ldr	r0, [pc, #16]	@ (8003184 <LCD_IO_WriteReg+0x40>)
 8003174:	f001 ff92 	bl	800509c <HAL_GPIO_WritePin>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40020800 	.word	0x40020800

08003188 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	460a      	mov	r2, r1
 8003192:	80fb      	strh	r3, [r7, #6]
 8003194:	4613      	mov	r3, r2
 8003196:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800319c:	2200      	movs	r2, #0
 800319e:	2104      	movs	r1, #4
 80031a0:	4810      	ldr	r0, [pc, #64]	@ (80031e4 <LCD_IO_ReadData+0x5c>)
 80031a2:	f001 ff7b 	bl	800509c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80031a6:	2200      	movs	r2, #0
 80031a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031ac:	480e      	ldr	r0, [pc, #56]	@ (80031e8 <LCD_IO_ReadData+0x60>)
 80031ae:	f001 ff75 	bl	800509c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fec7 	bl	8002f48 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80031ba:	797b      	ldrb	r3, [r7, #5]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fea3 	bl	8002f08 <SPIx_Read>
 80031c2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80031c4:	2201      	movs	r2, #1
 80031c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031ca:	4807      	ldr	r0, [pc, #28]	@ (80031e8 <LCD_IO_ReadData+0x60>)
 80031cc:	f001 ff66 	bl	800509c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80031d0:	2201      	movs	r2, #1
 80031d2:	2104      	movs	r1, #4
 80031d4:	4803      	ldr	r0, [pc, #12]	@ (80031e4 <LCD_IO_ReadData+0x5c>)
 80031d6:	f001 ff61 	bl	800509c <HAL_GPIO_WritePin>

  return readvalue;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00

080031ec <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 ff01 	bl	8003ffc <HAL_Delay>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8003208:	4b2d      	ldr	r3, [pc, #180]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 800320a:	4a2e      	ldr	r2, [pc, #184]	@ (80032c4 <BSP_LCD_Init+0xc0>)
 800320c:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800320e:	4b2c      	ldr	r3, [pc, #176]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003210:	2209      	movs	r2, #9
 8003212:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003214:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003216:	2201      	movs	r2, #1
 8003218:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800321a:	4b29      	ldr	r3, [pc, #164]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 800321c:	221d      	movs	r2, #29
 800321e:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003220:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003222:	2203      	movs	r2, #3
 8003224:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8003226:	4b26      	ldr	r3, [pc, #152]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003228:	f240 120d 	movw	r2, #269	@ 0x10d
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 800322e:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003230:	f240 1243 	movw	r2, #323	@ 0x143
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003238:	f240 1217 	movw	r2, #279	@ 0x117
 800323c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 800323e:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003240:	f240 1247 	movw	r2, #327	@ 0x147
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8003246:	4b1e      	ldr	r3, [pc, #120]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 800324e:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8003256:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <BSP_LCD_Init+0xc4>)
 8003260:	2208      	movs	r2, #8
 8003262:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <BSP_LCD_Init+0xc4>)
 8003266:	22c0      	movs	r2, #192	@ 0xc0
 8003268:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800326a:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <BSP_LCD_Init+0xc4>)
 800326c:	2204      	movs	r2, #4
 800326e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003270:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <BSP_LCD_Init+0xc4>)
 8003272:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003278:	4813      	ldr	r0, [pc, #76]	@ (80032c8 <BSP_LCD_Init+0xc4>)
 800327a:	f003 ff43 	bl	8007104 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800327e:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003280:	2200      	movs	r2, #0
 8003282:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003284:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 800328c:	2200      	movs	r2, #0
 800328e:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8003296:	f000 fa87 	bl	80037a8 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 800329a:	4809      	ldr	r0, [pc, #36]	@ (80032c0 <BSP_LCD_Init+0xbc>)
 800329c:	f002 ffd1 	bl	8006242 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80032a0:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <BSP_LCD_Init+0xc8>)
 80032a2:	4a0b      	ldr	r2, [pc, #44]	@ (80032d0 <BSP_LCD_Init+0xcc>)
 80032a4:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <BSP_LCD_Init+0xc8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80032ae:	f000 fc69 	bl	8003b84 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80032b2:	4808      	ldr	r0, [pc, #32]	@ (80032d4 <BSP_LCD_Init+0xd0>)
 80032b4:	f000 f8b4 	bl	8003420 <BSP_LCD_SetFont>

  return LCD_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200008e0 	.word	0x200008e0
 80032c4:	40016800 	.word	0x40016800
 80032c8:	200009c8 	.word	0x200009c8
 80032cc:	20000a14 	.word	0x20000a14
 80032d0:	200003e4 	.word	0x200003e4
 80032d4:	20000420 	.word	0x20000420

080032d8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <BSP_LCD_GetXSize+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	4798      	blx	r3
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000a14 	.word	0x20000a14

080032f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <BSP_LCD_GetYSize+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	4798      	blx	r3
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000a14 	.word	0x20000a14

08003308 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b090      	sub	sp, #64	@ 0x40
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003318:	f7ff ffde 	bl	80032d8 <BSP_LCD_GetXSize>
 800331c:	4603      	mov	r3, r0
 800331e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8003324:	f7ff ffe4 	bl	80032f0 <BSP_LCD_GetYSize>
 8003328:	4603      	mov	r3, r0
 800332a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8003334:	23ff      	movs	r3, #255	@ 0xff
 8003336:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800334e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003354:	2307      	movs	r3, #7
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003358:	f7ff ffbe 	bl	80032d8 <BSP_LCD_GetXSize>
 800335c:	4603      	mov	r3, r0
 800335e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003360:	f7ff ffc6 	bl	80032f0 <BSP_LCD_GetYSize>
 8003364:	4603      	mov	r3, r0
 8003366:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	f107 030c 	add.w	r3, r7, #12
 800336e:	4619      	mov	r1, r3
 8003370:	4814      	ldr	r0, [pc, #80]	@ (80033c4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003372:	f003 f803 	bl	800637c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	4913      	ldr	r1, [pc, #76]	@ (80033c8 <BSP_LCD_LayerDefaultInit+0xc0>)
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3304      	adds	r3, #4
 8003386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800338a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	490e      	ldr	r1, [pc, #56]	@ (80033c8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3308      	adds	r3, #8
 800339c:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <BSP_LCD_LayerDefaultInit+0xc4>)
 800339e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	4909      	ldr	r1, [pc, #36]	@ (80033c8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80033b2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80033b4:	4803      	ldr	r0, [pc, #12]	@ (80033c4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80033b6:	f003 f81f 	bl	80063f8 <HAL_LTDC_EnableDither>
}
 80033ba:	bf00      	nop
 80033bc:	3740      	adds	r7, #64	@ 0x40
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200008e0 	.word	0x200008e0
 80033c8:	200009fc 	.word	0x200009fc
 80033cc:	20000420 	.word	0x20000420

080033d0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80033d8:	4a04      	ldr	r2, [pc, #16]	@ (80033ec <BSP_LCD_SelectLayer+0x1c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	200009f8 	.word	0x200009f8

080033f0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80033f8:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <BSP_LCD_SetTextColor+0x28>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4907      	ldr	r1, [pc, #28]	@ (800341c <BSP_LCD_SetTextColor+0x2c>)
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	601a      	str	r2, [r3, #0]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	200009f8 	.word	0x200009f8
 800341c:	200009fc 	.word	0x200009fc

08003420 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003428:	4b08      	ldr	r3, [pc, #32]	@ (800344c <BSP_LCD_SetFont+0x2c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4908      	ldr	r1, [pc, #32]	@ (8003450 <BSP_LCD_SetFont+0x30>)
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3308      	adds	r3, #8
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	200009f8 	.word	0x200009f8
 8003450:	200009fc 	.word	0x200009fc

08003454 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003458:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <BSP_LCD_GetFont+0x24>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4907      	ldr	r1, [pc, #28]	@ (800347c <BSP_LCD_GetFont+0x28>)
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3308      	adds	r3, #8
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	200009f8 	.word	0x200009f8
 800347c:	200009fc 	.word	0x200009fc

08003480 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af02      	add	r7, sp, #8
 8003486:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8003488:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <BSP_LCD_Clear+0x48>)
 800348a:	681c      	ldr	r4, [r3, #0]
 800348c:	4b0e      	ldr	r3, [pc, #56]	@ (80034c8 <BSP_LCD_Clear+0x48>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0e      	ldr	r2, [pc, #56]	@ (80034cc <BSP_LCD_Clear+0x4c>)
 8003492:	2134      	movs	r1, #52	@ 0x34
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	335c      	adds	r3, #92	@ 0x5c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461e      	mov	r6, r3
 80034a0:	f7ff ff1a 	bl	80032d8 <BSP_LCD_GetXSize>
 80034a4:	4605      	mov	r5, r0
 80034a6:	f7ff ff23 	bl	80032f0 <BSP_LCD_GetYSize>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	2300      	movs	r3, #0
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	462a      	mov	r2, r5
 80034b8:	4631      	mov	r1, r6
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 fb2a 	bl	8003b14 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	200009f8 	.word	0x200009f8
 80034cc:	200008e0 	.word	0x200008e0

080034d0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
 80034da:	460b      	mov	r3, r1
 80034dc:	80bb      	strh	r3, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80034e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <BSP_LCD_DisplayChar+0x80>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	491b      	ldr	r1, [pc, #108]	@ (8003554 <BSP_LCD_DisplayChar+0x84>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3308      	adds	r3, #8
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <BSP_LCD_DisplayChar+0x80>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4c14      	ldr	r4, [pc, #80]	@ (8003554 <BSP_LCD_DisplayChar+0x84>)
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4423      	add	r3, r4
 800350e:	3308      	adds	r3, #8
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8003514:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <BSP_LCD_DisplayChar+0x80>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4c0d      	ldr	r4, [pc, #52]	@ (8003554 <BSP_LCD_DisplayChar+0x84>)
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4423      	add	r3, r4
 8003528:	3308      	adds	r3, #8
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	889b      	ldrh	r3, [r3, #4]
 800352e:	3307      	adds	r3, #7
 8003530:	2b00      	cmp	r3, #0
 8003532:	da00      	bge.n	8003536 <BSP_LCD_DisplayChar+0x66>
 8003534:	3307      	adds	r3, #7
 8003536:	10db      	asrs	r3, r3, #3
 8003538:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800353c:	18ca      	adds	r2, r1, r3
 800353e:	88b9      	ldrh	r1, [r7, #4]
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fa2c 	bl	80039a0 <DrawChar>
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}
 8003550:	200009f8 	.word	0x200009f8
 8003554:	200009fc 	.word	0x200009fc

08003558 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60ba      	str	r2, [r7, #8]
 8003560:	461a      	mov	r2, r3
 8003562:	4603      	mov	r3, r0
 8003564:	81fb      	strh	r3, [r7, #14]
 8003566:	460b      	mov	r3, r1
 8003568:	81bb      	strh	r3, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800356e:	2301      	movs	r3, #1
 8003570:	83fb      	strh	r3, [r7, #30]
 8003572:	2300      	movs	r3, #0
 8003574:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8003582:	e002      	b.n	800358a <BSP_LCD_DisplayStringAt+0x32>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	3301      	adds	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	617a      	str	r2, [r7, #20]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f6      	bne.n	8003584 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8003596:	f7ff fe9f 	bl	80032d8 <BSP_LCD_GetXSize>
 800359a:	4601      	mov	r1, r0
 800359c:	4b4b      	ldr	r3, [pc, #300]	@ (80036cc <BSP_LCD_DisplayStringAt+0x174>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	484b      	ldr	r0, [pc, #300]	@ (80036d0 <BSP_LCD_DisplayStringAt+0x178>)
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4403      	add	r3, r0
 80035ac:	3308      	adds	r3, #8
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	889b      	ldrh	r3, [r3, #4]
 80035b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b6:	613b      	str	r3, [r7, #16]

  switch (mode)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d01c      	beq.n	80035f8 <BSP_LCD_DisplayStringAt+0xa0>
 80035be:	2b03      	cmp	r3, #3
 80035c0:	dc33      	bgt.n	800362a <BSP_LCD_DisplayStringAt+0xd2>
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <BSP_LCD_DisplayStringAt+0x74>
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d019      	beq.n	80035fe <BSP_LCD_DisplayStringAt+0xa6>
 80035ca:	e02e      	b.n	800362a <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	1ad1      	subs	r1, r2, r3
 80035d2:	4b3e      	ldr	r3, [pc, #248]	@ (80036cc <BSP_LCD_DisplayStringAt+0x174>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	483e      	ldr	r0, [pc, #248]	@ (80036d0 <BSP_LCD_DisplayStringAt+0x178>)
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3308      	adds	r3, #8
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	889b      	ldrh	r3, [r3, #4]
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	89fb      	ldrh	r3, [r7, #14]
 80035f2:	4413      	add	r3, r2
 80035f4:	83fb      	strh	r3, [r7, #30]
      break;
 80035f6:	e01b      	b.n	8003630 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	83fb      	strh	r3, [r7, #30]
      break;
 80035fc:	e018      	b.n	8003630 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	b299      	uxth	r1, r3
 8003606:	4b31      	ldr	r3, [pc, #196]	@ (80036cc <BSP_LCD_DisplayStringAt+0x174>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4831      	ldr	r0, [pc, #196]	@ (80036d0 <BSP_LCD_DisplayStringAt+0x178>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4403      	add	r3, r0
 8003616:	3308      	adds	r3, #8
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	889b      	ldrh	r3, [r3, #4]
 800361c:	fb11 f303 	smulbb	r3, r1, r3
 8003620:	b29a      	uxth	r2, r3
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	4413      	add	r3, r2
 8003626:	83fb      	strh	r3, [r7, #30]
      break;
 8003628:	e002      	b.n	8003630 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 800362a:	89fb      	ldrh	r3, [r7, #14]
 800362c:	83fb      	strh	r3, [r7, #30]
      break;
 800362e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8003630:	e01a      	b.n	8003668 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	89b9      	ldrh	r1, [r7, #12]
 8003638:	8bfb      	ldrh	r3, [r7, #30]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff48 	bl	80034d0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003640:	4b22      	ldr	r3, [pc, #136]	@ (80036cc <BSP_LCD_DisplayStringAt+0x174>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4922      	ldr	r1, [pc, #136]	@ (80036d0 <BSP_LCD_DisplayStringAt+0x178>)
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3308      	adds	r3, #8
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	889a      	ldrh	r2, [r3, #4]
 8003656:	8bfb      	ldrh	r3, [r7, #30]
 8003658:	4413      	add	r3, r2
 800365a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3301      	adds	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
    i++;
 8003662:	8bbb      	ldrh	r3, [r7, #28]
 8003664:	3301      	adds	r3, #1
 8003666:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2dc      	uxtb	r4, r3
 8003676:	f7ff fe2f 	bl	80032d8 <BSP_LCD_GetXSize>
 800367a:	8bb9      	ldrh	r1, [r7, #28]
 800367c:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <BSP_LCD_DisplayStringAt+0x174>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4d13      	ldr	r5, [pc, #76]	@ (80036d0 <BSP_LCD_DisplayStringAt+0x178>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	442b      	add	r3, r5
 800368c:	3308      	adds	r3, #8
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	889b      	ldrh	r3, [r3, #4]
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	1ac3      	subs	r3, r0, r3
 8003698:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <BSP_LCD_DisplayStringAt+0x174>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	480c      	ldr	r0, [pc, #48]	@ (80036d0 <BSP_LCD_DisplayStringAt+0x178>)
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	3308      	adds	r3, #8
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80036b0:	4299      	cmp	r1, r3
 80036b2:	bf2c      	ite	cs
 80036b4:	2301      	movcs	r3, #1
 80036b6:	2300      	movcc	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	4023      	ands	r3, r4
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1b7      	bne.n	8003632 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}
 80036cc:	200009f8 	.word	0x200009f8
 80036d0:	200009fc 	.word	0x200009fc

080036d4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80036d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af02      	add	r7, sp, #8
 80036dc:	4604      	mov	r4, r0
 80036de:	4608      	mov	r0, r1
 80036e0:	4611      	mov	r1, r2
 80036e2:	461a      	mov	r2, r3
 80036e4:	4623      	mov	r3, r4
 80036e6:	80fb      	strh	r3, [r7, #6]
 80036e8:	4603      	mov	r3, r0
 80036ea:	80bb      	strh	r3, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80036f8:	4b20      	ldr	r3, [pc, #128]	@ (800377c <BSP_LCD_FillRect+0xa8>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4920      	ldr	r1, [pc, #128]	@ (8003780 <BSP_LCD_FillRect+0xac>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe70 	bl	80033f0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8003710:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <BSP_LCD_FillRect+0xa8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <BSP_LCD_FillRect+0xb0>)
 8003716:	2134      	movs	r1, #52	@ 0x34
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	335c      	adds	r3, #92	@ 0x5c
 8003720:	681c      	ldr	r4, [r3, #0]
 8003722:	f7ff fdd9 	bl	80032d8 <BSP_LCD_GetXSize>
 8003726:	4602      	mov	r2, r0
 8003728:	88bb      	ldrh	r3, [r7, #4]
 800372a:	fb03 f202 	mul.w	r2, r3, r2
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4423      	add	r3, r4
 8003736:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8003738:	4b10      	ldr	r3, [pc, #64]	@ (800377c <BSP_LCD_FillRect+0xa8>)
 800373a:	681c      	ldr	r4, [r3, #0]
 800373c:	68fd      	ldr	r5, [r7, #12]
 800373e:	887e      	ldrh	r6, [r7, #2]
 8003740:	f8b7 8000 	ldrh.w	r8, [r7]
 8003744:	f7ff fdc8 	bl	80032d8 <BSP_LCD_GetXSize>
 8003748:	4602      	mov	r2, r0
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	1ad1      	subs	r1, r2, r3
 800374e:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <BSP_LCD_FillRect+0xa8>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	480b      	ldr	r0, [pc, #44]	@ (8003780 <BSP_LCD_FillRect+0xac>)
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4403      	add	r3, r0
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	9100      	str	r1, [sp, #0]
 8003764:	4643      	mov	r3, r8
 8003766:	4632      	mov	r2, r6
 8003768:	4629      	mov	r1, r5
 800376a:	4620      	mov	r0, r4
 800376c:	f000 f9d2 	bl	8003b14 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800377a:	bf00      	nop
 800377c:	200009f8 	.word	0x200009f8
 8003780:	200009fc 	.word	0x200009fc
 8003784:	200008e0 	.word	0x200008e0

08003788 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <BSP_LCD_DisplayOn+0x1c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003796:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <BSP_LCD_DisplayOn+0x1c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4798      	blx	r3
  }
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000a14 	.word	0x20000a14

080037a8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	@ 0x38
 80037ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	4a60      	ldr	r2, [pc, #384]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037be:	4b5e      	ldr	r3, [pc, #376]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a59      	ldr	r2, [pc, #356]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037da:	4b57      	ldr	r3, [pc, #348]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b50      	ldr	r3, [pc, #320]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a4b      	ldr	r2, [pc, #300]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b45      	ldr	r3, [pc, #276]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	4a44      	ldr	r2, [pc, #272]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6313      	str	r3, [r2, #48]	@ 0x30
 800382e:	4b42      	ldr	r3, [pc, #264]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	4a3d      	ldr	r2, [pc, #244]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6313      	str	r3, [r2, #48]	@ 0x30
 800384a:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	4a36      	ldr	r2, [pc, #216]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003860:	f043 0320 	orr.w	r3, r3, #32
 8003864:	6313      	str	r3, [r2, #48]	@ 0x30
 8003866:	4b34      	ldr	r3, [pc, #208]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	4b30      	ldr	r3, [pc, #192]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4a2f      	ldr	r2, [pc, #188]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 800387c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003880:	6313      	str	r3, [r2, #48]	@ 0x30
 8003882:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <BSP_LCD_MspInit+0x190>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800388e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800389c:	2302      	movs	r3, #2
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 80038a0:	230e      	movs	r3, #14
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80038a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a8:	4619      	mov	r1, r3
 80038aa:	4824      	ldr	r0, [pc, #144]	@ (800393c <BSP_LCD_MspInit+0x194>)
 80038ac:	f001 f926 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80038b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80038b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ba:	4619      	mov	r1, r3
 80038bc:	4820      	ldr	r0, [pc, #128]	@ (8003940 <BSP_LCD_MspInit+0x198>)
 80038be:	f001 f91d 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80038c2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80038c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038cc:	4619      	mov	r1, r3
 80038ce:	481d      	ldr	r0, [pc, #116]	@ (8003944 <BSP_LCD_MspInit+0x19c>)
 80038d0:	f001 f914 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80038d4:	2348      	movs	r3, #72	@ 0x48
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80038d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038dc:	4619      	mov	r1, r3
 80038de:	481a      	ldr	r0, [pc, #104]	@ (8003948 <BSP_LCD_MspInit+0x1a0>)
 80038e0:	f001 f90c 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80038e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80038ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ee:	4619      	mov	r1, r3
 80038f0:	4816      	ldr	r0, [pc, #88]	@ (800394c <BSP_LCD_MspInit+0x1a4>)
 80038f2:	f001 f903 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80038f6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80038fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003900:	4619      	mov	r1, r3
 8003902:	4813      	ldr	r0, [pc, #76]	@ (8003950 <BSP_LCD_MspInit+0x1a8>)
 8003904:	f001 f8fa 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003908:	2303      	movs	r3, #3
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 800390c:	2309      	movs	r3, #9
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003914:	4619      	mov	r1, r3
 8003916:	480a      	ldr	r0, [pc, #40]	@ (8003940 <BSP_LCD_MspInit+0x198>)
 8003918:	f001 f8f0 	bl	8004afc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800391c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003926:	4619      	mov	r1, r3
 8003928:	4809      	ldr	r0, [pc, #36]	@ (8003950 <BSP_LCD_MspInit+0x1a8>)
 800392a:	f001 f8e7 	bl	8004afc <HAL_GPIO_Init>
}
 800392e:	bf00      	nop
 8003930:	3738      	adds	r7, #56	@ 0x38
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	40020000 	.word	0x40020000
 8003940:	40020400 	.word	0x40020400
 8003944:	40020800 	.word	0x40020800
 8003948:	40020c00 	.word	0x40020c00
 800394c:	40021400 	.word	0x40021400
 8003950:	40021800 	.word	0x40021800

08003954 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	603a      	str	r2, [r7, #0]
 800395e:	80fb      	strh	r3, [r7, #6]
 8003960:	460b      	mov	r3, r1
 8003962:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <BSP_LCD_DrawPixel+0x44>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <BSP_LCD_DrawPixel+0x48>)
 800396a:	2134      	movs	r1, #52	@ 0x34
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	335c      	adds	r3, #92	@ 0x5c
 8003974:	681c      	ldr	r4, [r3, #0]
 8003976:	88bd      	ldrh	r5, [r7, #4]
 8003978:	f7ff fcae 	bl	80032d8 <BSP_LCD_GetXSize>
 800397c:	4603      	mov	r3, r0
 800397e:	fb03 f205 	mul.w	r2, r3, r5
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4423      	add	r3, r4
 800398a:	461a      	mov	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}
 8003998:	200009f8 	.word	0x200009f8
 800399c:	200008e0 	.word	0x200008e0

080039a0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	603a      	str	r2, [r7, #0]
 80039aa:	80fb      	strh	r3, [r7, #6]
 80039ac:	460b      	mov	r3, r1
 80039ae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80039bc:	4b53      	ldr	r3, [pc, #332]	@ (8003b0c <DrawChar+0x16c>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4953      	ldr	r1, [pc, #332]	@ (8003b10 <DrawChar+0x170>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3308      	adds	r3, #8
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	88db      	ldrh	r3, [r3, #6]
 80039d2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80039d4:	4b4d      	ldr	r3, [pc, #308]	@ (8003b0c <DrawChar+0x16c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	494d      	ldr	r1, [pc, #308]	@ (8003b10 <DrawChar+0x170>)
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3308      	adds	r3, #8
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80039ec:	8a3b      	ldrh	r3, [r7, #16]
 80039ee:	3307      	adds	r3, #7
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	da00      	bge.n	80039f6 <DrawChar+0x56>
 80039f4:	3307      	adds	r3, #7
 80039f6:	10db      	asrs	r3, r3, #3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	8a3b      	ldrh	r3, [r7, #16]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e076      	b.n	8003afa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8003a0c:	8a3b      	ldrh	r3, [r7, #16]
 8003a0e:	3307      	adds	r3, #7
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da00      	bge.n	8003a16 <DrawChar+0x76>
 8003a14:	3307      	adds	r3, #7
 8003a16:	10db      	asrs	r3, r3, #3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8003a26:	8a3b      	ldrh	r3, [r7, #16]
 8003a28:	3307      	adds	r3, #7
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da00      	bge.n	8003a30 <DrawChar+0x90>
 8003a2e:	3307      	adds	r3, #7
 8003a30:	10db      	asrs	r3, r3, #3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d002      	beq.n	8003a3c <DrawChar+0x9c>
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d004      	beq.n	8003a44 <DrawChar+0xa4>
 8003a3a:	e00c      	b.n	8003a56 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	617b      	str	r3, [r7, #20]
        break;
 8003a42:	e016      	b.n	8003a72 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
        break;
 8003a54:	e00d      	b.n	8003a72 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	041a      	lsls	r2, r3, #16
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	4313      	orrs	r3, r2
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	3202      	adds	r2, #2
 8003a6a:	7812      	ldrb	r2, [r2, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
        break;
 8003a70:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e036      	b.n	8003ae6 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8003a78:	8a3a      	ldrh	r2, [r7, #16]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	1ad2      	subs	r2, r2, r3
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	4413      	add	r3, r2
 8003a82:	3b01      	subs	r3, #1
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	b298      	uxth	r0, r3
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <DrawChar+0x16c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	491b      	ldr	r1, [pc, #108]	@ (8003b10 <DrawChar+0x170>)
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	88bb      	ldrh	r3, [r7, #4]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7ff ff4e 	bl	8003954 <BSP_LCD_DrawPixel>
 8003ab8:	e012      	b.n	8003ae0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	b298      	uxth	r0, r3
 8003ac4:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <DrawChar+0x16c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4911      	ldr	r1, [pc, #68]	@ (8003b10 <DrawChar+0x170>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	88bb      	ldrh	r3, [r7, #4]
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7ff ff3a 	bl	8003954 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	8a3b      	ldrh	r3, [r7, #16]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3c4      	bcc.n	8003a78 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8003aee:	88bb      	ldrh	r3, [r7, #4]
 8003af0:	3301      	adds	r3, #1
 8003af2:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	8a7b      	ldrh	r3, [r7, #18]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d384      	bcc.n	8003a0c <DrawChar+0x6c>
  }
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200009f8 	.word	0x200009f8
 8003b10:	200009fc 	.word	0x200009fc

08003b14 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <FillBuffer+0x68>)
 8003b24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b28:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003b2a:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <FillBuffer+0x68>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8003b30:	4a12      	ldr	r2, [pc, #72]	@ (8003b7c <FillBuffer+0x68>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8003b36:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <FillBuffer+0x68>)
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <FillBuffer+0x6c>)
 8003b3a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8003b3c:	480f      	ldr	r0, [pc, #60]	@ (8003b7c <FillBuffer+0x68>)
 8003b3e:	f000 fd51 	bl	80045e4 <HAL_DMA2D_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d115      	bne.n	8003b74 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8003b48:	68f9      	ldr	r1, [r7, #12]
 8003b4a:	480c      	ldr	r0, [pc, #48]	@ (8003b7c <FillBuffer+0x68>)
 8003b4c:	f000 fea8 	bl	80048a0 <HAL_DMA2D_ConfigLayer>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	4806      	ldr	r0, [pc, #24]	@ (8003b7c <FillBuffer+0x68>)
 8003b62:	f000 fd88 	bl	8004676 <HAL_DMA2D_Start>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003b6c:	210a      	movs	r1, #10
 8003b6e:	4803      	ldr	r0, [pc, #12]	@ (8003b7c <FillBuffer+0x68>)
 8003b70:	f000 fdac 	bl	80046cc <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000988 	.word	0x20000988
 8003b80:	4002b000 	.word	0x4002b000

08003b84 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b88:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c34 <BSP_SDRAM_Init+0xb0>)
 8003b8c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003b94:	4b28      	ldr	r3, [pc, #160]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003b96:	2207      	movs	r2, #7
 8003b98:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003b9a:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003ba0:	4b25      	ldr	r3, [pc, #148]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003ba6:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003ba8:	2202      	movs	r2, #2
 8003baa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003bac:	4b22      	ldr	r3, [pc, #136]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003bae:	2202      	movs	r2, #2
 8003bb0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003bb2:	4b21      	ldr	r3, [pc, #132]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003bca:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bcc:	2210      	movs	r2, #16
 8003bce:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003bd0:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bd2:	2240      	movs	r2, #64	@ 0x40
 8003bd4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003bd6:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bd8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003bdc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003bde:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003be4:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bea:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003bec:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bf8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	480c      	ldr	r0, [pc, #48]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003bfe:	f000 f87f 	bl	8003d00 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003c02:	490d      	ldr	r1, [pc, #52]	@ (8003c38 <BSP_SDRAM_Init+0xb4>)
 8003c04:	480a      	ldr	r0, [pc, #40]	@ (8003c30 <BSP_SDRAM_Init+0xac>)
 8003c06:	f003 fc3d 	bl	8007484 <HAL_SDRAM_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <BSP_SDRAM_Init+0xb8>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003c18:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <BSP_SDRAM_Init+0xb8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003c1e:	f240 506a 	movw	r0, #1386	@ 0x56a
 8003c22:	f000 f80d 	bl	8003c40 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8003c26:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <BSP_SDRAM_Init+0xb8>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000a18 	.word	0x20000a18
 8003c34:	a0000140 	.word	0xa0000140
 8003c38:	20000a4c 	.word	0x20000a4c
 8003c3c:	20000428 	.word	0x20000428

08003c40 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c52:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c54:	2208      	movs	r2, #8
 8003c56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c58:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c68:	4923      	ldr	r1, [pc, #140]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6a:	4824      	ldr	r0, [pc, #144]	@ (8003cfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c6c:	f003 fc3e 	bl	80074ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f000 f9c3 	bl	8003ffc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003c76:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c78:	2202      	movs	r2, #2
 8003c7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7e:	2208      	movs	r2, #8
 8003c80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c92:	4919      	ldr	r1, [pc, #100]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c94:	4819      	ldr	r0, [pc, #100]	@ (8003cfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c96:	f003 fc29 	bl	80074ec <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003ca6:	4b14      	ldr	r3, [pc, #80]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca8:	2204      	movs	r2, #4
 8003caa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003cb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cb6:	4910      	ldr	r1, [pc, #64]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cb8:	4810      	ldr	r0, [pc, #64]	@ (8003cfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cba:	f003 fc17 	bl	80074ec <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003cbe:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003cc2:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ccc:	2208      	movs	r2, #8
 8003cce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003cd0:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a07      	ldr	r2, [pc, #28]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cda:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ce0:	4905      	ldr	r1, [pc, #20]	@ (8003cf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce2:	4806      	ldr	r0, [pc, #24]	@ (8003cfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ce4:	f003 fc02 	bl	80074ec <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4804      	ldr	r0, [pc, #16]	@ (8003cfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cec:	f003 fc33 	bl	8007556 <HAL_SDRAM_ProgramRefreshRate>
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000a68 	.word	0x20000a68
 8003cfc:	20000a18 	.word	0x20000a18

08003d00 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b090      	sub	sp, #64	@ 0x40
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80ec 	beq.w	8003eea <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d16:	4b77      	ldr	r3, [pc, #476]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	4a76      	ldr	r2, [pc, #472]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6393      	str	r3, [r2, #56]	@ 0x38
 8003d22:	4b74      	ldr	r3, [pc, #464]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d32:	4b70      	ldr	r3, [pc, #448]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a68      	ldr	r2, [pc, #416]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b66      	ldr	r3, [pc, #408]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	4b62      	ldr	r3, [pc, #392]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	4a61      	ldr	r2, [pc, #388]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d76:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d92:	4b58      	ldr	r3, [pc, #352]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	4b54      	ldr	r3, [pc, #336]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	4a53      	ldr	r2, [pc, #332]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003da8:	f043 0310 	orr.w	r3, r3, #16
 8003dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dae:	4b51      	ldr	r3, [pc, #324]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003dc4:	f043 0320 	orr.w	r3, r3, #32
 8003dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b46      	ldr	r3, [pc, #280]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	4a45      	ldr	r2, [pc, #276]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de6:	4b43      	ldr	r3, [pc, #268]	@ (8003ef4 <BSP_SDRAM_MspInit+0x1f4>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003df2:	2302      	movs	r3, #2
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003df6:	2302      	movs	r3, #2
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003dfe:	230c      	movs	r3, #12
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003e02:	2360      	movs	r3, #96	@ 0x60
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	483a      	ldr	r0, [pc, #232]	@ (8003ef8 <BSP_SDRAM_MspInit+0x1f8>)
 8003e0e:	f000 fe75 	bl	8004afc <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8003e12:	2301      	movs	r3, #1
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4837      	ldr	r0, [pc, #220]	@ (8003efc <BSP_SDRAM_MspInit+0x1fc>)
 8003e1e:	f000 fe6d 	bl	8004afc <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003e22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003e28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4834      	ldr	r0, [pc, #208]	@ (8003f00 <BSP_SDRAM_MspInit+0x200>)
 8003e30:	f000 fe64 	bl	8004afc <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003e34:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4830      	ldr	r0, [pc, #192]	@ (8003f04 <BSP_SDRAM_MspInit+0x204>)
 8003e42:	f000 fe5b 	bl	8004afc <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8003e46:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e50:	4619      	mov	r1, r3
 8003e52:	482d      	ldr	r0, [pc, #180]	@ (8003f08 <BSP_SDRAM_MspInit+0x208>)
 8003e54:	f000 fe52 	bl	8004afc <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003e58:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e62:	4619      	mov	r1, r3
 8003e64:	4829      	ldr	r0, [pc, #164]	@ (8003f0c <BSP_SDRAM_MspInit+0x20c>)
 8003e66:	f000 fe49 	bl	8004afc <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e6a:	4b29      	ldr	r3, [pc, #164]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e72:	2280      	movs	r2, #128	@ 0x80
 8003e74:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e76:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7c:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e7e:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e84:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e86:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e8c:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e8e:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e94:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8003e96:	4b1e      	ldr	r3, [pc, #120]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003e9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ea2:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003eaa:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003eac:	2203      	movs	r2, #3
 8003eae:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003eb0:	4b17      	ldr	r3, [pc, #92]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003eb6:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003ebc:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <BSP_SDRAM_MspInit+0x214>)
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a12      	ldr	r2, [pc, #72]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ec8:	4a11      	ldr	r2, [pc, #68]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8003ece:	4810      	ldr	r0, [pc, #64]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003ed0:	f000 fa78 	bl	80043c4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8003ed4:	480e      	ldr	r0, [pc, #56]	@ (8003f10 <BSP_SDRAM_MspInit+0x210>)
 8003ed6:	f000 f9c7 	bl	8004268 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	210f      	movs	r1, #15
 8003ede:	2038      	movs	r0, #56	@ 0x38
 8003ee0:	f000 f98b 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003ee4:	2038      	movs	r0, #56	@ 0x38
 8003ee6:	f000 f9a4 	bl	8004232 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003eea:	bf00      	nop
 8003eec:	3740      	adds	r7, #64	@ 0x40
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	40020800 	.word	0x40020800
 8003f00:	40020c00 	.word	0x40020c00
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40021400 	.word	0x40021400
 8003f0c:	40021800 	.word	0x40021800
 8003f10:	20000a78 	.word	0x20000a78
 8003f14:	40026410 	.word	0x40026410

08003f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <HAL_Init+0x40>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_Init+0x40>)
 8003f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_Init+0x40>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <HAL_Init+0x40>)
 8003f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f34:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <HAL_Init+0x40>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a07      	ldr	r2, [pc, #28]	@ (8003f58 <HAL_Init+0x40>)
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f40:	2003      	movs	r0, #3
 8003f42:	f000 f94f 	bl	80041e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f46:	200f      	movs	r0, #15
 8003f48:	f000 f808 	bl	8003f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f4c:	f7fe fbc2 	bl	80026d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40023c00 	.word	0x40023c00

08003f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_InitTick+0x54>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_InitTick+0x58>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f967 	bl	800424e <HAL_SYSTICK_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e00e      	b.n	8003fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b0f      	cmp	r3, #15
 8003f8e:	d80a      	bhi.n	8003fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f90:	2200      	movs	r2, #0
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f98:	f000 f92f 	bl	80041fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f9c:	4a06      	ldr	r2, [pc, #24]	@ (8003fb8 <HAL_InitTick+0x5c>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200003e0 	.word	0x200003e0
 8003fb4:	20000430 	.word	0x20000430
 8003fb8:	2000042c 	.word	0x2000042c

08003fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_IncTick+0x20>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_IncTick+0x24>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <HAL_IncTick+0x24>)
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000430 	.word	0x20000430
 8003fe0:	20000ad8 	.word	0x20000ad8

08003fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	@ (8003ff8 <HAL_GetTick+0x14>)
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000ad8 	.word	0x20000ad8

08003ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff ffee 	bl	8003fe4 <HAL_GetTick>
 8004008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004014:	d005      	beq.n	8004022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004016:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <HAL_Delay+0x44>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004022:	bf00      	nop
 8004024:	f7ff ffde 	bl	8003fe4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	429a      	cmp	r2, r3
 8004032:	d8f7      	bhi.n	8004024 <HAL_Delay+0x28>
  {
  }
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000430 	.word	0x20000430

08004044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004054:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <__NVIC_SetPriorityGrouping+0x44>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004060:	4013      	ands	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800406c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004076:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <__NVIC_SetPriorityGrouping+0x44>)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	60d3      	str	r3, [r2, #12]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004090:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	f003 0307 	and.w	r3, r3, #7
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db0b      	blt.n	80040d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4907      	ldr	r1, [pc, #28]	@ (80040e0 <__NVIC_EnableIRQ+0x38>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2001      	movs	r0, #1
 80040ca:	fa00 f202 	lsl.w	r2, r0, r2
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0a      	blt.n	800410e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	490c      	ldr	r1, [pc, #48]	@ (8004130 <__NVIC_SetPriority+0x4c>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	440b      	add	r3, r1
 8004108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800410c:	e00a      	b.n	8004124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4908      	ldr	r1, [pc, #32]	@ (8004134 <__NVIC_SetPriority+0x50>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3b04      	subs	r3, #4
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	440b      	add	r3, r1
 8004122:	761a      	strb	r2, [r3, #24]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000e100 	.word	0xe000e100
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	@ 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f1c3 0307 	rsb	r3, r3, #7
 8004152:	2b04      	cmp	r3, #4
 8004154:	bf28      	it	cs
 8004156:	2304      	movcs	r3, #4
 8004158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3304      	adds	r3, #4
 800415e:	2b06      	cmp	r3, #6
 8004160:	d902      	bls.n	8004168 <NVIC_EncodePriority+0x30>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3b03      	subs	r3, #3
 8004166:	e000      	b.n	800416a <NVIC_EncodePriority+0x32>
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	401a      	ands	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004180:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43d9      	mvns	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	4313      	orrs	r3, r2
         );
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	@ 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041b0:	d301      	bcc.n	80041b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00f      	b.n	80041d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b6:	4a0a      	ldr	r2, [pc, #40]	@ (80041e0 <SysTick_Config+0x40>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041be:	210f      	movs	r1, #15
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041c4:	f7ff ff8e 	bl	80040e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <SysTick_Config+0x40>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ce:	4b04      	ldr	r3, [pc, #16]	@ (80041e0 <SysTick_Config+0x40>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010

080041e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff29 	bl	8004044 <__NVIC_SetPriorityGrouping>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800420c:	f7ff ff3e 	bl	800408c <__NVIC_GetPriorityGrouping>
 8004210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff ff8e 	bl	8004138 <NVIC_EncodePriority>
 800421c:	4602      	mov	r2, r0
 800421e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff5d 	bl	80040e4 <__NVIC_SetPriority>
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	4603      	mov	r3, r0
 800423a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff31 	bl	80040a8 <__NVIC_EnableIRQ>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ffa2 	bl	80041a0 <SysTick_Config>
 800425c:	4603      	mov	r3, r0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004274:	f7ff feb6 	bl	8003fe4 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e099      	b.n	80043b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a4:	e00f      	b.n	80042c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042a6:	f7ff fe9d 	bl	8003fe4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d908      	bls.n	80042c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2203      	movs	r2, #3
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e078      	b.n	80043b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e8      	bne.n	80042a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4b38      	ldr	r3, [pc, #224]	@ (80043c0 <HAL_DMA_Init+0x158>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	2b04      	cmp	r3, #4
 800431e:	d107      	bne.n	8004330 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	4313      	orrs	r3, r2
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0307 	bic.w	r3, r3, #7
 8004346:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	2b04      	cmp	r3, #4
 8004358:	d117      	bne.n	800438a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8bd 	bl	80044ec <DMA_CheckFifoParam>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2240      	movs	r2, #64	@ 0x40
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004386:	2301      	movs	r3, #1
 8004388:	e016      	b.n	80043b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f874 	bl	8004480 <DMA_CalcBaseAndBitshift>
 8004398:	4603      	mov	r3, r0
 800439a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	223f      	movs	r2, #63	@ 0x3f
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	f010803f 	.word	0xf010803f

080043c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e050      	b.n	8004478 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d101      	bne.n	80043e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
 80043e4:	e048      	b.n	8004478 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2221      	movs	r2, #33	@ 0x21
 8004424:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f82a 	bl	8004480 <DMA_CalcBaseAndBitshift>
 800442c:	4603      	mov	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004458:	223f      	movs	r2, #63	@ 0x3f
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3b10      	subs	r3, #16
 8004490:	4a14      	ldr	r2, [pc, #80]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800449a:	4a13      	ldr	r2, [pc, #76]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x68>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d909      	bls.n	80044c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	659a      	str	r2, [r3, #88]	@ 0x58
 80044c0:	e007      	b.n	80044d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	aaaaaaab 	.word	0xaaaaaaab
 80044e8:	0800d9ac 	.word	0x0800d9ac

080044ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11f      	bne.n	8004546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d856      	bhi.n	80045ba <DMA_CheckFifoParam+0xce>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <DMA_CheckFifoParam+0x28>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004537 	.word	0x08004537
 800451c:	08004525 	.word	0x08004525
 8004520:	080045bb 	.word	0x080045bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d046      	beq.n	80045be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004534:	e043      	b.n	80045be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800453e:	d140      	bne.n	80045c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e03d      	b.n	80045c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454e:	d121      	bne.n	8004594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d837      	bhi.n	80045c6 <DMA_CheckFifoParam+0xda>
 8004556:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <DMA_CheckFifoParam+0x70>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004573 	.word	0x08004573
 8004564:	0800456d 	.word	0x0800456d
 8004568:	08004585 	.word	0x08004585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	e030      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d025      	beq.n	80045ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004582:	e022      	b.n	80045ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800458c:	d11f      	bne.n	80045ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004592:	e01c      	b.n	80045ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d903      	bls.n	80045a2 <DMA_CheckFifoParam+0xb6>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d003      	beq.n	80045a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045a0:	e018      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      break;
 80045a6:	e015      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	e00b      	b.n	80045d2 <DMA_CheckFifoParam+0xe6>
      break;
 80045ba:	bf00      	nop
 80045bc:	e00a      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e008      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e006      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045d2:	bf00      	nop
    }
  } 
  
  return status; 
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e03b      	b.n	800466e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fd9c 	bl	8001148 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004634:	f023 0107 	bic.w	r1, r3, #7
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800464e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68d1      	ldr	r1, [r2, #12]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	430b      	orrs	r3, r1
 800465c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af02      	add	r7, sp, #8
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_DMA2D_Start+0x1c>
 800468e:	2302      	movs	r3, #2
 8004690:	e018      	b.n	80046c4 <HAL_DMA2D_Start+0x4e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f989 	bl	80049c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d056      	beq.n	8004796 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80046e8:	f7ff fc7c 	bl	8003fe4 <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80046ee:	e04b      	b.n	8004788 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d023      	beq.n	800474a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	f043 0202 	orr.w	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2221      	movs	r2, #33	@ 0x21
 8004734:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0a5      	b.n	8004896 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004750:	d01a      	beq.n	8004788 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7ff fc47 	bl	8003fe4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <HAL_DMA2D_PollForTransfer+0x9c>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10f      	bne.n	8004788 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2203      	movs	r2, #3
 8004778:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e086      	b.n	8004896 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0ac      	beq.n	80046f0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d061      	beq.n	800487c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80047b8:	f7ff fc14 	bl	8003fe4 <HAL_GetTick>
 80047bc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80047be:	e056      	b.n	800486e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02e      	beq.n	8004830 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	f043 0204 	orr.w	r2, r3, #4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f6:	f043 0202 	orr.w	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2229      	movs	r2, #41	@ 0x29
 800481a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2204      	movs	r2, #4
 8004820:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e032      	b.n	8004896 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004836:	d01a      	beq.n	800486e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004838:	f7ff fbd4 	bl	8003fe4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d302      	bcc.n	800484e <HAL_DMA2D_PollForTransfer+0x182>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2203      	movs	r2, #3
 800485e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e013      	b.n	8004896 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0a1      	beq.n	80047c0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2212      	movs	r2, #18
 8004882:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_DMA2D_ConfigLayer+0x20>
 80048bc:	2302      	movs	r3, #2
 80048be:	e079      	b.n	80049b4 <HAL_DMA2D_ConfigLayer+0x114>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3318      	adds	r3, #24
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80048ea:	4b35      	ldr	r3, [pc, #212]	@ (80049c0 <HAL_DMA2D_ConfigLayer+0x120>)
 80048ec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b0a      	cmp	r3, #10
 80048f4:	d003      	beq.n	80048fe <HAL_DMA2D_ConfigLayer+0x5e>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d107      	bne.n	800490e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e005      	b.n	800491a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d120      	bne.n	8004962 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	43db      	mvns	r3, r3
 800492a:	ea02 0103 	and.w	r1, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	430a      	orrs	r2, r1
 8004936:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b0a      	cmp	r3, #10
 8004948:	d003      	beq.n	8004952 <HAL_DMA2D_ConfigLayer+0xb2>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b09      	cmp	r3, #9
 8004950:	d127      	bne.n	80049a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004960:	e01f      	b.n	80049a2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	43db      	mvns	r3, r3
 800496c:	ea02 0103 	and.w	r1, r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	430a      	orrs	r2, r1
 8004978:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b0a      	cmp	r3, #10
 800498a:	d003      	beq.n	8004994 <HAL_DMA2D_ConfigLayer+0xf4>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b09      	cmp	r3, #9
 8004992:	d106      	bne.n	80049a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80049a0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	ff03000f 	.word	0xff03000f

080049c4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b08b      	sub	sp, #44	@ 0x2c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	041a      	lsls	r2, r3, #16
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049fc:	d174      	bne.n	8004ae8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004a04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004a14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d108      	bne.n	8004a36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a34:	e053      	b.n	8004ade <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d106      	bne.n	8004a4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4a:	e048      	b.n	8004ade <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d111      	bne.n	8004a78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	0cdb      	lsrs	r3, r3, #19
 8004a58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	0a9b      	lsrs	r3, r3, #10
 8004a5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	02db      	lsls	r3, r3, #11
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a76:	e032      	b.n	8004ade <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d117      	bne.n	8004ab0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	0fdb      	lsrs	r3, r3, #31
 8004a84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	0cdb      	lsrs	r3, r3, #19
 8004a8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	0adb      	lsrs	r3, r3, #11
 8004a90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	08db      	lsrs	r3, r3, #3
 8004a96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	029b      	lsls	r3, r3, #10
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	03db      	lsls	r3, r3, #15
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aae:	e016      	b.n	8004ade <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	0f1b      	lsrs	r3, r3, #28
 8004ab4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	0d1b      	lsrs	r3, r3, #20
 8004aba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	0b1b      	lsrs	r3, r3, #12
 8004ac0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	011a      	lsls	r2, r3, #4
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	031b      	lsls	r3, r3, #12
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004ae6:	e003      	b.n	8004af0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	60da      	str	r2, [r3, #12]
}
 8004af0:	bf00      	nop
 8004af2:	372c      	adds	r7, #44	@ 0x2c
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	@ 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	e177      	b.n	8004e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b18:	2201      	movs	r2, #1
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	f040 8166 	bne.w	8004e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d005      	beq.n	8004b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d130      	bne.n	8004bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	2203      	movs	r2, #3
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b84:	2201      	movs	r2, #1
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 0201 	and.w	r2, r3, #1
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d017      	beq.n	8004bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d123      	bne.n	8004c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	08da      	lsrs	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3208      	adds	r2, #8
 8004c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	220f      	movs	r2, #15
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	08da      	lsrs	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3208      	adds	r2, #8
 8004c3a:	69b9      	ldr	r1, [r7, #24]
 8004c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0203 	and.w	r2, r3, #3
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80c0 	beq.w	8004e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b66      	ldr	r3, [pc, #408]	@ (8004e20 <HAL_GPIO_Init+0x324>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	4a65      	ldr	r2, [pc, #404]	@ (8004e20 <HAL_GPIO_Init+0x324>)
 8004c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c92:	4b63      	ldr	r3, [pc, #396]	@ (8004e20 <HAL_GPIO_Init+0x324>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c9e:	4a61      	ldr	r2, [pc, #388]	@ (8004e24 <HAL_GPIO_Init+0x328>)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	220f      	movs	r2, #15
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a58      	ldr	r2, [pc, #352]	@ (8004e28 <HAL_GPIO_Init+0x32c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d037      	beq.n	8004d3a <HAL_GPIO_Init+0x23e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a57      	ldr	r2, [pc, #348]	@ (8004e2c <HAL_GPIO_Init+0x330>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_GPIO_Init+0x23a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a56      	ldr	r2, [pc, #344]	@ (8004e30 <HAL_GPIO_Init+0x334>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02b      	beq.n	8004d32 <HAL_GPIO_Init+0x236>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a55      	ldr	r2, [pc, #340]	@ (8004e34 <HAL_GPIO_Init+0x338>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d025      	beq.n	8004d2e <HAL_GPIO_Init+0x232>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a54      	ldr	r2, [pc, #336]	@ (8004e38 <HAL_GPIO_Init+0x33c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01f      	beq.n	8004d2a <HAL_GPIO_Init+0x22e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a53      	ldr	r2, [pc, #332]	@ (8004e3c <HAL_GPIO_Init+0x340>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d019      	beq.n	8004d26 <HAL_GPIO_Init+0x22a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	@ (8004e40 <HAL_GPIO_Init+0x344>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_GPIO_Init+0x226>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a51      	ldr	r2, [pc, #324]	@ (8004e44 <HAL_GPIO_Init+0x348>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00d      	beq.n	8004d1e <HAL_GPIO_Init+0x222>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a50      	ldr	r2, [pc, #320]	@ (8004e48 <HAL_GPIO_Init+0x34c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <HAL_GPIO_Init+0x21e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8004e4c <HAL_GPIO_Init+0x350>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_GPIO_Init+0x21a>
 8004d12:	2309      	movs	r3, #9
 8004d14:	e012      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d16:	230a      	movs	r3, #10
 8004d18:	e010      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	e00e      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d1e:	2307      	movs	r3, #7
 8004d20:	e00c      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d22:	2306      	movs	r3, #6
 8004d24:	e00a      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d26:	2305      	movs	r3, #5
 8004d28:	e008      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e006      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e004      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e002      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_GPIO_Init+0x240>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	f002 0203 	and.w	r2, r2, #3
 8004d42:	0092      	lsls	r2, r2, #2
 8004d44:	4093      	lsls	r3, r2
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d4c:	4935      	ldr	r1, [pc, #212]	@ (8004e24 <HAL_GPIO_Init+0x328>)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d7e:	4a34      	ldr	r2, [pc, #208]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d84:	4b32      	ldr	r3, [pc, #200]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004da8:	4a29      	ldr	r2, [pc, #164]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dae:	4b28      	ldr	r3, [pc, #160]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dfc:	4a14      	ldr	r2, [pc, #80]	@ (8004e50 <HAL_GPIO_Init+0x354>)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3301      	adds	r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	f67f ae84 	bls.w	8004b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	3724      	adds	r7, #36	@ 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40013800 	.word	0x40013800
 8004e28:	40020000 	.word	0x40020000
 8004e2c:	40020400 	.word	0x40020400
 8004e30:	40020800 	.word	0x40020800
 8004e34:	40020c00 	.word	0x40020c00
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40021400 	.word	0x40021400
 8004e40:	40021800 	.word	0x40021800
 8004e44:	40021c00 	.word	0x40021c00
 8004e48:	40022000 	.word	0x40022000
 8004e4c:	40022400 	.word	0x40022400
 8004e50:	40013c00 	.word	0x40013c00

08004e54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e0d9      	b.n	8005024 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e70:	2201      	movs	r2, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	f040 80c9 	bne.w	800501e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800503c <HAL_GPIO_DeInit+0x1e8>)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	089b      	lsrs	r3, r3, #2
 8004e92:	3302      	adds	r3, #2
 8004e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	220f      	movs	r2, #15
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a63      	ldr	r2, [pc, #396]	@ (8005040 <HAL_GPIO_DeInit+0x1ec>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d037      	beq.n	8004f26 <HAL_GPIO_DeInit+0xd2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a62      	ldr	r2, [pc, #392]	@ (8005044 <HAL_GPIO_DeInit+0x1f0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d031      	beq.n	8004f22 <HAL_GPIO_DeInit+0xce>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a61      	ldr	r2, [pc, #388]	@ (8005048 <HAL_GPIO_DeInit+0x1f4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02b      	beq.n	8004f1e <HAL_GPIO_DeInit+0xca>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a60      	ldr	r2, [pc, #384]	@ (800504c <HAL_GPIO_DeInit+0x1f8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d025      	beq.n	8004f1a <HAL_GPIO_DeInit+0xc6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a5f      	ldr	r2, [pc, #380]	@ (8005050 <HAL_GPIO_DeInit+0x1fc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01f      	beq.n	8004f16 <HAL_GPIO_DeInit+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8005054 <HAL_GPIO_DeInit+0x200>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d019      	beq.n	8004f12 <HAL_GPIO_DeInit+0xbe>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8005058 <HAL_GPIO_DeInit+0x204>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_GPIO_DeInit+0xba>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800505c <HAL_GPIO_DeInit+0x208>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00d      	beq.n	8004f0a <HAL_GPIO_DeInit+0xb6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a5b      	ldr	r2, [pc, #364]	@ (8005060 <HAL_GPIO_DeInit+0x20c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <HAL_GPIO_DeInit+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8005064 <HAL_GPIO_DeInit+0x210>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_GPIO_DeInit+0xae>
 8004efe:	2309      	movs	r3, #9
 8004f00:	e012      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f02:	230a      	movs	r3, #10
 8004f04:	e010      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f06:	2308      	movs	r3, #8
 8004f08:	e00e      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f0a:	2307      	movs	r3, #7
 8004f0c:	e00c      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e00a      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e008      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e004      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_DeInit+0xd4>
 8004f26:	2300      	movs	r3, #0
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	f002 0203 	and.w	r2, r2, #3
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	4093      	lsls	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d132      	bne.n	8004f9e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f38:	4b4b      	ldr	r3, [pc, #300]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	4949      	ldr	r1, [pc, #292]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f46:	4b48      	ldr	r3, [pc, #288]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	4946      	ldr	r1, [pc, #280]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f54:	4b44      	ldr	r3, [pc, #272]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	4942      	ldr	r1, [pc, #264]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f62:	4b41      	ldr	r3, [pc, #260]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	493f      	ldr	r1, [pc, #252]	@ (8005068 <HAL_GPIO_DeInit+0x214>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	220f      	movs	r2, #15
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f80:	4a2e      	ldr	r2, [pc, #184]	@ (800503c <HAL_GPIO_DeInit+0x1e8>)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	3302      	adds	r3, #2
 8004f88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	482a      	ldr	r0, [pc, #168]	@ (800503c <HAL_GPIO_DeInit+0x1e8>)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	400a      	ands	r2, r1
 8004f98:	3302      	adds	r3, #2
 8004f9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	2103      	movs	r1, #3
 8004fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	401a      	ands	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	08da      	lsrs	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3208      	adds	r2, #8
 8004fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	220f      	movs	r2, #15
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	08d2      	lsrs	r2, r2, #3
 8004fd4:	4019      	ands	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3208      	adds	r2, #8
 8004fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	2103      	movs	r1, #3
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	401a      	ands	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2103      	movs	r1, #3
 8005012:	fa01 f303 	lsl.w	r3, r1, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	401a      	ands	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	3301      	adds	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	f67f af22 	bls.w	8004e70 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40013800 	.word	0x40013800
 8005040:	40020000 	.word	0x40020000
 8005044:	40020400 	.word	0x40020400
 8005048:	40020800 	.word	0x40020800
 800504c:	40020c00 	.word	0x40020c00
 8005050:	40021000 	.word	0x40021000
 8005054:	40021400 	.word	0x40021400
 8005058:	40021800 	.word	0x40021800
 800505c:	40021c00 	.word	0x40021c00
 8005060:	40022000 	.word	0x40022000
 8005064:	40022400 	.word	0x40022400
 8005068:	40013c00 	.word	0x40013c00

0800506c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e001      	b.n	800508e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
 80050a8:	4613      	mov	r3, r2
 80050aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050ac:	787b      	ldrb	r3, [r7, #1]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050b8:	e003      	b.n	80050c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ba:	887b      	ldrh	r3, [r7, #2]
 80050bc:	041a      	lsls	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	619a      	str	r2, [r3, #24]
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050e0:	887a      	ldrh	r2, [r7, #2]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4013      	ands	r3, r2
 80050e6:	041a      	lsls	r2, r3, #16
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	43d9      	mvns	r1, r3
 80050ec:	887b      	ldrh	r3, [r7, #2]
 80050ee:	400b      	ands	r3, r1
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	619a      	str	r2, [r3, #24]
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e12b      	b.n	800536e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fac2 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	@ 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005168:	f001 ffa4 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4a81      	ldr	r2, [pc, #516]	@ (8005378 <HAL_I2C_Init+0x274>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d807      	bhi.n	8005188 <HAL_I2C_Init+0x84>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a80      	ldr	r2, [pc, #512]	@ (800537c <HAL_I2C_Init+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	bf94      	ite	ls
 8005180:	2301      	movls	r3, #1
 8005182:	2300      	movhi	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e006      	b.n	8005196 <HAL_I2C_Init+0x92>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a7d      	ldr	r2, [pc, #500]	@ (8005380 <HAL_I2C_Init+0x27c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	bf94      	ite	ls
 8005190:	2301      	movls	r3, #1
 8005192:	2300      	movhi	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0e7      	b.n	800536e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a78      	ldr	r2, [pc, #480]	@ (8005384 <HAL_I2C_Init+0x280>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005378 <HAL_I2C_Init+0x274>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <HAL_I2C_Init+0xd4>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	e009      	b.n	80051ec <HAL_I2C_Init+0xe8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4a69      	ldr	r2, [pc, #420]	@ (8005388 <HAL_I2C_Init+0x284>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	3301      	adds	r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80051fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	495c      	ldr	r1, [pc, #368]	@ (8005378 <HAL_I2C_Init+0x274>)
 8005208:	428b      	cmp	r3, r1
 800520a:	d819      	bhi.n	8005240 <HAL_I2C_Init+0x13c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e59      	subs	r1, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fbb1 f3f3 	udiv	r3, r1, r3
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005220:	400b      	ands	r3, r1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_I2C_Init+0x138>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1e59      	subs	r1, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fbb1 f3f3 	udiv	r3, r1, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	e051      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800523c:	2304      	movs	r3, #4
 800523e:	e04f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <HAL_I2C_Init+0x168>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e58      	subs	r0, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e012      	b.n	8005292 <HAL_I2C_Init+0x18e>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e58      	subs	r0, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	0099      	lsls	r1, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_I2C_Init+0x196>
 8005296:	2301      	movs	r3, #1
 8005298:	e022      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_I2C_Init+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e58      	subs	r0, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	440b      	add	r3, r1
 80052b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052be:	e00f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1e58      	subs	r0, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	0099      	lsls	r1, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6809      	ldr	r1, [r1, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800530e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6911      	ldr	r1, [r2, #16]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	000186a0 	.word	0x000186a0
 800537c:	001e847f 	.word	0x001e847f
 8005380:	003d08ff 	.word	0x003d08ff
 8005384:	431bde83 	.word	0x431bde83
 8005388:	10624dd3 	.word	0x10624dd3

0800538c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053a6:	f7fe fe1d 	bl	8003fe4 <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	f040 80d9 	bne.w	800556c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2319      	movs	r3, #25
 80053c0:	2201      	movs	r2, #1
 80053c2:	496d      	ldr	r1, [pc, #436]	@ (8005578 <HAL_I2C_Mem_Write+0x1ec>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fc8b 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0cc      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_I2C_Mem_Write+0x56>
 80053de:	2302      	movs	r3, #2
 80053e0:	e0c5      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d007      	beq.n	8005408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2221      	movs	r2, #33	@ 0x21
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a3a      	ldr	r2, [r7, #32]
 8005432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a4d      	ldr	r2, [pc, #308]	@ (800557c <HAL_I2C_Mem_Write+0x1f0>)
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544a:	88f8      	ldrh	r0, [r7, #6]
 800544c:	893a      	ldrh	r2, [r7, #8]
 800544e:	8979      	ldrh	r1, [r7, #10]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4603      	mov	r3, r0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fac2 	bl	80059e4 <I2C_RequestMemoryWrite>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d052      	beq.n	800550c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e081      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fd50 	bl	8005f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06b      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d11b      	bne.n	800550c <HAL_I2C_Mem_Write+0x180>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d017      	beq.n	800550c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1aa      	bne.n	800546a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fd43 	bl	8005fa4 <I2C_WaitOnBTFFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	2b04      	cmp	r3, #4
 800552a:	d107      	bne.n	800553c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e016      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	00100002 	.word	0x00100002
 800557c:	ffff0000 	.word	0xffff0000

08005580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	@ 0x30
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800559a:	f7fe fd23 	bl	8003fe4 <HAL_GetTick>
 800559e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	f040 8214 	bne.w	80059d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2319      	movs	r3, #25
 80055b4:	2201      	movs	r2, #1
 80055b6:	497b      	ldr	r1, [pc, #492]	@ (80057a4 <HAL_I2C_Mem_Read+0x224>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fb91 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e207      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Mem_Read+0x56>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e200      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d007      	beq.n	80055fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2222      	movs	r2, #34	@ 0x22
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2240      	movs	r2, #64	@ 0x40
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800562c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a5b      	ldr	r2, [pc, #364]	@ (80057a8 <HAL_I2C_Mem_Read+0x228>)
 800563c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800563e:	88f8      	ldrh	r0, [r7, #6]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4603      	mov	r3, r0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fa5e 	bl	8005b10 <I2C_RequestMemoryRead>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e1bc      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d113      	bne.n	800568e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e190      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005692:	2b01      	cmp	r3, #1
 8005694:	d11b      	bne.n	80056ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e170      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d11b      	bne.n	800570e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	e150      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005724:	e144      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572a:	2b03      	cmp	r3, #3
 800572c:	f200 80f1 	bhi.w	8005912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005734:	2b01      	cmp	r3, #1
 8005736:	d123      	bne.n	8005780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800573a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fc79 	bl	8006034 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e145      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800577e:	e117      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005784:	2b02      	cmp	r3, #2
 8005786:	d14e      	bne.n	8005826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	2200      	movs	r2, #0
 8005790:	4906      	ldr	r1, [pc, #24]	@ (80057ac <HAL_I2C_Mem_Read+0x22c>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 faa4 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e11a      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
 80057a2:	bf00      	nop
 80057a4:	00100002 	.word	0x00100002
 80057a8:	ffff0000 	.word	0xffff0000
 80057ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005824:	e0c4      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	2200      	movs	r2, #0
 800582e:	496c      	ldr	r1, [pc, #432]	@ (80059e0 <HAL_I2C_Mem_Read+0x460>)
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fa55 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0cb      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005888:	2200      	movs	r2, #0
 800588a:	4955      	ldr	r1, [pc, #340]	@ (80059e0 <HAL_I2C_Mem_Read+0x460>)
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fa27 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e09d      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005910:	e04e      	b.n	80059b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005914:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fb8c 	bl	8006034 <I2C_WaitOnRXNEFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e058      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d124      	bne.n	80059b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	2b03      	cmp	r3, #3
 800596c:	d107      	bne.n	800597e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f aeb6 	bne.w	8005726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	@ 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	00010004 	.word	0x00010004

080059e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f960 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a34:	d103      	bne.n	8005a3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e05f      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	6a3a      	ldr	r2, [r7, #32]
 8005a56:	492d      	ldr	r1, [pc, #180]	@ (8005b0c <I2C_RequestMemoryWrite+0x128>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f9bb 	bl	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e04c      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fa46 	bl	8005f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d107      	bne.n	8005aa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e02b      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e021      	b.n	8005b00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005acc:	6a39      	ldr	r1, [r7, #32]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa20 	bl	8005f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d107      	bne.n	8005af2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e005      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af6:	893b      	ldrh	r3, [r7, #8]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	00010002 	.word	0x00010002

08005b10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	817b      	strh	r3, [r7, #10]
 8005b22:	460b      	mov	r3, r1
 8005b24:	813b      	strh	r3, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f8c2 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b70:	d103      	bne.n	8005b7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0aa      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b7e:	897b      	ldrh	r3, [r7, #10]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	4952      	ldr	r1, [pc, #328]	@ (8005cdc <I2C_RequestMemoryRead+0x1cc>)
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f91d 	bl	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e097      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f9a8 	bl	8005f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d107      	bne.n	8005be2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e076      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d105      	bne.n	8005bf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bec:	893b      	ldrh	r3, [r7, #8]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	e021      	b.n	8005c3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c08:	6a39      	ldr	r1, [r7, #32]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f982 	bl	8005f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d107      	bne.n	8005c2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e050      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3e:	6a39      	ldr	r1, [r7, #32]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f967 	bl	8005f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00d      	beq.n	8005c68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d107      	bne.n	8005c64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e035      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f82b 	bl	8005ce0 <I2C_WaitOnFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c9e:	d103      	bne.n	8005ca8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e013      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cac:	897b      	ldrh	r3, [r7, #10]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	6a3a      	ldr	r2, [r7, #32]
 8005cc0:	4906      	ldr	r1, [pc, #24]	@ (8005cdc <I2C_RequestMemoryRead+0x1cc>)
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f886 	bl	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	00010002 	.word	0x00010002

08005ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf0:	e048      	b.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf8:	d044      	beq.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfa:	f7fe f973 	bl	8003fe4 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d139      	bne.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10d      	bne.n	8005d36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	43da      	mvns	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	e00c      	b.n	8005d50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d116      	bne.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	f043 0220 	orr.w	r2, r3, #32
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e023      	b.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10d      	bne.n	8005daa <I2C_WaitOnFlagUntilTimeout+0xca>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	43da      	mvns	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	e00c      	b.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	43da      	mvns	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d093      	beq.n	8005cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de2:	e071      	b.n	8005ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df2:	d123      	bne.n	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	f043 0204 	orr.w	r2, r3, #4
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e067      	b.n	8005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e42:	d041      	beq.n	8005ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e44:	f7fe f8ce 	bl	8003fe4 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d136      	bne.n	8005ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10c      	bne.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e00b      	b.n	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	43da      	mvns	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e021      	b.n	8005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10c      	bne.n	8005eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	43da      	mvns	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	e00b      	b.n	8005f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f af6d 	bne.w	8005de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f20:	e034      	b.n	8005f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f8e3 	bl	80060ee <I2C_IsAcknowledgeFailed>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e034      	b.n	8005f9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f38:	d028      	beq.n	8005f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3a:	f7fe f853 	bl	8003fe4 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11d      	bne.n	8005f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b80      	cmp	r3, #128	@ 0x80
 8005f5c:	d016      	beq.n	8005f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f96:	2b80      	cmp	r3, #128	@ 0x80
 8005f98:	d1c3      	bne.n	8005f22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fb0:	e034      	b.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f89b 	bl	80060ee <I2C_IsAcknowledgeFailed>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e034      	b.n	800602c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fc8:	d028      	beq.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fca:	f7fe f80b 	bl	8003fe4 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11d      	bne.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d016      	beq.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006008:	f043 0220 	orr.w	r2, r3, #32
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e007      	b.n	800602c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b04      	cmp	r3, #4
 8006028:	d1c3      	bne.n	8005fb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006040:	e049      	b.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b10      	cmp	r3, #16
 800604e:	d119      	bne.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0210 	mvn.w	r2, #16
 8006058:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e030      	b.n	80060e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006084:	f7fd ffae 	bl	8003fe4 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d302      	bcc.n	800609a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d11d      	bne.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b40      	cmp	r3, #64	@ 0x40
 80060a6:	d016      	beq.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e007      	b.n	80060e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e0:	2b40      	cmp	r3, #64	@ 0x40
 80060e2:	d1ae      	bne.n	8006042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006104:	d11b      	bne.n	800613e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800610e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	f043 0204 	orr.w	r2, r3, #4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b20      	cmp	r3, #32
 8006160:	d129      	bne.n	80061b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2224      	movs	r2, #36	@ 0x24
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0210 	bic.w	r2, r2, #16
 8006188:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d12a      	bne.n	8006234 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2224      	movs	r2, #36	@ 0x24
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	f023 030f 	bic.w	r3, r3, #15
 8006204:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	b29a      	uxth	r2, r3
 800620a:	89fb      	ldrh	r3, [r7, #14]
 800620c:	4313      	orrs	r3, r2
 800620e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	89fa      	ldrh	r2, [r7, #14]
 8006216:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e08f      	b.n	8006374 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fb fb3d 	bl	80018e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006284:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6999      	ldr	r1, [r3, #24]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800629a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	041b      	lsls	r3, r3, #16
 80062c6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a19      	ldr	r1, [r3, #32]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	430a      	orrs	r2, r1
 8006300:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006324:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0206 	orr.w	r2, r2, #6
 8006350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800637c:	b5b0      	push	{r4, r5, r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_LTDC_ConfigLayer+0x1a>
 8006392:	2302      	movs	r3, #2
 8006394:	e02c      	b.n	80063f0 <HAL_LTDC_ConfigLayer+0x74>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2134      	movs	r1, #52	@ 0x34
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f83b 	bl	800644c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bdb0      	pop	{r4, r5, r7, pc}

080063f8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_LTDC_EnableDither+0x16>
 800640a:	2302      	movs	r3, #2
 800640c:	e016      	b.n	800643c <HAL_LTDC_EnableDither+0x44>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800641e:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <HAL_LTDC_EnableDither+0x50>)
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	4a09      	ldr	r2, [pc, #36]	@ (8006448 <HAL_LTDC_EnableDither+0x50>)
 8006424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006428:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40016800 	.word	0x40016800

0800644c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800644c:	b480      	push	{r7}
 800644e:	b089      	sub	sp, #36	@ 0x24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	0c1b      	lsrs	r3, r3, #16
 8006464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006468:	4413      	add	r3, r2
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	@ 0x84
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	4611      	mov	r1, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	01d2      	lsls	r2, r2, #7
 8006488:	440a      	add	r2, r1
 800648a:	3284      	adds	r2, #132	@ 0x84
 800648c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006490:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4619      	mov	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	440b      	add	r3, r1
 80064b2:	3384      	adds	r3, #132	@ 0x84
 80064b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064ca:	4413      	add	r3, r2
 80064cc:	041b      	lsls	r3, r3, #16
 80064ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	01db      	lsls	r3, r3, #7
 80064da:	4413      	add	r3, r2
 80064dc:	3384      	adds	r3, #132	@ 0x84
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	4611      	mov	r1, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	01d2      	lsls	r2, r2, #7
 80064ea:	440a      	add	r2, r1
 80064ec:	3284      	adds	r2, #132	@ 0x84
 80064ee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80064f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006502:	4413      	add	r3, r2
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	01db      	lsls	r3, r3, #7
 8006510:	440b      	add	r3, r1
 8006512:	3384      	adds	r3, #132	@ 0x84
 8006514:	4619      	mov	r1, r3
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4313      	orrs	r3, r2
 800651a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	01db      	lsls	r3, r3, #7
 8006526:	4413      	add	r3, r2
 8006528:	3384      	adds	r3, #132	@ 0x84
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	4611      	mov	r1, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	01d2      	lsls	r2, r2, #7
 8006536:	440a      	add	r2, r1
 8006538:	3284      	adds	r2, #132	@ 0x84
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	01db      	lsls	r3, r3, #7
 800654a:	4413      	add	r3, r2
 800654c:	3384      	adds	r3, #132	@ 0x84
 800654e:	461a      	mov	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006578:	461a      	mov	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	431a      	orrs	r2, r3
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	431a      	orrs	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	440b      	add	r3, r1
 800658e:	3384      	adds	r3, #132	@ 0x84
 8006590:	4619      	mov	r1, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	01db      	lsls	r3, r3, #7
 80065a2:	4413      	add	r3, r2
 80065a4:	3384      	adds	r3, #132	@ 0x84
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	4611      	mov	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	01d2      	lsls	r2, r2, #7
 80065b2:	440a      	add	r2, r1
 80065b4:	3284      	adds	r2, #132	@ 0x84
 80065b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80065ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	4413      	add	r3, r2
 80065c8:	3384      	adds	r3, #132	@ 0x84
 80065ca:	461a      	mov	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	01db      	lsls	r3, r3, #7
 80065dc:	4413      	add	r3, r2
 80065de:	3384      	adds	r3, #132	@ 0x84
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4611      	mov	r1, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	01d2      	lsls	r2, r2, #7
 80065ec:	440a      	add	r2, r1
 80065ee:	3284      	adds	r2, #132	@ 0x84
 80065f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80065f4:	f023 0307 	bic.w	r3, r3, #7
 80065f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	6809      	ldr	r1, [r1, #0]
 8006606:	4608      	mov	r0, r1
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	01c9      	lsls	r1, r1, #7
 800660c:	4401      	add	r1, r0
 800660e:	3184      	adds	r1, #132	@ 0x84
 8006610:	4313      	orrs	r3, r2
 8006612:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	01db      	lsls	r3, r3, #7
 800661e:	4413      	add	r3, r2
 8006620:	3384      	adds	r3, #132	@ 0x84
 8006622:	461a      	mov	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8006632:	2304      	movs	r3, #4
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	e01b      	b.n	8006670 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d102      	bne.n	8006646 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8006640:	2303      	movs	r3, #3
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e014      	b.n	8006670 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d00b      	beq.n	8006666 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006652:	2b02      	cmp	r3, #2
 8006654:	d007      	beq.n	8006666 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800665a:	2b03      	cmp	r3, #3
 800665c:	d003      	beq.n	8006666 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006662:	2b07      	cmp	r3, #7
 8006664:	d102      	bne.n	800666c <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8006666:	2302      	movs	r3, #2
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	e001      	b.n	8006670 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800666c:	2301      	movs	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	01db      	lsls	r3, r3, #7
 800667a:	4413      	add	r3, r2
 800667c:	3384      	adds	r3, #132	@ 0x84
 800667e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	4611      	mov	r1, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	01d2      	lsls	r2, r2, #7
 800668a:	440a      	add	r2, r1
 800668c:	3284      	adds	r2, #132	@ 0x84
 800668e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006692:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6859      	ldr	r1, [r3, #4]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1acb      	subs	r3, r1, r3
 80066aa:	69f9      	ldr	r1, [r7, #28]
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6809      	ldr	r1, [r1, #0]
 80066b6:	4608      	mov	r0, r1
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	01c9      	lsls	r1, r1, #7
 80066bc:	4401      	add	r1, r0
 80066be:	3184      	adds	r1, #132	@ 0x84
 80066c0:	4313      	orrs	r3, r2
 80066c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	01db      	lsls	r3, r3, #7
 80066ce:	4413      	add	r3, r2
 80066d0:	3384      	adds	r3, #132	@ 0x84
 80066d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	4611      	mov	r1, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	01d2      	lsls	r2, r2, #7
 80066de:	440a      	add	r2, r1
 80066e0:	3284      	adds	r2, #132	@ 0x84
 80066e2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80066e6:	f023 0307 	bic.w	r3, r3, #7
 80066ea:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	01db      	lsls	r3, r3, #7
 80066f6:	4413      	add	r3, r2
 80066f8:	3384      	adds	r3, #132	@ 0x84
 80066fa:	461a      	mov	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	01db      	lsls	r3, r3, #7
 800670c:	4413      	add	r3, r2
 800670e:	3384      	adds	r3, #132	@ 0x84
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	4611      	mov	r1, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	01d2      	lsls	r2, r2, #7
 800671c:	440a      	add	r2, r1
 800671e:	3284      	adds	r2, #132	@ 0x84
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	6013      	str	r3, [r2, #0]
}
 8006726:	bf00      	nop
 8006728:	3724      	adds	r7, #36	@ 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	4a1f      	ldr	r2, [pc, #124]	@ (80067c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800674c:	6413      	str	r3, [r2, #64]	@ 0x40
 800674e:	4b1d      	ldr	r3, [pc, #116]	@ (80067c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800675a:	4b1b      	ldr	r3, [pc, #108]	@ (80067c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006760:	f7fd fc40 	bl	8003fe4 <HAL_GetTick>
 8006764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006766:	e009      	b.n	800677c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006768:	f7fd fc3c 	bl	8003fe4 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006776:	d901      	bls.n	800677c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e01f      	b.n	80067bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800677c:	4b13      	ldr	r3, [pc, #76]	@ (80067cc <HAL_PWREx_EnableOverDrive+0x98>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006788:	d1ee      	bne.n	8006768 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800678a:	4b11      	ldr	r3, [pc, #68]	@ (80067d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006790:	f7fd fc28 	bl	8003fe4 <HAL_GetTick>
 8006794:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006796:	e009      	b.n	80067ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006798:	f7fd fc24 	bl	8003fe4 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067a6:	d901      	bls.n	80067ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e007      	b.n	80067bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067ac:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <HAL_PWREx_EnableOverDrive+0x98>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067b8:	d1ee      	bne.n	8006798 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40023800 	.word	0x40023800
 80067c8:	420e0040 	.word	0x420e0040
 80067cc:	40007000 	.word	0x40007000
 80067d0:	420e0044 	.word	0x420e0044

080067d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e267      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d075      	beq.n	80068de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067f2:	4b88      	ldr	r3, [pc, #544]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d00c      	beq.n	8006818 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067fe:	4b85      	ldr	r3, [pc, #532]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006806:	2b08      	cmp	r3, #8
 8006808:	d112      	bne.n	8006830 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680a:	4b82      	ldr	r3, [pc, #520]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006816:	d10b      	bne.n	8006830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006818:	4b7e      	ldr	r3, [pc, #504]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d05b      	beq.n	80068dc <HAL_RCC_OscConfig+0x108>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d157      	bne.n	80068dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e242      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006838:	d106      	bne.n	8006848 <HAL_RCC_OscConfig+0x74>
 800683a:	4b76      	ldr	r3, [pc, #472]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a75      	ldr	r2, [pc, #468]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e01d      	b.n	8006884 <HAL_RCC_OscConfig+0xb0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x98>
 8006852:	4b70      	ldr	r3, [pc, #448]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a6f      	ldr	r2, [pc, #444]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a6c      	ldr	r2, [pc, #432]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e00b      	b.n	8006884 <HAL_RCC_OscConfig+0xb0>
 800686c:	4b69      	ldr	r3, [pc, #420]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a68      	ldr	r2, [pc, #416]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	4b66      	ldr	r3, [pc, #408]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a65      	ldr	r2, [pc, #404]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 800687e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d013      	beq.n	80068b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fd fbaa 	bl	8003fe4 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006894:	f7fd fba6 	bl	8003fe4 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	@ 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e207      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0xc0>
 80068b2:	e014      	b.n	80068de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b4:	f7fd fb96 	bl	8003fe4 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068bc:	f7fd fb92 	bl	8003fe4 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b64      	cmp	r3, #100	@ 0x64
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e1f3      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ce:	4b51      	ldr	r3, [pc, #324]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCC_OscConfig+0xe8>
 80068da:	e000      	b.n	80068de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d063      	beq.n	80069b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068f6:	4b47      	ldr	r3, [pc, #284]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d11c      	bne.n	800693c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006902:	4b44      	ldr	r3, [pc, #272]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d116      	bne.n	800693c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800690e:	4b41      	ldr	r3, [pc, #260]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_RCC_OscConfig+0x152>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d001      	beq.n	8006926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e1c7      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006926:	4b3b      	ldr	r3, [pc, #236]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4937      	ldr	r1, [pc, #220]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006936:	4313      	orrs	r3, r2
 8006938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693a:	e03a      	b.n	80069b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d020      	beq.n	8006986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006944:	4b34      	ldr	r3, [pc, #208]	@ (8006a18 <HAL_RCC_OscConfig+0x244>)
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fd fb4b 	bl	8003fe4 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006952:	f7fd fb47 	bl	8003fe4 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e1a8      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006964:	4b2b      	ldr	r3, [pc, #172]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	4b28      	ldr	r3, [pc, #160]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4925      	ldr	r1, [pc, #148]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 8006980:	4313      	orrs	r3, r2
 8006982:	600b      	str	r3, [r1, #0]
 8006984:	e015      	b.n	80069b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006986:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <HAL_RCC_OscConfig+0x244>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fd fb2a 	bl	8003fe4 <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fd fb26 	bl	8003fe4 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e187      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d036      	beq.n	8006a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069c6:	4b15      	ldr	r3, [pc, #84]	@ (8006a1c <HAL_RCC_OscConfig+0x248>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fd fb0a 	bl	8003fe4 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d4:	f7fd fb06 	bl	8003fe4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e167      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <HAL_RCC_OscConfig+0x240>)
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCC_OscConfig+0x200>
 80069f2:	e01b      	b.n	8006a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f4:	4b09      	ldr	r3, [pc, #36]	@ (8006a1c <HAL_RCC_OscConfig+0x248>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fa:	f7fd faf3 	bl	8003fe4 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a00:	e00e      	b.n	8006a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a02:	f7fd faef 	bl	8003fe4 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d907      	bls.n	8006a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e150      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
 8006a14:	40023800 	.word	0x40023800
 8006a18:	42470000 	.word	0x42470000
 8006a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a20:	4b88      	ldr	r3, [pc, #544]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1ea      	bne.n	8006a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8097 	beq.w	8006b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3e:	4b81      	ldr	r3, [pc, #516]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	4a7c      	ldr	r2, [pc, #496]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6a:	4b77      	ldr	r3, [pc, #476]	@ (8006c48 <HAL_RCC_OscConfig+0x474>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d118      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a76:	4b74      	ldr	r3, [pc, #464]	@ (8006c48 <HAL_RCC_OscConfig+0x474>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a73      	ldr	r2, [pc, #460]	@ (8006c48 <HAL_RCC_OscConfig+0x474>)
 8006a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a82:	f7fd faaf 	bl	8003fe4 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8a:	f7fd faab 	bl	8003fe4 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e10c      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8006c48 <HAL_RCC_OscConfig+0x474>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d106      	bne.n	8006abe <HAL_RCC_OscConfig+0x2ea>
 8006ab0:	4b64      	ldr	r3, [pc, #400]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab4:	4a63      	ldr	r2, [pc, #396]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006abc:	e01c      	b.n	8006af8 <HAL_RCC_OscConfig+0x324>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d10c      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x30c>
 8006ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	4a5e      	ldr	r2, [pc, #376]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006acc:	f043 0304 	orr.w	r3, r3, #4
 8006ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ade:	e00b      	b.n	8006af8 <HAL_RCC_OscConfig+0x324>
 8006ae0:	4b58      	ldr	r3, [pc, #352]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae4:	4a57      	ldr	r2, [pc, #348]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aec:	4b55      	ldr	r3, [pc, #340]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af0:	4a54      	ldr	r2, [pc, #336]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006af2:	f023 0304 	bic.w	r3, r3, #4
 8006af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d015      	beq.n	8006b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fd fa70 	bl	8003fe4 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b06:	e00a      	b.n	8006b1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b08:	f7fd fa6c 	bl	8003fe4 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e0cb      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1e:	4b49      	ldr	r3, [pc, #292]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0ee      	beq.n	8006b08 <HAL_RCC_OscConfig+0x334>
 8006b2a:	e014      	b.n	8006b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b2c:	f7fd fa5a 	bl	8003fe4 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b32:	e00a      	b.n	8006b4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b34:	f7fd fa56 	bl	8003fe4 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e0b5      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1ee      	bne.n	8006b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d105      	bne.n	8006b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b5c:	4b39      	ldr	r3, [pc, #228]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b60:	4a38      	ldr	r2, [pc, #224]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80a1 	beq.w	8006cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b72:	4b34      	ldr	r3, [pc, #208]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d05c      	beq.n	8006c38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d141      	bne.n	8006c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b86:	4b31      	ldr	r3, [pc, #196]	@ (8006c4c <HAL_RCC_OscConfig+0x478>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fd fa2a 	bl	8003fe4 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fd fa26 	bl	8003fe4 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e087      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba6:	4b27      	ldr	r3, [pc, #156]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	019b      	lsls	r3, r3, #6
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd4:	061b      	lsls	r3, r3, #24
 8006bd6:	491b      	ldr	r1, [pc, #108]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c4c <HAL_RCC_OscConfig+0x478>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be2:	f7fd f9ff 	bl	8003fe4 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bea:	f7fd f9fb 	bl	8003fe4 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e05c      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfc:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0f0      	beq.n	8006bea <HAL_RCC_OscConfig+0x416>
 8006c08:	e054      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0a:	4b10      	ldr	r3, [pc, #64]	@ (8006c4c <HAL_RCC_OscConfig+0x478>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c10:	f7fd f9e8 	bl	8003fe4 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c18:	f7fd f9e4 	bl	8003fe4 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e045      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x444>
 8006c36:	e03d      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e038      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
 8006c44:	40023800 	.word	0x40023800
 8006c48:	40007000 	.word	0x40007000
 8006c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c50:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <HAL_RCC_OscConfig+0x4ec>)
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d028      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d121      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d11a      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c80:	4013      	ands	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d111      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d001      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40023800 	.word	0x40023800

08006cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0cc      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b68      	ldr	r3, [pc, #416]	@ (8006e7c <HAL_RCC_ClockConfig+0x1b8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d90c      	bls.n	8006d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b65      	ldr	r3, [pc, #404]	@ (8006e7c <HAL_RCC_ClockConfig+0x1b8>)
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b63      	ldr	r3, [pc, #396]	@ (8006e7c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0b8      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d020      	beq.n	8006d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d18:	4b59      	ldr	r3, [pc, #356]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	4a58      	ldr	r2, [pc, #352]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d30:	4b53      	ldr	r3, [pc, #332]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	4a52      	ldr	r2, [pc, #328]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d3c:	4b50      	ldr	r3, [pc, #320]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	494d      	ldr	r1, [pc, #308]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d044      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d107      	bne.n	8006d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d62:	4b47      	ldr	r3, [pc, #284]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d119      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e07f      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d003      	beq.n	8006d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d82:	4b3f      	ldr	r3, [pc, #252]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e06f      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d92:	4b3b      	ldr	r3, [pc, #236]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e067      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da2:	4b37      	ldr	r3, [pc, #220]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f023 0203 	bic.w	r2, r3, #3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4934      	ldr	r1, [pc, #208]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db4:	f7fd f916 	bl	8003fe4 <HAL_GetTick>
 8006db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dbc:	f7fd f912 	bl	8003fe4 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e04f      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 020c 	and.w	r2, r3, #12
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d1eb      	bne.n	8006dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de4:	4b25      	ldr	r3, [pc, #148]	@ (8006e7c <HAL_RCC_ClockConfig+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d20c      	bcs.n	8006e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b22      	ldr	r3, [pc, #136]	@ (8006e7c <HAL_RCC_ClockConfig+0x1b8>)
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b20      	ldr	r3, [pc, #128]	@ (8006e7c <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e032      	b.n	8006e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e18:	4b19      	ldr	r3, [pc, #100]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	4916      	ldr	r1, [pc, #88]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e36:	4b12      	ldr	r3, [pc, #72]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	490e      	ldr	r1, [pc, #56]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e4a:	f000 f821 	bl	8006e90 <HAL_RCC_GetSysClockFreq>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	091b      	lsrs	r3, r3, #4
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	490a      	ldr	r1, [pc, #40]	@ (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006e5c:	5ccb      	ldrb	r3, [r1, r3]
 8006e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e62:	4a09      	ldr	r2, [pc, #36]	@ (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e66:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <HAL_RCC_ClockConfig+0x1c8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fd f876 	bl	8003f5c <HAL_InitTick>

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40023c00 	.word	0x40023c00
 8006e80:	40023800 	.word	0x40023800
 8006e84:	0800bedc 	.word	0x0800bedc
 8006e88:	200003e0 	.word	0x200003e0
 8006e8c:	2000042c 	.word	0x2000042c

08006e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e94:	b094      	sub	sp, #80	@ 0x50
 8006e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ea8:	4b79      	ldr	r3, [pc, #484]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 030c 	and.w	r3, r3, #12
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d00d      	beq.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	f200 80e1 	bhi.w	800707c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d003      	beq.n	8006eca <HAL_RCC_GetSysClockFreq+0x3a>
 8006ec2:	e0db      	b.n	800707c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec4:	4b73      	ldr	r3, [pc, #460]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ec8:	e0db      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eca:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ece:	e0d8      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ed8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eda:	4b6d      	ldr	r3, [pc, #436]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x200>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d063      	beq.n	8006fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	099b      	lsrs	r3, r3, #6
 8006eec:	2200      	movs	r2, #0
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f02:	4622      	mov	r2, r4
 8006f04:	462b      	mov	r3, r5
 8006f06:	f04f 0000 	mov.w	r0, #0
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	0159      	lsls	r1, r3, #5
 8006f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f14:	0150      	lsls	r0, r2, #5
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	1a51      	subs	r1, r2, r1
 8006f1e:	6139      	str	r1, [r7, #16]
 8006f20:	4629      	mov	r1, r5
 8006f22:	eb63 0301 	sbc.w	r3, r3, r1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f34:	4659      	mov	r1, fp
 8006f36:	018b      	lsls	r3, r1, #6
 8006f38:	4651      	mov	r1, sl
 8006f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f3e:	4651      	mov	r1, sl
 8006f40:	018a      	lsls	r2, r1, #6
 8006f42:	4651      	mov	r1, sl
 8006f44:	ebb2 0801 	subs.w	r8, r2, r1
 8006f48:	4659      	mov	r1, fp
 8006f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f62:	4690      	mov	r8, r2
 8006f64:	4699      	mov	r9, r3
 8006f66:	4623      	mov	r3, r4
 8006f68:	eb18 0303 	adds.w	r3, r8, r3
 8006f6c:	60bb      	str	r3, [r7, #8]
 8006f6e:	462b      	mov	r3, r5
 8006f70:	eb49 0303 	adc.w	r3, r9, r3
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f82:	4629      	mov	r1, r5
 8006f84:	024b      	lsls	r3, r1, #9
 8006f86:	4621      	mov	r1, r4
 8006f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	024a      	lsls	r2, r1, #9
 8006f90:	4610      	mov	r0, r2
 8006f92:	4619      	mov	r1, r3
 8006f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f96:	2200      	movs	r2, #0
 8006f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fa0:	f7f9 fe62 	bl	8000c68 <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4613      	mov	r3, r2
 8006faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fac:	e058      	b.n	8007060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fae:	4b38      	ldr	r3, [pc, #224]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	099b      	lsrs	r3, r3, #6
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	4611      	mov	r1, r2
 8006fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fbe:	623b      	str	r3, [r7, #32]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	f04f 0000 	mov.w	r0, #0
 8006fd0:	f04f 0100 	mov.w	r1, #0
 8006fd4:	0159      	lsls	r1, r3, #5
 8006fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fda:	0150      	lsls	r0, r2, #5
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007000:	ebb2 040a 	subs.w	r4, r2, sl
 8007004:	eb63 050b 	sbc.w	r5, r3, fp
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	00eb      	lsls	r3, r5, #3
 8007012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007016:	00e2      	lsls	r2, r4, #3
 8007018:	4614      	mov	r4, r2
 800701a:	461d      	mov	r5, r3
 800701c:	4643      	mov	r3, r8
 800701e:	18e3      	adds	r3, r4, r3
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	464b      	mov	r3, r9
 8007024:	eb45 0303 	adc.w	r3, r5, r3
 8007028:	607b      	str	r3, [r7, #4]
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007036:	4629      	mov	r1, r5
 8007038:	028b      	lsls	r3, r1, #10
 800703a:	4621      	mov	r1, r4
 800703c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007040:	4621      	mov	r1, r4
 8007042:	028a      	lsls	r2, r1, #10
 8007044:	4610      	mov	r0, r2
 8007046:	4619      	mov	r1, r3
 8007048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800704a:	2200      	movs	r2, #0
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	61fa      	str	r2, [r7, #28]
 8007050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007054:	f7f9 fe08 	bl	8000c68 <__aeabi_uldivmod>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4613      	mov	r3, r2
 800705e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007060:	4b0b      	ldr	r3, [pc, #44]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x200>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	3301      	adds	r3, #1
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800707a:	e002      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800707c:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x204>)
 800707e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007084:	4618      	mov	r0, r3
 8007086:	3750      	adds	r7, #80	@ 0x50
 8007088:	46bd      	mov	sp, r7
 800708a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800708e:	bf00      	nop
 8007090:	40023800 	.word	0x40023800
 8007094:	00f42400 	.word	0x00f42400
 8007098:	007a1200 	.word	0x007a1200

0800709c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a0:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	200003e0 	.word	0x200003e0

080070b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070b8:	f7ff fff0 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0a9b      	lsrs	r3, r3, #10
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	4903      	ldr	r1, [pc, #12]	@ (80070d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40023800 	.word	0x40023800
 80070d8:	0800beec 	.word	0x0800beec

080070dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070e0:	f7ff ffdc 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b05      	ldr	r3, [pc, #20]	@ (80070fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	0b5b      	lsrs	r3, r3, #13
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	4903      	ldr	r1, [pc, #12]	@ (8007100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f2:	5ccb      	ldrb	r3, [r1, r3]
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40023800 	.word	0x40023800
 8007100:	0800beec 	.word	0x0800beec

08007104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007134:	2b00      	cmp	r3, #0
 8007136:	d075      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007138:	4b91      	ldr	r3, [pc, #580]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800713e:	f7fc ff51 	bl	8003fe4 <HAL_GetTick>
 8007142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007146:	f7fc ff4d 	bl	8003fe4 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e189      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007158:	4b8a      	ldr	r3, [pc, #552]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f0      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	019a      	lsls	r2, r3, #6
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	071b      	lsls	r3, r3, #28
 800717c:	4981      	ldr	r1, [pc, #516]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01f      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007190:	4b7c      	ldr	r3, [pc, #496]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007196:	0f1b      	lsrs	r3, r3, #28
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	019a      	lsls	r2, r3, #6
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	431a      	orrs	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	071b      	lsls	r3, r3, #28
 80071b0:	4974      	ldr	r1, [pc, #464]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071b8:	4b72      	ldr	r3, [pc, #456]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071be:	f023 021f 	bic.w	r2, r3, #31
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	496e      	ldr	r1, [pc, #440]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	019a      	lsls	r2, r3, #6
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	061b      	lsls	r3, r3, #24
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	071b      	lsls	r3, r3, #28
 80071f0:	4964      	ldr	r1, [pc, #400]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071f8:	4b61      	ldr	r3, [pc, #388]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071fe:	f7fc fef1 	bl	8003fe4 <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007204:	e008      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007206:	f7fc feed 	bl	8003fe4 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e129      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007218:	4b5a      	ldr	r3, [pc, #360]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d105      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007238:	2b00      	cmp	r3, #0
 800723a:	d079      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800723c:	4b52      	ldr	r3, [pc, #328]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007242:	f7fc fecf 	bl	8003fe4 <HAL_GetTick>
 8007246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007248:	e008      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800724a:	f7fc fecb 	bl	8003fe4 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e107      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800725c:	4b49      	ldr	r3, [pc, #292]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007268:	d0ef      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d020      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007276:	4b43      	ldr	r3, [pc, #268]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727c:	0f1b      	lsrs	r3, r3, #28
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	019a      	lsls	r2, r3, #6
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	431a      	orrs	r2, r3
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	071b      	lsls	r3, r3, #28
 8007296:	493b      	ldr	r1, [pc, #236]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800729e:	4b39      	ldr	r3, [pc, #228]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072a4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	4934      	ldr	r1, [pc, #208]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01e      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ca:	0e1b      	lsrs	r3, r3, #24
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	019a      	lsls	r2, r3, #6
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	061b      	lsls	r3, r3, #24
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	071b      	lsls	r3, r3, #28
 80072e4:	4927      	ldr	r1, [pc, #156]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072ec:	4b25      	ldr	r3, [pc, #148]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	4922      	ldr	r1, [pc, #136]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007302:	4b21      	ldr	r3, [pc, #132]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007308:	f7fc fe6c 	bl	8003fe4 <HAL_GetTick>
 800730c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800730e:	e008      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007310:	f7fc fe68 	bl	8003fe4 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e0a4      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007322:	4b18      	ldr	r3, [pc, #96]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800732a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800732e:	d1ef      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 808b 	beq.w	8007454 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	4b10      	ldr	r3, [pc, #64]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	4a0f      	ldr	r2, [pc, #60]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800734c:	6413      	str	r3, [r2, #64]	@ 0x40
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800735a:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a0b      	ldr	r2, [pc, #44]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007364:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007366:	f7fc fe3d 	bl	8003fe4 <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800736c:	e010      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800736e:	f7fc fe39 	bl	8003fe4 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d909      	bls.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e075      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007380:	42470068 	.word	0x42470068
 8007384:	40023800 	.word	0x40023800
 8007388:	42470070 	.word	0x42470070
 800738c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007390:	4b38      	ldr	r3, [pc, #224]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0e8      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800739c:	4b36      	ldr	r3, [pc, #216]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d02f      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d028      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073c4:	4b2d      	ldr	r3, [pc, #180]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ca:	4b2c      	ldr	r3, [pc, #176]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073d0:	4a29      	ldr	r2, [pc, #164]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073d6:	4b28      	ldr	r3, [pc, #160]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d114      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073e2:	f7fc fdff 	bl	8003fe4 <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e8:	e00a      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fc fdfb 	bl	8003fe4 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d901      	bls.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e035      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007400:	4b1d      	ldr	r3, [pc, #116]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0ee      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007418:	d10d      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800741a:	4b17      	ldr	r3, [pc, #92]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800742a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800742e:	4912      	ldr	r1, [pc, #72]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007430:	4313      	orrs	r3, r2
 8007432:	608b      	str	r3, [r1, #8]
 8007434:	e005      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	4a0f      	ldr	r2, [pc, #60]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800743c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007440:	6093      	str	r3, [r2, #8]
 8007442:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007444:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800744e:	490a      	ldr	r1, [pc, #40]	@ (8007478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007450:	4313      	orrs	r3, r2
 8007452:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007466:	4b06      	ldr	r3, [pc, #24]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007468:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40007000 	.word	0x40007000
 8007478:	40023800 	.word	0x40023800
 800747c:	42470e40 	.word	0x42470e40
 8007480:	424711e0 	.word	0x424711e0

08007484 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e025      	b.n	80074e4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7f9 ff4d 	bl	800134c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f001 fd53 	bl	8008f70 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	f001 fda8 	bl	800902a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80074fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d101      	bne.n	800750a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007506:	2302      	movs	r3, #2
 8007508:	e021      	b.n	800754e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d002      	beq.n	8007516 <HAL_SDRAM_SendCommand+0x2a>
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b05      	cmp	r3, #5
 8007514:	d118      	bne.n	8007548 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fde8 	bl	80090fc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d104      	bne.n	800753e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2205      	movs	r2, #5
 8007538:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800753c:	e006      	b.n	800754c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007546:	e001      	b.n	800754c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d101      	bne.n	8007570 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
 800756e:	e016      	b.n	800759e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d10f      	bne.n	800759c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fdf3 	bl	8009176 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	e000      	b.n	800759e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e07b      	b.n	80076b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c8:	d009      	beq.n	80075de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	61da      	str	r2, [r3, #28]
 80075d0:	e005      	b.n	80075de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fb f805 	bl	8002608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007614:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007662:	ea42 0103 	orr.w	r1, r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	f003 0104 	and.w	r1, r3, #4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007684:	f003 0210 	and.w	r2, r3, #16
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800769e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e01a      	b.n	8007700 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fa ffd8 	bl	8002698 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007718:	f7fc fc64 	bl	8003fe4 <HAL_GetTick>
 800771c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d001      	beq.n	8007732 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800772e:	2302      	movs	r3, #2
 8007730:	e12a      	b.n	8007988 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_SPI_Transmit+0x36>
 8007738:	88fb      	ldrh	r3, [r7, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e122      	b.n	8007988 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_SPI_Transmit+0x48>
 800774c:	2302      	movs	r3, #2
 800774e:	e11b      	b.n	8007988 <HAL_SPI_Transmit+0x280>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2203      	movs	r2, #3
 800775c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	88fa      	ldrh	r2, [r7, #6]
 8007770:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	88fa      	ldrh	r2, [r7, #6]
 8007776:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779e:	d10f      	bne.n	80077c0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ca:	2b40      	cmp	r3, #64	@ 0x40
 80077cc:	d007      	beq.n	80077de <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e6:	d152      	bne.n	800788e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <HAL_SPI_Transmit+0xee>
 80077f0:	8b7b      	ldrh	r3, [r7, #26]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d145      	bne.n	8007882 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800781a:	e032      	b.n	8007882 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d112      	bne.n	8007850 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782e:	881a      	ldrh	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	1c9a      	adds	r2, r3, #2
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800784e:	e018      	b.n	8007882 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007850:	f7fc fbc8 	bl	8003fe4 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d803      	bhi.n	8007868 <HAL_SPI_Transmit+0x160>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007866:	d102      	bne.n	800786e <HAL_SPI_Transmit+0x166>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e082      	b.n	8007988 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1c7      	bne.n	800781c <HAL_SPI_Transmit+0x114>
 800788c:	e053      	b.n	8007936 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_SPI_Transmit+0x194>
 8007896:	8b7b      	ldrh	r3, [r7, #26]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d147      	bne.n	800792c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	7812      	ldrb	r2, [r2, #0]
 80078a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078c2:	e033      	b.n	800792c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d113      	bne.n	80078fa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078f8:	e018      	b.n	800792c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078fa:	f7fc fb73 	bl	8003fe4 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d803      	bhi.n	8007912 <HAL_SPI_Transmit+0x20a>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007910:	d102      	bne.n	8007918 <HAL_SPI_Transmit+0x210>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e02d      	b.n	8007988 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1c6      	bne.n	80078c4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fbe6 	bl	800810c <SPI_EndRxTxTransaction>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2220      	movs	r2, #32
 800794a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007986:	2300      	movs	r3, #0
  }
}
 8007988:	4618      	mov	r0, r3
 800798a:	3720      	adds	r7, #32
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af02      	add	r7, sp, #8
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d001      	beq.n	80079b0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
 80079ae:	e104      	b.n	8007bba <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Receive+0x2c>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0fc      	b.n	8007bba <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079c8:	d112      	bne.n	80079f0 <HAL_SPI_Receive+0x60>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10e      	bne.n	80079f0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2204      	movs	r2, #4
 80079d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 f8eb 	bl	8007bc2 <HAL_SPI_TransmitReceive>
 80079ec:	4603      	mov	r3, r0
 80079ee:	e0e4      	b.n	8007bba <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079f0:	f7fc faf8 	bl	8003fe4 <HAL_GetTick>
 80079f4:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_SPI_Receive+0x74>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e0da      	b.n	8007bba <HAL_SPI_Receive+0x22a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2204      	movs	r2, #4
 8007a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a52:	d10f      	bne.n	8007a74 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7e:	2b40      	cmp	r3, #64	@ 0x40
 8007a80:	d007      	beq.n	8007a92 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d170      	bne.n	8007b7c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a9a:	e035      	b.n	8007b08 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d115      	bne.n	8007ad6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f103 020c 	add.w	r2, r3, #12
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ad4:	e018      	b.n	8007b08 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ad6:	f7fc fa85 	bl	8003fe4 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d803      	bhi.n	8007aee <HAL_SPI_Receive+0x15e>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aec:	d102      	bne.n	8007af4 <HAL_SPI_Receive+0x164>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e058      	b.n	8007bba <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1c4      	bne.n	8007a9c <HAL_SPI_Receive+0x10c>
 8007b12:	e038      	b.n	8007b86 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d113      	bne.n	8007b4a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	b292      	uxth	r2, r2
 8007b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b34:	1c9a      	adds	r2, r3, #2
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b48:	e018      	b.n	8007b7c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b4a:	f7fc fa4b 	bl	8003fe4 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d803      	bhi.n	8007b62 <HAL_SPI_Receive+0x1d2>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b60:	d102      	bne.n	8007b68 <HAL_SPI_Receive+0x1d8>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e01e      	b.n	8007bba <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1c6      	bne.n	8007b14 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fa58 	bl	8008040 <SPI_EndRxTransaction>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
  }
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08a      	sub	sp, #40	@ 0x28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd4:	f7fc fa06 	bl	8003fe4 <HAL_GetTick>
 8007bd8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007be0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d00c      	beq.n	8007c0c <HAL_SPI_TransmitReceive+0x4a>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bf8:	d106      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d102      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x46>
 8007c02:	7ffb      	ldrb	r3, [r7, #31]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d001      	beq.n	8007c0c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e17f      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x5c>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x5c>
 8007c18:	887b      	ldrh	r3, [r7, #2]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e174      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x6e>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e16d      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d003      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2205      	movs	r2, #5
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	887a      	ldrh	r2, [r7, #2]
 8007c62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	887a      	ldrh	r2, [r7, #2]
 8007c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	887a      	ldrh	r2, [r7, #2]
 8007c74:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	d007      	beq.n	8007ca0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca8:	d17e      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <HAL_SPI_TransmitReceive+0xf6>
 8007cb2:	8afb      	ldrh	r3, [r7, #22]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d16c      	bne.n	8007d92 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cbc:	881a      	ldrh	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc8:	1c9a      	adds	r2, r3, #2
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cdc:	e059      	b.n	8007d92 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d11b      	bne.n	8007d24 <HAL_SPI_TransmitReceive+0x162>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <HAL_SPI_TransmitReceive+0x162>
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d113      	bne.n	8007d24 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d00:	881a      	ldrh	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0c:	1c9a      	adds	r2, r3, #2
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d119      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x1a4>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d014      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d46:	b292      	uxth	r2, r2
 8007d48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4e:	1c9a      	adds	r2, r3, #2
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d62:	2301      	movs	r3, #1
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d66:	f7fc f93d 	bl	8003fe4 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d80d      	bhi.n	8007d92 <HAL_SPI_TransmitReceive+0x1d0>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d7c:	d009      	beq.n	8007d92 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e0bc      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1a0      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x11c>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d19b      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x11c>
 8007da6:	e082      	b.n	8007eae <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_SPI_TransmitReceive+0x1f4>
 8007db0:	8afb      	ldrh	r3, [r7, #22]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d171      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ddc:	e05d      	b.n	8007e9a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d11c      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x264>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <HAL_SPI_TransmitReceive+0x264>
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d114      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	330c      	adds	r3, #12
 8007e06:	7812      	ldrb	r2, [r2, #0]
 8007e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d119      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x2a6>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d014      	beq.n	8007e68 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e64:	2301      	movs	r3, #1
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e68:	f7fc f8bc 	bl	8003fe4 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d803      	bhi.n	8007e80 <HAL_SPI_TransmitReceive+0x2be>
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e7e:	d102      	bne.n	8007e86 <HAL_SPI_TransmitReceive+0x2c4>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e038      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d19c      	bne.n	8007dde <HAL_SPI_TransmitReceive+0x21c>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d197      	bne.n	8007dde <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 f92a 	bl	800810c <SPI_EndRxTxTransaction>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e01d      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3728      	adds	r7, #40	@ 0x28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f22:	b2db      	uxtb	r3, r3
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f40:	f7fc f850 	bl	8003fe4 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f50:	f7fc f848 	bl	8003fe4 <HAL_GetTick>
 8007f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f56:	4b39      	ldr	r3, [pc, #228]	@ (800803c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	015b      	lsls	r3, r3, #5
 8007f5c:	0d1b      	lsrs	r3, r3, #20
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f66:	e055      	b.n	8008014 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f6e:	d051      	beq.n	8008014 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f70:	f7fc f838 	bl	8003fe4 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d902      	bls.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d13d      	bne.n	8008002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9e:	d111      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fa8:	d004      	beq.n	8007fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fb2:	d107      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fcc:	d10f      	bne.n	8007fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e018      	b.n	8008034 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	e002      	b.n	8008014 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	3b01      	subs	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4013      	ands	r3, r2
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	429a      	cmp	r2, r3
 8008030:	d19a      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200003e0 	.word	0x200003e0

08008040 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008054:	d111      	bne.n	800807a <SPI_EndRxTransaction+0x3a>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800805e:	d004      	beq.n	800806a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008068:	d107      	bne.n	800807a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008078:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008082:	d12a      	bne.n	80080da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800808c:	d012      	beq.n	80080b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	2180      	movs	r1, #128	@ 0x80
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff ff49 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d02d      	beq.n	8008100 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e026      	b.n	8008102 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	2101      	movs	r1, #1
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7ff ff36 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01a      	beq.n	8008100 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ce:	f043 0220 	orr.w	r2, r3, #32
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e013      	b.n	8008102 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2101      	movs	r1, #1
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff ff23 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f4:	f043 0220 	orr.w	r2, r3, #32
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e000      	b.n	8008102 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2201      	movs	r2, #1
 8008120:	2102      	movs	r1, #2
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff ff04 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008132:	f043 0220 	orr.w	r2, r3, #32
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e032      	b.n	80081a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800813e:	4b1b      	ldr	r3, [pc, #108]	@ (80081ac <SPI_EndRxTxTransaction+0xa0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1b      	ldr	r2, [pc, #108]	@ (80081b0 <SPI_EndRxTxTransaction+0xa4>)
 8008144:	fba2 2303 	umull	r2, r3, r2, r3
 8008148:	0d5b      	lsrs	r3, r3, #21
 800814a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800814e:	fb02 f303 	mul.w	r3, r2, r3
 8008152:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800815c:	d112      	bne.n	8008184 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2200      	movs	r2, #0
 8008166:	2180      	movs	r1, #128	@ 0x80
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fee1 	bl	8007f30 <SPI_WaitFlagStateUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d016      	beq.n	80081a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008178:	f043 0220 	orr.w	r2, r3, #32
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e00f      	b.n	80081a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3b01      	subs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800819a:	2b80      	cmp	r3, #128	@ 0x80
 800819c:	d0f2      	beq.n	8008184 <SPI_EndRxTxTransaction+0x78>
 800819e:	e000      	b.n	80081a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80081a0:	bf00      	nop
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200003e0 	.word	0x200003e0
 80081b0:	165e9f81 	.word	0x165e9f81

080081b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e041      	b.n	800824a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fa fbfa 	bl	80029d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f000 f8f4 	bl	80083e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_TIM_ConfigClockSource+0x1c>
 800826a:	2302      	movs	r3, #2
 800826c:	e0b4      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x186>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800828c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008294:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a6:	d03e      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0xd4>
 80082a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ac:	f200 8087 	bhi.w	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b4:	f000 8086 	beq.w	80083c4 <HAL_TIM_ConfigClockSource+0x172>
 80082b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082bc:	d87f      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082be:	2b70      	cmp	r3, #112	@ 0x70
 80082c0:	d01a      	beq.n	80082f8 <HAL_TIM_ConfigClockSource+0xa6>
 80082c2:	2b70      	cmp	r3, #112	@ 0x70
 80082c4:	d87b      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082c6:	2b60      	cmp	r3, #96	@ 0x60
 80082c8:	d050      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x11a>
 80082ca:	2b60      	cmp	r3, #96	@ 0x60
 80082cc:	d877      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082ce:	2b50      	cmp	r3, #80	@ 0x50
 80082d0:	d03c      	beq.n	800834c <HAL_TIM_ConfigClockSource+0xfa>
 80082d2:	2b50      	cmp	r3, #80	@ 0x50
 80082d4:	d873      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082d6:	2b40      	cmp	r3, #64	@ 0x40
 80082d8:	d058      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x13a>
 80082da:	2b40      	cmp	r3, #64	@ 0x40
 80082dc:	d86f      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082de:	2b30      	cmp	r3, #48	@ 0x30
 80082e0:	d064      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0x15a>
 80082e2:	2b30      	cmp	r3, #48	@ 0x30
 80082e4:	d86b      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d060      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0x15a>
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d867      	bhi.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d05c      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0x15a>
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d05a      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0x15a>
 80082f6:	e062      	b.n	80083be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008308:	f000 f98a 	bl	8008620 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800831a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	609a      	str	r2, [r3, #8]
      break;
 8008324:	e04f      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008336:	f000 f973 	bl	8008620 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008348:	609a      	str	r2, [r3, #8]
      break;
 800834a:	e03c      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008358:	461a      	mov	r2, r3
 800835a:	f000 f8e7 	bl	800852c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2150      	movs	r1, #80	@ 0x50
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f940 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 800836a:	e02c      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008378:	461a      	mov	r2, r3
 800837a:	f000 f906 	bl	800858a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2160      	movs	r1, #96	@ 0x60
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f930 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 800838a:	e01c      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008398:	461a      	mov	r2, r3
 800839a:	f000 f8c7 	bl	800852c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2140      	movs	r1, #64	@ 0x40
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f920 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 80083aa:	e00c      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f000 f917 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 80083bc:	e003      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
      break;
 80083c2:	e000      	b.n	80083c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a43      	ldr	r2, [pc, #268]	@ (8008500 <TIM_Base_SetConfig+0x120>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d013      	beq.n	8008420 <TIM_Base_SetConfig+0x40>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fe:	d00f      	beq.n	8008420 <TIM_Base_SetConfig+0x40>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a40      	ldr	r2, [pc, #256]	@ (8008504 <TIM_Base_SetConfig+0x124>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00b      	beq.n	8008420 <TIM_Base_SetConfig+0x40>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a3f      	ldr	r2, [pc, #252]	@ (8008508 <TIM_Base_SetConfig+0x128>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d007      	beq.n	8008420 <TIM_Base_SetConfig+0x40>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a3e      	ldr	r2, [pc, #248]	@ (800850c <TIM_Base_SetConfig+0x12c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d003      	beq.n	8008420 <TIM_Base_SetConfig+0x40>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a3d      	ldr	r2, [pc, #244]	@ (8008510 <TIM_Base_SetConfig+0x130>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d108      	bne.n	8008432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a32      	ldr	r2, [pc, #200]	@ (8008500 <TIM_Base_SetConfig+0x120>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d02b      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008440:	d027      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a2f      	ldr	r2, [pc, #188]	@ (8008504 <TIM_Base_SetConfig+0x124>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d023      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2e      	ldr	r2, [pc, #184]	@ (8008508 <TIM_Base_SetConfig+0x128>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d01f      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2d      	ldr	r2, [pc, #180]	@ (800850c <TIM_Base_SetConfig+0x12c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01b      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2c      	ldr	r2, [pc, #176]	@ (8008510 <TIM_Base_SetConfig+0x130>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d017      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a2b      	ldr	r2, [pc, #172]	@ (8008514 <TIM_Base_SetConfig+0x134>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2a      	ldr	r2, [pc, #168]	@ (8008518 <TIM_Base_SetConfig+0x138>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00f      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a29      	ldr	r2, [pc, #164]	@ (800851c <TIM_Base_SetConfig+0x13c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00b      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a28      	ldr	r2, [pc, #160]	@ (8008520 <TIM_Base_SetConfig+0x140>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d007      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a27      	ldr	r2, [pc, #156]	@ (8008524 <TIM_Base_SetConfig+0x144>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d003      	beq.n	8008492 <TIM_Base_SetConfig+0xb2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a26      	ldr	r2, [pc, #152]	@ (8008528 <TIM_Base_SetConfig+0x148>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d108      	bne.n	80084a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689a      	ldr	r2, [r3, #8]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a0e      	ldr	r2, [pc, #56]	@ (8008500 <TIM_Base_SetConfig+0x120>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_Base_SetConfig+0xf2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a10      	ldr	r2, [pc, #64]	@ (8008510 <TIM_Base_SetConfig+0x130>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d103      	bne.n	80084da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f043 0204 	orr.w	r2, r3, #4
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40010000 	.word	0x40010000
 8008504:	40000400 	.word	0x40000400
 8008508:	40000800 	.word	0x40000800
 800850c:	40000c00 	.word	0x40000c00
 8008510:	40010400 	.word	0x40010400
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400
 800851c:	40014800 	.word	0x40014800
 8008520:	40001800 	.word	0x40001800
 8008524:	40001c00 	.word	0x40001c00
 8008528:	40002000 	.word	0x40002000

0800852c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f023 0201 	bic.w	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 030a 	bic.w	r3, r3, #10
 8008568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858a:	b480      	push	{r7}
 800858c:	b087      	sub	sp, #28
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	f023 0210 	bic.w	r2, r3, #16
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	f043 0307 	orr.w	r3, r3, #7
 800860c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800863a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	021a      	lsls	r2, r3, #8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	431a      	orrs	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4313      	orrs	r3, r2
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	609a      	str	r2, [r3, #8]
}
 8008654:	bf00      	nop
 8008656:	371c      	adds	r7, #28
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008674:	2302      	movs	r3, #2
 8008676:	e05a      	b.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a21      	ldr	r2, [pc, #132]	@ (800873c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d022      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c4:	d01d      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d018      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1a      	ldr	r2, [pc, #104]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00e      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a18      	ldr	r2, [pc, #96]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d009      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a17      	ldr	r2, [pc, #92]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d004      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d10c      	bne.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40010000 	.word	0x40010000
 8008740:	40000400 	.word	0x40000400
 8008744:	40000800 	.word	0x40000800
 8008748:	40000c00 	.word	0x40000c00
 800874c:	40010400 	.word	0x40010400
 8008750:	40014000 	.word	0x40014000
 8008754:	40001800 	.word	0x40001800

08008758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e042      	b.n	80087f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fa f974 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2224      	movs	r2, #36	@ 0x24
 8008788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800879a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f973 	bl	8008a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695a      	ldr	r2, [r3, #20]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08a      	sub	sp, #40	@ 0x28
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	4613      	mov	r3, r2
 8008806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b20      	cmp	r3, #32
 8008816:	d175      	bne.n	8008904 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_UART_Transmit+0x2c>
 800881e:	88fb      	ldrh	r3, [r7, #6]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e06e      	b.n	8008906 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2221      	movs	r2, #33	@ 0x21
 8008832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008836:	f7fb fbd5 	bl	8003fe4 <HAL_GetTick>
 800883a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008850:	d108      	bne.n	8008864 <HAL_UART_Transmit+0x6c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	e003      	b.n	800886c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008868:	2300      	movs	r3, #0
 800886a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800886c:	e02e      	b.n	80088cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	@ 0x80
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f848 	bl	800890e <UART_WaitOnFlagUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e03a      	b.n	8008906 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	3302      	adds	r3, #2
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	e007      	b.n	80088be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	3301      	adds	r3, #1
 80088bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1cb      	bne.n	800886e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	2140      	movs	r1, #64	@ 0x40
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f814 	bl	800890e <UART_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e006      	b.n	8008906 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	e000      	b.n	8008906 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3720      	adds	r7, #32
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b086      	sub	sp, #24
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	603b      	str	r3, [r7, #0]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891e:	e03b      	b.n	8008998 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008926:	d037      	beq.n	8008998 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008928:	f7fb fb5c 	bl	8003fe4 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	429a      	cmp	r2, r3
 8008936:	d302      	bcc.n	800893e <UART_WaitOnFlagUntilTimeout+0x30>
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e03a      	b.n	80089b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d023      	beq.n	8008998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b80      	cmp	r3, #128	@ 0x80
 8008954:	d020      	beq.n	8008998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b40      	cmp	r3, #64	@ 0x40
 800895a:	d01d      	beq.n	8008998 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b08      	cmp	r3, #8
 8008968:	d116      	bne.n	8008998 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800896a:	2300      	movs	r3, #0
 800896c:	617b      	str	r3, [r7, #20]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f81d 	bl	80089c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2208      	movs	r2, #8
 800898a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e00f      	b.n	80089b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4013      	ands	r3, r2
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d0b4      	beq.n	8008920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b095      	sub	sp, #84	@ 0x54
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	330c      	adds	r3, #12
 80089ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	330c      	adds	r3, #12
 80089e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e5      	bne.n	80089c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3314      	adds	r3, #20
 8008a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3314      	adds	r3, #20
 8008a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e5      	bne.n	80089fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d119      	bne.n	8008a6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	330c      	adds	r3, #12
 8008a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a58:	61ba      	str	r2, [r7, #24]
 8008a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6979      	ldr	r1, [r7, #20]
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	613b      	str	r3, [r7, #16]
   return(result);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e5      	bne.n	8008a38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a7a:	bf00      	nop
 8008a7c:	3754      	adds	r7, #84	@ 0x54
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a8c:	b0c0      	sub	sp, #256	@ 0x100
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa4:	68d9      	ldr	r1, [r3, #12]
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	ea40 0301 	orr.w	r3, r0, r1
 8008ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ae0:	f021 010c 	bic.w	r1, r1, #12
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008aee:	430b      	orrs	r3, r1
 8008af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b02:	6999      	ldr	r1, [r3, #24]
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	ea40 0301 	orr.w	r3, r0, r1
 8008b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	4b8f      	ldr	r3, [pc, #572]	@ (8008d54 <UART_SetConfig+0x2cc>)
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d005      	beq.n	8008b28 <UART_SetConfig+0xa0>
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b8d      	ldr	r3, [pc, #564]	@ (8008d58 <UART_SetConfig+0x2d0>)
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d104      	bne.n	8008b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b28:	f7fe fad8 	bl	80070dc <HAL_RCC_GetPCLK2Freq>
 8008b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b30:	e003      	b.n	8008b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b32:	f7fe fabf 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 8008b36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b44:	f040 810c 	bne.w	8008d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	462b      	mov	r3, r5
 8008b5e:	1891      	adds	r1, r2, r2
 8008b60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b62:	415b      	adcs	r3, r3
 8008b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	eb12 0801 	adds.w	r8, r2, r1
 8008b70:	4629      	mov	r1, r5
 8008b72:	eb43 0901 	adc.w	r9, r3, r1
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b8a:	4690      	mov	r8, r2
 8008b8c:	4699      	mov	r9, r3
 8008b8e:	4623      	mov	r3, r4
 8008b90:	eb18 0303 	adds.w	r3, r8, r3
 8008b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b98:	462b      	mov	r3, r5
 8008b9a:	eb49 0303 	adc.w	r3, r9, r3
 8008b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	18db      	adds	r3, r3, r3
 8008bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	eb42 0303 	adc.w	r3, r2, r3
 8008bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008bcc:	f7f8 f84c 	bl	8000c68 <__aeabi_uldivmod>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4b61      	ldr	r3, [pc, #388]	@ (8008d5c <UART_SetConfig+0x2d4>)
 8008bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	011c      	lsls	r4, r3, #4
 8008bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008be8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	1891      	adds	r1, r2, r2
 8008bf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c00:	4641      	mov	r1, r8
 8008c02:	eb12 0a01 	adds.w	sl, r2, r1
 8008c06:	4649      	mov	r1, r9
 8008c08:	eb43 0b01 	adc.w	fp, r3, r1
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c20:	4692      	mov	sl, r2
 8008c22:	469b      	mov	fp, r3
 8008c24:	4643      	mov	r3, r8
 8008c26:	eb1a 0303 	adds.w	r3, sl, r3
 8008c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c2e:	464b      	mov	r3, r9
 8008c30:	eb4b 0303 	adc.w	r3, fp, r3
 8008c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	18db      	adds	r3, r3, r3
 8008c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c52:	4613      	mov	r3, r2
 8008c54:	eb42 0303 	adc.w	r3, r2, r3
 8008c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c62:	f7f8 f801 	bl	8000c68 <__aeabi_uldivmod>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d5c <UART_SetConfig+0x2d4>)
 8008c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	2264      	movs	r2, #100	@ 0x64
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	1acb      	subs	r3, r1, r3
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c82:	4b36      	ldr	r3, [pc, #216]	@ (8008d5c <UART_SetConfig+0x2d4>)
 8008c84:	fba3 2302 	umull	r2, r3, r3, r2
 8008c88:	095b      	lsrs	r3, r3, #5
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c90:	441c      	add	r4, r3
 8008c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	1891      	adds	r1, r2, r2
 8008caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008cac:	415b      	adcs	r3, r3
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008cb4:	4641      	mov	r1, r8
 8008cb6:	1851      	adds	r1, r2, r1
 8008cb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008cba:	4649      	mov	r1, r9
 8008cbc:	414b      	adcs	r3, r1
 8008cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ccc:	4659      	mov	r1, fp
 8008cce:	00cb      	lsls	r3, r1, #3
 8008cd0:	4651      	mov	r1, sl
 8008cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cd6:	4651      	mov	r1, sl
 8008cd8:	00ca      	lsls	r2, r1, #3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	189b      	adds	r3, r3, r2
 8008ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ce8:	464b      	mov	r3, r9
 8008cea:	460a      	mov	r2, r1
 8008cec:	eb42 0303 	adc.w	r3, r2, r3
 8008cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d08:	460b      	mov	r3, r1
 8008d0a:	18db      	adds	r3, r3, r3
 8008d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d0e:	4613      	mov	r3, r2
 8008d10:	eb42 0303 	adc.w	r3, r2, r3
 8008d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d1e:	f7f7 ffa3 	bl	8000c68 <__aeabi_uldivmod>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <UART_SetConfig+0x2d4>)
 8008d28:	fba3 1302 	umull	r1, r3, r3, r2
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	2164      	movs	r1, #100	@ 0x64
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	3332      	adds	r3, #50	@ 0x32
 8008d3a:	4a08      	ldr	r2, [pc, #32]	@ (8008d5c <UART_SetConfig+0x2d4>)
 8008d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	f003 0207 	and.w	r2, r3, #7
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4422      	add	r2, r4
 8008d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d50:	e106      	b.n	8008f60 <UART_SetConfig+0x4d8>
 8008d52:	bf00      	nop
 8008d54:	40011000 	.word	0x40011000
 8008d58:	40011400 	.word	0x40011400
 8008d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d72:	4642      	mov	r2, r8
 8008d74:	464b      	mov	r3, r9
 8008d76:	1891      	adds	r1, r2, r2
 8008d78:	6239      	str	r1, [r7, #32]
 8008d7a:	415b      	adcs	r3, r3
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d82:	4641      	mov	r1, r8
 8008d84:	1854      	adds	r4, r2, r1
 8008d86:	4649      	mov	r1, r9
 8008d88:	eb43 0501 	adc.w	r5, r3, r1
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	00eb      	lsls	r3, r5, #3
 8008d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d9a:	00e2      	lsls	r2, r4, #3
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	461d      	mov	r5, r3
 8008da0:	4643      	mov	r3, r8
 8008da2:	18e3      	adds	r3, r4, r3
 8008da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008da8:	464b      	mov	r3, r9
 8008daa:	eb45 0303 	adc.w	r3, r5, r3
 8008dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dce:	4629      	mov	r1, r5
 8008dd0:	008b      	lsls	r3, r1, #2
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dd8:	4621      	mov	r1, r4
 8008dda:	008a      	lsls	r2, r1, #2
 8008ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008de0:	f7f7 ff42 	bl	8000c68 <__aeabi_uldivmod>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4b60      	ldr	r3, [pc, #384]	@ (8008f6c <UART_SetConfig+0x4e4>)
 8008dea:	fba3 2302 	umull	r2, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	011c      	lsls	r4, r3, #4
 8008df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008dfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e04:	4642      	mov	r2, r8
 8008e06:	464b      	mov	r3, r9
 8008e08:	1891      	adds	r1, r2, r2
 8008e0a:	61b9      	str	r1, [r7, #24]
 8008e0c:	415b      	adcs	r3, r3
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e14:	4641      	mov	r1, r8
 8008e16:	1851      	adds	r1, r2, r1
 8008e18:	6139      	str	r1, [r7, #16]
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	414b      	adcs	r3, r1
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	00cb      	lsls	r3, r1, #3
 8008e30:	4651      	mov	r1, sl
 8008e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e36:	4651      	mov	r1, sl
 8008e38:	00ca      	lsls	r2, r1, #3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4642      	mov	r2, r8
 8008e42:	189b      	adds	r3, r3, r2
 8008e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e48:	464b      	mov	r3, r9
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	eb42 0303 	adc.w	r3, r2, r3
 8008e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	008b      	lsls	r3, r1, #2
 8008e70:	4641      	mov	r1, r8
 8008e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e76:	4641      	mov	r1, r8
 8008e78:	008a      	lsls	r2, r1, #2
 8008e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e7e:	f7f7 fef3 	bl	8000c68 <__aeabi_uldivmod>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	4b38      	ldr	r3, [pc, #224]	@ (8008f6c <UART_SetConfig+0x4e4>)
 8008e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	2264      	movs	r2, #100	@ 0x64
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
 8008e96:	1acb      	subs	r3, r1, r3
 8008e98:	011b      	lsls	r3, r3, #4
 8008e9a:	3332      	adds	r3, #50	@ 0x32
 8008e9c:	4a33      	ldr	r2, [pc, #204]	@ (8008f6c <UART_SetConfig+0x4e4>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ea8:	441c      	add	r4, r3
 8008eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eae:	2200      	movs	r2, #0
 8008eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008eb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008eb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008eb8:	4642      	mov	r2, r8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	1891      	adds	r1, r2, r2
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	415b      	adcs	r3, r3
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ec8:	4641      	mov	r1, r8
 8008eca:	1851      	adds	r1, r2, r1
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	4649      	mov	r1, r9
 8008ed0:	414b      	adcs	r3, r1
 8008ed2:	607b      	str	r3, [r7, #4]
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	f04f 0300 	mov.w	r3, #0
 8008edc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ee0:	4659      	mov	r1, fp
 8008ee2:	00cb      	lsls	r3, r1, #3
 8008ee4:	4651      	mov	r1, sl
 8008ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eea:	4651      	mov	r1, sl
 8008eec:	00ca      	lsls	r2, r1, #3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	189b      	adds	r3, r3, r2
 8008ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008efa:	464b      	mov	r3, r9
 8008efc:	460a      	mov	r2, r1
 8008efe:	eb42 0303 	adc.w	r3, r2, r3
 8008f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	f04f 0300 	mov.w	r3, #0
 8008f18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	008b      	lsls	r3, r1, #2
 8008f20:	4641      	mov	r1, r8
 8008f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f26:	4641      	mov	r1, r8
 8008f28:	008a      	lsls	r2, r1, #2
 8008f2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f2e:	f7f7 fe9b 	bl	8000c68 <__aeabi_uldivmod>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4b0d      	ldr	r3, [pc, #52]	@ (8008f6c <UART_SetConfig+0x4e4>)
 8008f38:	fba3 1302 	umull	r1, r3, r3, r2
 8008f3c:	095b      	lsrs	r3, r3, #5
 8008f3e:	2164      	movs	r1, #100	@ 0x64
 8008f40:	fb01 f303 	mul.w	r3, r1, r3
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	3332      	adds	r3, #50	@ 0x32
 8008f4a:	4a08      	ldr	r2, [pc, #32]	@ (8008f6c <UART_SetConfig+0x4e4>)
 8008f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	f003 020f 	and.w	r2, r3, #15
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4422      	add	r2, r4
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f66:	46bd      	mov	sp, r7
 8008f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f6c:	51eb851f 	.word	0x51eb851f

08008f70 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d123      	bne.n	8008fca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008f8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	6851      	ldr	r1, [r2, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	6892      	ldr	r2, [r2, #8]
 8008f96:	4311      	orrs	r1, r2
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	68d2      	ldr	r2, [r2, #12]
 8008f9c:	4311      	orrs	r1, r2
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	6912      	ldr	r2, [r2, #16]
 8008fa2:	4311      	orrs	r1, r2
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	6952      	ldr	r2, [r2, #20]
 8008fa8:	4311      	orrs	r1, r2
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	6992      	ldr	r2, [r2, #24]
 8008fae:	4311      	orrs	r1, r2
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	69d2      	ldr	r2, [r2, #28]
 8008fb4:	4311      	orrs	r1, r2
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	6a12      	ldr	r2, [r2, #32]
 8008fba:	4311      	orrs	r1, r2
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e028      	b.n	800901c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	69d9      	ldr	r1, [r3, #28]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	4319      	orrs	r1, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008ff0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	6851      	ldr	r1, [r2, #4]
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	6892      	ldr	r2, [r2, #8]
 8008ffc:	4311      	orrs	r1, r2
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	68d2      	ldr	r2, [r2, #12]
 8009002:	4311      	orrs	r1, r2
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	6912      	ldr	r2, [r2, #16]
 8009008:	4311      	orrs	r1, r2
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	6952      	ldr	r2, [r2, #20]
 800900e:	4311      	orrs	r1, r2
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	6992      	ldr	r2, [r2, #24]
 8009014:	430a      	orrs	r2, r1
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d128      	bne.n	800908e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	1e59      	subs	r1, r3, #1
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	3b01      	subs	r3, #1
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	4319      	orrs	r1, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	3b01      	subs	r3, #1
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	4319      	orrs	r1, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	3b01      	subs	r3, #1
 8009064:	031b      	lsls	r3, r3, #12
 8009066:	4319      	orrs	r1, r3
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	3b01      	subs	r3, #1
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	4319      	orrs	r1, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	3b01      	subs	r3, #1
 8009078:	051b      	lsls	r3, r3, #20
 800907a:	4319      	orrs	r1, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	3b01      	subs	r3, #1
 8009082:	061b      	lsls	r3, r3, #24
 8009084:	430b      	orrs	r3, r1
 8009086:	431a      	orrs	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	609a      	str	r2, [r3, #8]
 800908c:	e02f      	b.n	80090ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009096:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	68d2      	ldr	r2, [r2, #12]
 800909e:	3a01      	subs	r2, #1
 80090a0:	0311      	lsls	r1, r2, #12
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	6952      	ldr	r2, [r2, #20]
 80090a6:	3a01      	subs	r2, #1
 80090a8:	0512      	lsls	r2, r2, #20
 80090aa:	430a      	orrs	r2, r1
 80090ac:	431a      	orrs	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	1e59      	subs	r1, r3, #1
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	4319      	orrs	r1, r3
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	4319      	orrs	r1, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	3b01      	subs	r3, #1
 80090da:	041b      	lsls	r3, r3, #16
 80090dc:	4319      	orrs	r1, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	061b      	lsls	r3, r3, #24
 80090e6:	430b      	orrs	r3, r1
 80090e8:	431a      	orrs	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	0d9b      	lsrs	r3, r3, #22
 8009112:	059b      	lsls	r3, r3, #22
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	6811      	ldr	r1, [r2, #0]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	6852      	ldr	r2, [r2, #4]
 800911c:	4311      	orrs	r1, r2
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	6892      	ldr	r2, [r2, #8]
 8009122:	3a01      	subs	r2, #1
 8009124:	0152      	lsls	r2, r2, #5
 8009126:	4311      	orrs	r1, r2
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	68d2      	ldr	r2, [r2, #12]
 800912c:	0252      	lsls	r2, r2, #9
 800912e:	430a      	orrs	r2, r1
 8009130:	431a      	orrs	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009136:	f7fa ff55 	bl	8003fe4 <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800913c:	e010      	b.n	8009160 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009144:	d00c      	beq.n	8009160 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d007      	beq.n	800915c <FMC_SDRAM_SendCommand+0x60>
 800914c:	f7fa ff4a 	bl	8003fe4 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	d201      	bcs.n	8009160 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e006      	b.n	800916e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b20      	cmp	r3, #32
 800916a:	d0e8      	beq.n	800913e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009188:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	0052      	lsls	r2, r2, #1
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <__cvt>:
 80091a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	ec57 6b10 	vmov	r6, r7, d0
 80091ac:	2f00      	cmp	r7, #0
 80091ae:	460c      	mov	r4, r1
 80091b0:	4619      	mov	r1, r3
 80091b2:	463b      	mov	r3, r7
 80091b4:	bfbb      	ittet	lt
 80091b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80091ba:	461f      	movlt	r7, r3
 80091bc:	2300      	movge	r3, #0
 80091be:	232d      	movlt	r3, #45	@ 0x2d
 80091c0:	700b      	strb	r3, [r1, #0]
 80091c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80091c8:	4691      	mov	r9, r2
 80091ca:	f023 0820 	bic.w	r8, r3, #32
 80091ce:	bfbc      	itt	lt
 80091d0:	4632      	movlt	r2, r6
 80091d2:	4616      	movlt	r6, r2
 80091d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091d8:	d005      	beq.n	80091e6 <__cvt+0x42>
 80091da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80091de:	d100      	bne.n	80091e2 <__cvt+0x3e>
 80091e0:	3401      	adds	r4, #1
 80091e2:	2102      	movs	r1, #2
 80091e4:	e000      	b.n	80091e8 <__cvt+0x44>
 80091e6:	2103      	movs	r1, #3
 80091e8:	ab03      	add	r3, sp, #12
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	ab02      	add	r3, sp, #8
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	ec47 6b10 	vmov	d0, r6, r7
 80091f4:	4653      	mov	r3, sl
 80091f6:	4622      	mov	r2, r4
 80091f8:	f000 fe4a 	bl	8009e90 <_dtoa_r>
 80091fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009200:	4605      	mov	r5, r0
 8009202:	d119      	bne.n	8009238 <__cvt+0x94>
 8009204:	f019 0f01 	tst.w	r9, #1
 8009208:	d00e      	beq.n	8009228 <__cvt+0x84>
 800920a:	eb00 0904 	add.w	r9, r0, r4
 800920e:	2200      	movs	r2, #0
 8009210:	2300      	movs	r3, #0
 8009212:	4630      	mov	r0, r6
 8009214:	4639      	mov	r1, r7
 8009216:	f7f7 fc67 	bl	8000ae8 <__aeabi_dcmpeq>
 800921a:	b108      	cbz	r0, 8009220 <__cvt+0x7c>
 800921c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009220:	2230      	movs	r2, #48	@ 0x30
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	454b      	cmp	r3, r9
 8009226:	d31e      	bcc.n	8009266 <__cvt+0xc2>
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800922c:	1b5b      	subs	r3, r3, r5
 800922e:	4628      	mov	r0, r5
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	b004      	add	sp, #16
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800923c:	eb00 0904 	add.w	r9, r0, r4
 8009240:	d1e5      	bne.n	800920e <__cvt+0x6a>
 8009242:	7803      	ldrb	r3, [r0, #0]
 8009244:	2b30      	cmp	r3, #48	@ 0x30
 8009246:	d10a      	bne.n	800925e <__cvt+0xba>
 8009248:	2200      	movs	r2, #0
 800924a:	2300      	movs	r3, #0
 800924c:	4630      	mov	r0, r6
 800924e:	4639      	mov	r1, r7
 8009250:	f7f7 fc4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009254:	b918      	cbnz	r0, 800925e <__cvt+0xba>
 8009256:	f1c4 0401 	rsb	r4, r4, #1
 800925a:	f8ca 4000 	str.w	r4, [sl]
 800925e:	f8da 3000 	ldr.w	r3, [sl]
 8009262:	4499      	add	r9, r3
 8009264:	e7d3      	b.n	800920e <__cvt+0x6a>
 8009266:	1c59      	adds	r1, r3, #1
 8009268:	9103      	str	r1, [sp, #12]
 800926a:	701a      	strb	r2, [r3, #0]
 800926c:	e7d9      	b.n	8009222 <__cvt+0x7e>

0800926e <__exponent>:
 800926e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009270:	2900      	cmp	r1, #0
 8009272:	bfba      	itte	lt
 8009274:	4249      	neglt	r1, r1
 8009276:	232d      	movlt	r3, #45	@ 0x2d
 8009278:	232b      	movge	r3, #43	@ 0x2b
 800927a:	2909      	cmp	r1, #9
 800927c:	7002      	strb	r2, [r0, #0]
 800927e:	7043      	strb	r3, [r0, #1]
 8009280:	dd29      	ble.n	80092d6 <__exponent+0x68>
 8009282:	f10d 0307 	add.w	r3, sp, #7
 8009286:	461d      	mov	r5, r3
 8009288:	270a      	movs	r7, #10
 800928a:	461a      	mov	r2, r3
 800928c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009290:	fb07 1416 	mls	r4, r7, r6, r1
 8009294:	3430      	adds	r4, #48	@ 0x30
 8009296:	f802 4c01 	strb.w	r4, [r2, #-1]
 800929a:	460c      	mov	r4, r1
 800929c:	2c63      	cmp	r4, #99	@ 0x63
 800929e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80092a2:	4631      	mov	r1, r6
 80092a4:	dcf1      	bgt.n	800928a <__exponent+0x1c>
 80092a6:	3130      	adds	r1, #48	@ 0x30
 80092a8:	1e94      	subs	r4, r2, #2
 80092aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092ae:	1c41      	adds	r1, r0, #1
 80092b0:	4623      	mov	r3, r4
 80092b2:	42ab      	cmp	r3, r5
 80092b4:	d30a      	bcc.n	80092cc <__exponent+0x5e>
 80092b6:	f10d 0309 	add.w	r3, sp, #9
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	42ac      	cmp	r4, r5
 80092be:	bf88      	it	hi
 80092c0:	2300      	movhi	r3, #0
 80092c2:	3302      	adds	r3, #2
 80092c4:	4403      	add	r3, r0
 80092c6:	1a18      	subs	r0, r3, r0
 80092c8:	b003      	add	sp, #12
 80092ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80092d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80092d4:	e7ed      	b.n	80092b2 <__exponent+0x44>
 80092d6:	2330      	movs	r3, #48	@ 0x30
 80092d8:	3130      	adds	r1, #48	@ 0x30
 80092da:	7083      	strb	r3, [r0, #2]
 80092dc:	70c1      	strb	r1, [r0, #3]
 80092de:	1d03      	adds	r3, r0, #4
 80092e0:	e7f1      	b.n	80092c6 <__exponent+0x58>
	...

080092e4 <_printf_float>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	b08d      	sub	sp, #52	@ 0x34
 80092ea:	460c      	mov	r4, r1
 80092ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80092f0:	4616      	mov	r6, r2
 80092f2:	461f      	mov	r7, r3
 80092f4:	4605      	mov	r5, r0
 80092f6:	f000 fccb 	bl	8009c90 <_localeconv_r>
 80092fa:	6803      	ldr	r3, [r0, #0]
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7f6 ffc6 	bl	8000290 <strlen>
 8009304:	2300      	movs	r3, #0
 8009306:	930a      	str	r3, [sp, #40]	@ 0x28
 8009308:	f8d8 3000 	ldr.w	r3, [r8]
 800930c:	9005      	str	r0, [sp, #20]
 800930e:	3307      	adds	r3, #7
 8009310:	f023 0307 	bic.w	r3, r3, #7
 8009314:	f103 0208 	add.w	r2, r3, #8
 8009318:	f894 a018 	ldrb.w	sl, [r4, #24]
 800931c:	f8d4 b000 	ldr.w	fp, [r4]
 8009320:	f8c8 2000 	str.w	r2, [r8]
 8009324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800932c:	9307      	str	r3, [sp, #28]
 800932e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800933a:	4b9c      	ldr	r3, [pc, #624]	@ (80095ac <_printf_float+0x2c8>)
 800933c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009340:	f7f7 fc04 	bl	8000b4c <__aeabi_dcmpun>
 8009344:	bb70      	cbnz	r0, 80093a4 <_printf_float+0xc0>
 8009346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800934a:	4b98      	ldr	r3, [pc, #608]	@ (80095ac <_printf_float+0x2c8>)
 800934c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009350:	f7f7 fbde 	bl	8000b10 <__aeabi_dcmple>
 8009354:	bb30      	cbnz	r0, 80093a4 <_printf_float+0xc0>
 8009356:	2200      	movs	r2, #0
 8009358:	2300      	movs	r3, #0
 800935a:	4640      	mov	r0, r8
 800935c:	4649      	mov	r1, r9
 800935e:	f7f7 fbcd 	bl	8000afc <__aeabi_dcmplt>
 8009362:	b110      	cbz	r0, 800936a <_printf_float+0x86>
 8009364:	232d      	movs	r3, #45	@ 0x2d
 8009366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800936a:	4a91      	ldr	r2, [pc, #580]	@ (80095b0 <_printf_float+0x2cc>)
 800936c:	4b91      	ldr	r3, [pc, #580]	@ (80095b4 <_printf_float+0x2d0>)
 800936e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009372:	bf8c      	ite	hi
 8009374:	4690      	movhi	r8, r2
 8009376:	4698      	movls	r8, r3
 8009378:	2303      	movs	r3, #3
 800937a:	6123      	str	r3, [r4, #16]
 800937c:	f02b 0304 	bic.w	r3, fp, #4
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	f04f 0900 	mov.w	r9, #0
 8009386:	9700      	str	r7, [sp, #0]
 8009388:	4633      	mov	r3, r6
 800938a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800938c:	4621      	mov	r1, r4
 800938e:	4628      	mov	r0, r5
 8009390:	f000 f9d2 	bl	8009738 <_printf_common>
 8009394:	3001      	adds	r0, #1
 8009396:	f040 808d 	bne.w	80094b4 <_printf_float+0x1d0>
 800939a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800939e:	b00d      	add	sp, #52	@ 0x34
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 fbce 	bl	8000b4c <__aeabi_dcmpun>
 80093b0:	b140      	cbz	r0, 80093c4 <_printf_float+0xe0>
 80093b2:	464b      	mov	r3, r9
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbc      	itt	lt
 80093b8:	232d      	movlt	r3, #45	@ 0x2d
 80093ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80093be:	4a7e      	ldr	r2, [pc, #504]	@ (80095b8 <_printf_float+0x2d4>)
 80093c0:	4b7e      	ldr	r3, [pc, #504]	@ (80095bc <_printf_float+0x2d8>)
 80093c2:	e7d4      	b.n	800936e <_printf_float+0x8a>
 80093c4:	6863      	ldr	r3, [r4, #4]
 80093c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80093ca:	9206      	str	r2, [sp, #24]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	d13b      	bne.n	8009448 <_printf_float+0x164>
 80093d0:	2306      	movs	r3, #6
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80093d8:	2300      	movs	r3, #0
 80093da:	6022      	str	r2, [r4, #0]
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	ab0a      	add	r3, sp, #40	@ 0x28
 80093e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80093e4:	ab09      	add	r3, sp, #36	@ 0x24
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	ec49 8b10 	vmov	d0, r8, r9
 80093ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80093f2:	4628      	mov	r0, r5
 80093f4:	f7ff fed6 	bl	80091a4 <__cvt>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093fc:	2b47      	cmp	r3, #71	@ 0x47
 80093fe:	4680      	mov	r8, r0
 8009400:	d129      	bne.n	8009456 <_printf_float+0x172>
 8009402:	1cc8      	adds	r0, r1, #3
 8009404:	db02      	blt.n	800940c <_printf_float+0x128>
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	4299      	cmp	r1, r3
 800940a:	dd41      	ble.n	8009490 <_printf_float+0x1ac>
 800940c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009410:	fa5f fa8a 	uxtb.w	sl, sl
 8009414:	3901      	subs	r1, #1
 8009416:	4652      	mov	r2, sl
 8009418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800941c:	9109      	str	r1, [sp, #36]	@ 0x24
 800941e:	f7ff ff26 	bl	800926e <__exponent>
 8009422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009424:	1813      	adds	r3, r2, r0
 8009426:	2a01      	cmp	r2, #1
 8009428:	4681      	mov	r9, r0
 800942a:	6123      	str	r3, [r4, #16]
 800942c:	dc02      	bgt.n	8009434 <_printf_float+0x150>
 800942e:	6822      	ldr	r2, [r4, #0]
 8009430:	07d2      	lsls	r2, r2, #31
 8009432:	d501      	bpl.n	8009438 <_printf_float+0x154>
 8009434:	3301      	adds	r3, #1
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0a2      	beq.n	8009386 <_printf_float+0xa2>
 8009440:	232d      	movs	r3, #45	@ 0x2d
 8009442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009446:	e79e      	b.n	8009386 <_printf_float+0xa2>
 8009448:	9a06      	ldr	r2, [sp, #24]
 800944a:	2a47      	cmp	r2, #71	@ 0x47
 800944c:	d1c2      	bne.n	80093d4 <_printf_float+0xf0>
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1c0      	bne.n	80093d4 <_printf_float+0xf0>
 8009452:	2301      	movs	r3, #1
 8009454:	e7bd      	b.n	80093d2 <_printf_float+0xee>
 8009456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800945a:	d9db      	bls.n	8009414 <_printf_float+0x130>
 800945c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009460:	d118      	bne.n	8009494 <_printf_float+0x1b0>
 8009462:	2900      	cmp	r1, #0
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	dd0b      	ble.n	8009480 <_printf_float+0x19c>
 8009468:	6121      	str	r1, [r4, #16]
 800946a:	b913      	cbnz	r3, 8009472 <_printf_float+0x18e>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	07d0      	lsls	r0, r2, #31
 8009470:	d502      	bpl.n	8009478 <_printf_float+0x194>
 8009472:	3301      	adds	r3, #1
 8009474:	440b      	add	r3, r1
 8009476:	6123      	str	r3, [r4, #16]
 8009478:	65a1      	str	r1, [r4, #88]	@ 0x58
 800947a:	f04f 0900 	mov.w	r9, #0
 800947e:	e7db      	b.n	8009438 <_printf_float+0x154>
 8009480:	b913      	cbnz	r3, 8009488 <_printf_float+0x1a4>
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	07d2      	lsls	r2, r2, #31
 8009486:	d501      	bpl.n	800948c <_printf_float+0x1a8>
 8009488:	3302      	adds	r3, #2
 800948a:	e7f4      	b.n	8009476 <_printf_float+0x192>
 800948c:	2301      	movs	r3, #1
 800948e:	e7f2      	b.n	8009476 <_printf_float+0x192>
 8009490:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009496:	4299      	cmp	r1, r3
 8009498:	db05      	blt.n	80094a6 <_printf_float+0x1c2>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	6121      	str	r1, [r4, #16]
 800949e:	07d8      	lsls	r0, r3, #31
 80094a0:	d5ea      	bpl.n	8009478 <_printf_float+0x194>
 80094a2:	1c4b      	adds	r3, r1, #1
 80094a4:	e7e7      	b.n	8009476 <_printf_float+0x192>
 80094a6:	2900      	cmp	r1, #0
 80094a8:	bfd4      	ite	le
 80094aa:	f1c1 0202 	rsble	r2, r1, #2
 80094ae:	2201      	movgt	r2, #1
 80094b0:	4413      	add	r3, r2
 80094b2:	e7e0      	b.n	8009476 <_printf_float+0x192>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	055a      	lsls	r2, r3, #21
 80094b8:	d407      	bmi.n	80094ca <_printf_float+0x1e6>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	4642      	mov	r2, r8
 80094be:	4631      	mov	r1, r6
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b8      	blx	r7
 80094c4:	3001      	adds	r0, #1
 80094c6:	d12b      	bne.n	8009520 <_printf_float+0x23c>
 80094c8:	e767      	b.n	800939a <_printf_float+0xb6>
 80094ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094ce:	f240 80dd 	bls.w	800968c <_printf_float+0x3a8>
 80094d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094d6:	2200      	movs	r2, #0
 80094d8:	2300      	movs	r3, #0
 80094da:	f7f7 fb05 	bl	8000ae8 <__aeabi_dcmpeq>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d033      	beq.n	800954a <_printf_float+0x266>
 80094e2:	4a37      	ldr	r2, [pc, #220]	@ (80095c0 <_printf_float+0x2dc>)
 80094e4:	2301      	movs	r3, #1
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f af54 	beq.w	800939a <_printf_float+0xb6>
 80094f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80094f6:	4543      	cmp	r3, r8
 80094f8:	db02      	blt.n	8009500 <_printf_float+0x21c>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	07d8      	lsls	r0, r3, #31
 80094fe:	d50f      	bpl.n	8009520 <_printf_float+0x23c>
 8009500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af45 	beq.w	800939a <_printf_float+0xb6>
 8009510:	f04f 0900 	mov.w	r9, #0
 8009514:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009518:	f104 0a1a 	add.w	sl, r4, #26
 800951c:	45c8      	cmp	r8, r9
 800951e:	dc09      	bgt.n	8009534 <_printf_float+0x250>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	079b      	lsls	r3, r3, #30
 8009524:	f100 8103 	bmi.w	800972e <_printf_float+0x44a>
 8009528:	68e0      	ldr	r0, [r4, #12]
 800952a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800952c:	4298      	cmp	r0, r3
 800952e:	bfb8      	it	lt
 8009530:	4618      	movlt	r0, r3
 8009532:	e734      	b.n	800939e <_printf_float+0xba>
 8009534:	2301      	movs	r3, #1
 8009536:	4652      	mov	r2, sl
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	f43f af2b 	beq.w	800939a <_printf_float+0xb6>
 8009544:	f109 0901 	add.w	r9, r9, #1
 8009548:	e7e8      	b.n	800951c <_printf_float+0x238>
 800954a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc39      	bgt.n	80095c4 <_printf_float+0x2e0>
 8009550:	4a1b      	ldr	r2, [pc, #108]	@ (80095c0 <_printf_float+0x2dc>)
 8009552:	2301      	movs	r3, #1
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	f43f af1d 	beq.w	800939a <_printf_float+0xb6>
 8009560:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009564:	ea59 0303 	orrs.w	r3, r9, r3
 8009568:	d102      	bne.n	8009570 <_printf_float+0x28c>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	d5d7      	bpl.n	8009520 <_printf_float+0x23c>
 8009570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009574:	4631      	mov	r1, r6
 8009576:	4628      	mov	r0, r5
 8009578:	47b8      	blx	r7
 800957a:	3001      	adds	r0, #1
 800957c:	f43f af0d 	beq.w	800939a <_printf_float+0xb6>
 8009580:	f04f 0a00 	mov.w	sl, #0
 8009584:	f104 0b1a 	add.w	fp, r4, #26
 8009588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958a:	425b      	negs	r3, r3
 800958c:	4553      	cmp	r3, sl
 800958e:	dc01      	bgt.n	8009594 <_printf_float+0x2b0>
 8009590:	464b      	mov	r3, r9
 8009592:	e793      	b.n	80094bc <_printf_float+0x1d8>
 8009594:	2301      	movs	r3, #1
 8009596:	465a      	mov	r2, fp
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f aefb 	beq.w	800939a <_printf_float+0xb6>
 80095a4:	f10a 0a01 	add.w	sl, sl, #1
 80095a8:	e7ee      	b.n	8009588 <_printf_float+0x2a4>
 80095aa:	bf00      	nop
 80095ac:	7fefffff 	.word	0x7fefffff
 80095b0:	0800d9b8 	.word	0x0800d9b8
 80095b4:	0800d9b4 	.word	0x0800d9b4
 80095b8:	0800d9c0 	.word	0x0800d9c0
 80095bc:	0800d9bc 	.word	0x0800d9bc
 80095c0:	0800d9c4 	.word	0x0800d9c4
 80095c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095ca:	4553      	cmp	r3, sl
 80095cc:	bfa8      	it	ge
 80095ce:	4653      	movge	r3, sl
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	4699      	mov	r9, r3
 80095d4:	dc36      	bgt.n	8009644 <_printf_float+0x360>
 80095d6:	f04f 0b00 	mov.w	fp, #0
 80095da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095de:	f104 021a 	add.w	r2, r4, #26
 80095e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095e4:	9306      	str	r3, [sp, #24]
 80095e6:	eba3 0309 	sub.w	r3, r3, r9
 80095ea:	455b      	cmp	r3, fp
 80095ec:	dc31      	bgt.n	8009652 <_printf_float+0x36e>
 80095ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f0:	459a      	cmp	sl, r3
 80095f2:	dc3a      	bgt.n	800966a <_printf_float+0x386>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	07da      	lsls	r2, r3, #31
 80095f8:	d437      	bmi.n	800966a <_printf_float+0x386>
 80095fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095fc:	ebaa 0903 	sub.w	r9, sl, r3
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	ebaa 0303 	sub.w	r3, sl, r3
 8009606:	4599      	cmp	r9, r3
 8009608:	bfa8      	it	ge
 800960a:	4699      	movge	r9, r3
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	dc33      	bgt.n	800967a <_printf_float+0x396>
 8009612:	f04f 0800 	mov.w	r8, #0
 8009616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961a:	f104 0b1a 	add.w	fp, r4, #26
 800961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009620:	ebaa 0303 	sub.w	r3, sl, r3
 8009624:	eba3 0309 	sub.w	r3, r3, r9
 8009628:	4543      	cmp	r3, r8
 800962a:	f77f af79 	ble.w	8009520 <_printf_float+0x23c>
 800962e:	2301      	movs	r3, #1
 8009630:	465a      	mov	r2, fp
 8009632:	4631      	mov	r1, r6
 8009634:	4628      	mov	r0, r5
 8009636:	47b8      	blx	r7
 8009638:	3001      	adds	r0, #1
 800963a:	f43f aeae 	beq.w	800939a <_printf_float+0xb6>
 800963e:	f108 0801 	add.w	r8, r8, #1
 8009642:	e7ec      	b.n	800961e <_printf_float+0x33a>
 8009644:	4642      	mov	r2, r8
 8009646:	4631      	mov	r1, r6
 8009648:	4628      	mov	r0, r5
 800964a:	47b8      	blx	r7
 800964c:	3001      	adds	r0, #1
 800964e:	d1c2      	bne.n	80095d6 <_printf_float+0x2f2>
 8009650:	e6a3      	b.n	800939a <_printf_float+0xb6>
 8009652:	2301      	movs	r3, #1
 8009654:	4631      	mov	r1, r6
 8009656:	4628      	mov	r0, r5
 8009658:	9206      	str	r2, [sp, #24]
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	f43f ae9c 	beq.w	800939a <_printf_float+0xb6>
 8009662:	9a06      	ldr	r2, [sp, #24]
 8009664:	f10b 0b01 	add.w	fp, fp, #1
 8009668:	e7bb      	b.n	80095e2 <_printf_float+0x2fe>
 800966a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	d1c0      	bne.n	80095fa <_printf_float+0x316>
 8009678:	e68f      	b.n	800939a <_printf_float+0xb6>
 800967a:	9a06      	ldr	r2, [sp, #24]
 800967c:	464b      	mov	r3, r9
 800967e:	4442      	add	r2, r8
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47b8      	blx	r7
 8009686:	3001      	adds	r0, #1
 8009688:	d1c3      	bne.n	8009612 <_printf_float+0x32e>
 800968a:	e686      	b.n	800939a <_printf_float+0xb6>
 800968c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009690:	f1ba 0f01 	cmp.w	sl, #1
 8009694:	dc01      	bgt.n	800969a <_printf_float+0x3b6>
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d536      	bpl.n	8009708 <_printf_float+0x424>
 800969a:	2301      	movs	r3, #1
 800969c:	4642      	mov	r2, r8
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f ae78 	beq.w	800939a <_printf_float+0xb6>
 80096aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f ae70 	beq.w	800939a <_printf_float+0xb6>
 80096ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096be:	2200      	movs	r2, #0
 80096c0:	2300      	movs	r3, #0
 80096c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80096c6:	f7f7 fa0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80096ca:	b9c0      	cbnz	r0, 80096fe <_printf_float+0x41a>
 80096cc:	4653      	mov	r3, sl
 80096ce:	f108 0201 	add.w	r2, r8, #1
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	d10c      	bne.n	80096f6 <_printf_float+0x412>
 80096dc:	e65d      	b.n	800939a <_printf_float+0xb6>
 80096de:	2301      	movs	r3, #1
 80096e0:	465a      	mov	r2, fp
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	f43f ae56 	beq.w	800939a <_printf_float+0xb6>
 80096ee:	f108 0801 	add.w	r8, r8, #1
 80096f2:	45d0      	cmp	r8, sl
 80096f4:	dbf3      	blt.n	80096de <_printf_float+0x3fa>
 80096f6:	464b      	mov	r3, r9
 80096f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096fc:	e6df      	b.n	80094be <_printf_float+0x1da>
 80096fe:	f04f 0800 	mov.w	r8, #0
 8009702:	f104 0b1a 	add.w	fp, r4, #26
 8009706:	e7f4      	b.n	80096f2 <_printf_float+0x40e>
 8009708:	2301      	movs	r3, #1
 800970a:	4642      	mov	r2, r8
 800970c:	e7e1      	b.n	80096d2 <_printf_float+0x3ee>
 800970e:	2301      	movs	r3, #1
 8009710:	464a      	mov	r2, r9
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	f43f ae3e 	beq.w	800939a <_printf_float+0xb6>
 800971e:	f108 0801 	add.w	r8, r8, #1
 8009722:	68e3      	ldr	r3, [r4, #12]
 8009724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009726:	1a5b      	subs	r3, r3, r1
 8009728:	4543      	cmp	r3, r8
 800972a:	dcf0      	bgt.n	800970e <_printf_float+0x42a>
 800972c:	e6fc      	b.n	8009528 <_printf_float+0x244>
 800972e:	f04f 0800 	mov.w	r8, #0
 8009732:	f104 0919 	add.w	r9, r4, #25
 8009736:	e7f4      	b.n	8009722 <_printf_float+0x43e>

08009738 <_printf_common>:
 8009738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800973c:	4616      	mov	r6, r2
 800973e:	4698      	mov	r8, r3
 8009740:	688a      	ldr	r2, [r1, #8]
 8009742:	690b      	ldr	r3, [r1, #16]
 8009744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009748:	4293      	cmp	r3, r2
 800974a:	bfb8      	it	lt
 800974c:	4613      	movlt	r3, r2
 800974e:	6033      	str	r3, [r6, #0]
 8009750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009754:	4607      	mov	r7, r0
 8009756:	460c      	mov	r4, r1
 8009758:	b10a      	cbz	r2, 800975e <_printf_common+0x26>
 800975a:	3301      	adds	r3, #1
 800975c:	6033      	str	r3, [r6, #0]
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	0699      	lsls	r1, r3, #26
 8009762:	bf42      	ittt	mi
 8009764:	6833      	ldrmi	r3, [r6, #0]
 8009766:	3302      	addmi	r3, #2
 8009768:	6033      	strmi	r3, [r6, #0]
 800976a:	6825      	ldr	r5, [r4, #0]
 800976c:	f015 0506 	ands.w	r5, r5, #6
 8009770:	d106      	bne.n	8009780 <_printf_common+0x48>
 8009772:	f104 0a19 	add.w	sl, r4, #25
 8009776:	68e3      	ldr	r3, [r4, #12]
 8009778:	6832      	ldr	r2, [r6, #0]
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	42ab      	cmp	r3, r5
 800977e:	dc26      	bgt.n	80097ce <_printf_common+0x96>
 8009780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	3b00      	subs	r3, #0
 8009788:	bf18      	it	ne
 800978a:	2301      	movne	r3, #1
 800978c:	0692      	lsls	r2, r2, #26
 800978e:	d42b      	bmi.n	80097e8 <_printf_common+0xb0>
 8009790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009794:	4641      	mov	r1, r8
 8009796:	4638      	mov	r0, r7
 8009798:	47c8      	blx	r9
 800979a:	3001      	adds	r0, #1
 800979c:	d01e      	beq.n	80097dc <_printf_common+0xa4>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	f003 0306 	and.w	r3, r3, #6
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	bf02      	ittt	eq
 80097aa:	68e5      	ldreq	r5, [r4, #12]
 80097ac:	6833      	ldreq	r3, [r6, #0]
 80097ae:	1aed      	subeq	r5, r5, r3
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	bf0c      	ite	eq
 80097b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097b8:	2500      	movne	r5, #0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	bfc4      	itt	gt
 80097be:	1a9b      	subgt	r3, r3, r2
 80097c0:	18ed      	addgt	r5, r5, r3
 80097c2:	2600      	movs	r6, #0
 80097c4:	341a      	adds	r4, #26
 80097c6:	42b5      	cmp	r5, r6
 80097c8:	d11a      	bne.n	8009800 <_printf_common+0xc8>
 80097ca:	2000      	movs	r0, #0
 80097cc:	e008      	b.n	80097e0 <_printf_common+0xa8>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4652      	mov	r2, sl
 80097d2:	4641      	mov	r1, r8
 80097d4:	4638      	mov	r0, r7
 80097d6:	47c8      	blx	r9
 80097d8:	3001      	adds	r0, #1
 80097da:	d103      	bne.n	80097e4 <_printf_common+0xac>
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e4:	3501      	adds	r5, #1
 80097e6:	e7c6      	b.n	8009776 <_printf_common+0x3e>
 80097e8:	18e1      	adds	r1, r4, r3
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	2030      	movs	r0, #48	@ 0x30
 80097ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097f2:	4422      	add	r2, r4
 80097f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097fc:	3302      	adds	r3, #2
 80097fe:	e7c7      	b.n	8009790 <_printf_common+0x58>
 8009800:	2301      	movs	r3, #1
 8009802:	4622      	mov	r2, r4
 8009804:	4641      	mov	r1, r8
 8009806:	4638      	mov	r0, r7
 8009808:	47c8      	blx	r9
 800980a:	3001      	adds	r0, #1
 800980c:	d0e6      	beq.n	80097dc <_printf_common+0xa4>
 800980e:	3601      	adds	r6, #1
 8009810:	e7d9      	b.n	80097c6 <_printf_common+0x8e>
	...

08009814 <_printf_i>:
 8009814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	7e0f      	ldrb	r7, [r1, #24]
 800981a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800981c:	2f78      	cmp	r7, #120	@ 0x78
 800981e:	4691      	mov	r9, r2
 8009820:	4680      	mov	r8, r0
 8009822:	460c      	mov	r4, r1
 8009824:	469a      	mov	sl, r3
 8009826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800982a:	d807      	bhi.n	800983c <_printf_i+0x28>
 800982c:	2f62      	cmp	r7, #98	@ 0x62
 800982e:	d80a      	bhi.n	8009846 <_printf_i+0x32>
 8009830:	2f00      	cmp	r7, #0
 8009832:	f000 80d1 	beq.w	80099d8 <_printf_i+0x1c4>
 8009836:	2f58      	cmp	r7, #88	@ 0x58
 8009838:	f000 80b8 	beq.w	80099ac <_printf_i+0x198>
 800983c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009844:	e03a      	b.n	80098bc <_printf_i+0xa8>
 8009846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800984a:	2b15      	cmp	r3, #21
 800984c:	d8f6      	bhi.n	800983c <_printf_i+0x28>
 800984e:	a101      	add	r1, pc, #4	@ (adr r1, 8009854 <_printf_i+0x40>)
 8009850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009854:	080098ad 	.word	0x080098ad
 8009858:	080098c1 	.word	0x080098c1
 800985c:	0800983d 	.word	0x0800983d
 8009860:	0800983d 	.word	0x0800983d
 8009864:	0800983d 	.word	0x0800983d
 8009868:	0800983d 	.word	0x0800983d
 800986c:	080098c1 	.word	0x080098c1
 8009870:	0800983d 	.word	0x0800983d
 8009874:	0800983d 	.word	0x0800983d
 8009878:	0800983d 	.word	0x0800983d
 800987c:	0800983d 	.word	0x0800983d
 8009880:	080099bf 	.word	0x080099bf
 8009884:	080098eb 	.word	0x080098eb
 8009888:	08009979 	.word	0x08009979
 800988c:	0800983d 	.word	0x0800983d
 8009890:	0800983d 	.word	0x0800983d
 8009894:	080099e1 	.word	0x080099e1
 8009898:	0800983d 	.word	0x0800983d
 800989c:	080098eb 	.word	0x080098eb
 80098a0:	0800983d 	.word	0x0800983d
 80098a4:	0800983d 	.word	0x0800983d
 80098a8:	08009981 	.word	0x08009981
 80098ac:	6833      	ldr	r3, [r6, #0]
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6032      	str	r2, [r6, #0]
 80098b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098bc:	2301      	movs	r3, #1
 80098be:	e09c      	b.n	80099fa <_printf_i+0x1e6>
 80098c0:	6833      	ldr	r3, [r6, #0]
 80098c2:	6820      	ldr	r0, [r4, #0]
 80098c4:	1d19      	adds	r1, r3, #4
 80098c6:	6031      	str	r1, [r6, #0]
 80098c8:	0606      	lsls	r6, r0, #24
 80098ca:	d501      	bpl.n	80098d0 <_printf_i+0xbc>
 80098cc:	681d      	ldr	r5, [r3, #0]
 80098ce:	e003      	b.n	80098d8 <_printf_i+0xc4>
 80098d0:	0645      	lsls	r5, r0, #25
 80098d2:	d5fb      	bpl.n	80098cc <_printf_i+0xb8>
 80098d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098d8:	2d00      	cmp	r5, #0
 80098da:	da03      	bge.n	80098e4 <_printf_i+0xd0>
 80098dc:	232d      	movs	r3, #45	@ 0x2d
 80098de:	426d      	negs	r5, r5
 80098e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098e4:	4858      	ldr	r0, [pc, #352]	@ (8009a48 <_printf_i+0x234>)
 80098e6:	230a      	movs	r3, #10
 80098e8:	e011      	b.n	800990e <_printf_i+0xfa>
 80098ea:	6821      	ldr	r1, [r4, #0]
 80098ec:	6833      	ldr	r3, [r6, #0]
 80098ee:	0608      	lsls	r0, r1, #24
 80098f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80098f4:	d402      	bmi.n	80098fc <_printf_i+0xe8>
 80098f6:	0649      	lsls	r1, r1, #25
 80098f8:	bf48      	it	mi
 80098fa:	b2ad      	uxthmi	r5, r5
 80098fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80098fe:	4852      	ldr	r0, [pc, #328]	@ (8009a48 <_printf_i+0x234>)
 8009900:	6033      	str	r3, [r6, #0]
 8009902:	bf14      	ite	ne
 8009904:	230a      	movne	r3, #10
 8009906:	2308      	moveq	r3, #8
 8009908:	2100      	movs	r1, #0
 800990a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800990e:	6866      	ldr	r6, [r4, #4]
 8009910:	60a6      	str	r6, [r4, #8]
 8009912:	2e00      	cmp	r6, #0
 8009914:	db05      	blt.n	8009922 <_printf_i+0x10e>
 8009916:	6821      	ldr	r1, [r4, #0]
 8009918:	432e      	orrs	r6, r5
 800991a:	f021 0104 	bic.w	r1, r1, #4
 800991e:	6021      	str	r1, [r4, #0]
 8009920:	d04b      	beq.n	80099ba <_printf_i+0x1a6>
 8009922:	4616      	mov	r6, r2
 8009924:	fbb5 f1f3 	udiv	r1, r5, r3
 8009928:	fb03 5711 	mls	r7, r3, r1, r5
 800992c:	5dc7      	ldrb	r7, [r0, r7]
 800992e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009932:	462f      	mov	r7, r5
 8009934:	42bb      	cmp	r3, r7
 8009936:	460d      	mov	r5, r1
 8009938:	d9f4      	bls.n	8009924 <_printf_i+0x110>
 800993a:	2b08      	cmp	r3, #8
 800993c:	d10b      	bne.n	8009956 <_printf_i+0x142>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	07df      	lsls	r7, r3, #31
 8009942:	d508      	bpl.n	8009956 <_printf_i+0x142>
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	6861      	ldr	r1, [r4, #4]
 8009948:	4299      	cmp	r1, r3
 800994a:	bfde      	ittt	le
 800994c:	2330      	movle	r3, #48	@ 0x30
 800994e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009952:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009956:	1b92      	subs	r2, r2, r6
 8009958:	6122      	str	r2, [r4, #16]
 800995a:	f8cd a000 	str.w	sl, [sp]
 800995e:	464b      	mov	r3, r9
 8009960:	aa03      	add	r2, sp, #12
 8009962:	4621      	mov	r1, r4
 8009964:	4640      	mov	r0, r8
 8009966:	f7ff fee7 	bl	8009738 <_printf_common>
 800996a:	3001      	adds	r0, #1
 800996c:	d14a      	bne.n	8009a04 <_printf_i+0x1f0>
 800996e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009972:	b004      	add	sp, #16
 8009974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	f043 0320 	orr.w	r3, r3, #32
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	4832      	ldr	r0, [pc, #200]	@ (8009a4c <_printf_i+0x238>)
 8009982:	2778      	movs	r7, #120	@ 0x78
 8009984:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	6831      	ldr	r1, [r6, #0]
 800998c:	061f      	lsls	r7, r3, #24
 800998e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009992:	d402      	bmi.n	800999a <_printf_i+0x186>
 8009994:	065f      	lsls	r7, r3, #25
 8009996:	bf48      	it	mi
 8009998:	b2ad      	uxthmi	r5, r5
 800999a:	6031      	str	r1, [r6, #0]
 800999c:	07d9      	lsls	r1, r3, #31
 800999e:	bf44      	itt	mi
 80099a0:	f043 0320 	orrmi.w	r3, r3, #32
 80099a4:	6023      	strmi	r3, [r4, #0]
 80099a6:	b11d      	cbz	r5, 80099b0 <_printf_i+0x19c>
 80099a8:	2310      	movs	r3, #16
 80099aa:	e7ad      	b.n	8009908 <_printf_i+0xf4>
 80099ac:	4826      	ldr	r0, [pc, #152]	@ (8009a48 <_printf_i+0x234>)
 80099ae:	e7e9      	b.n	8009984 <_printf_i+0x170>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	f023 0320 	bic.w	r3, r3, #32
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	e7f6      	b.n	80099a8 <_printf_i+0x194>
 80099ba:	4616      	mov	r6, r2
 80099bc:	e7bd      	b.n	800993a <_printf_i+0x126>
 80099be:	6833      	ldr	r3, [r6, #0]
 80099c0:	6825      	ldr	r5, [r4, #0]
 80099c2:	6961      	ldr	r1, [r4, #20]
 80099c4:	1d18      	adds	r0, r3, #4
 80099c6:	6030      	str	r0, [r6, #0]
 80099c8:	062e      	lsls	r6, r5, #24
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	d501      	bpl.n	80099d2 <_printf_i+0x1be>
 80099ce:	6019      	str	r1, [r3, #0]
 80099d0:	e002      	b.n	80099d8 <_printf_i+0x1c4>
 80099d2:	0668      	lsls	r0, r5, #25
 80099d4:	d5fb      	bpl.n	80099ce <_printf_i+0x1ba>
 80099d6:	8019      	strh	r1, [r3, #0]
 80099d8:	2300      	movs	r3, #0
 80099da:	6123      	str	r3, [r4, #16]
 80099dc:	4616      	mov	r6, r2
 80099de:	e7bc      	b.n	800995a <_printf_i+0x146>
 80099e0:	6833      	ldr	r3, [r6, #0]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	6032      	str	r2, [r6, #0]
 80099e6:	681e      	ldr	r6, [r3, #0]
 80099e8:	6862      	ldr	r2, [r4, #4]
 80099ea:	2100      	movs	r1, #0
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7f6 fbff 	bl	80001f0 <memchr>
 80099f2:	b108      	cbz	r0, 80099f8 <_printf_i+0x1e4>
 80099f4:	1b80      	subs	r0, r0, r6
 80099f6:	6060      	str	r0, [r4, #4]
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	2300      	movs	r3, #0
 80099fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a02:	e7aa      	b.n	800995a <_printf_i+0x146>
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	4632      	mov	r2, r6
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	47d0      	blx	sl
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d0ad      	beq.n	800996e <_printf_i+0x15a>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	079b      	lsls	r3, r3, #30
 8009a16:	d413      	bmi.n	8009a40 <_printf_i+0x22c>
 8009a18:	68e0      	ldr	r0, [r4, #12]
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	4298      	cmp	r0, r3
 8009a1e:	bfb8      	it	lt
 8009a20:	4618      	movlt	r0, r3
 8009a22:	e7a6      	b.n	8009972 <_printf_i+0x15e>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4632      	mov	r2, r6
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	47d0      	blx	sl
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d09d      	beq.n	800996e <_printf_i+0x15a>
 8009a32:	3501      	adds	r5, #1
 8009a34:	68e3      	ldr	r3, [r4, #12]
 8009a36:	9903      	ldr	r1, [sp, #12]
 8009a38:	1a5b      	subs	r3, r3, r1
 8009a3a:	42ab      	cmp	r3, r5
 8009a3c:	dcf2      	bgt.n	8009a24 <_printf_i+0x210>
 8009a3e:	e7eb      	b.n	8009a18 <_printf_i+0x204>
 8009a40:	2500      	movs	r5, #0
 8009a42:	f104 0619 	add.w	r6, r4, #25
 8009a46:	e7f5      	b.n	8009a34 <_printf_i+0x220>
 8009a48:	0800d9c6 	.word	0x0800d9c6
 8009a4c:	0800d9d7 	.word	0x0800d9d7

08009a50 <std>:
 8009a50:	2300      	movs	r3, #0
 8009a52:	b510      	push	{r4, lr}
 8009a54:	4604      	mov	r4, r0
 8009a56:	e9c0 3300 	strd	r3, r3, [r0]
 8009a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a5e:	6083      	str	r3, [r0, #8]
 8009a60:	8181      	strh	r1, [r0, #12]
 8009a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a64:	81c2      	strh	r2, [r0, #14]
 8009a66:	6183      	str	r3, [r0, #24]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	305c      	adds	r0, #92	@ 0x5c
 8009a6e:	f000 f906 	bl	8009c7e <memset>
 8009a72:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa8 <std+0x58>)
 8009a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a76:	4b0d      	ldr	r3, [pc, #52]	@ (8009aac <std+0x5c>)
 8009a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <std+0x60>)
 8009a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <std+0x64>)
 8009a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <std+0x68>)
 8009a84:	6224      	str	r4, [r4, #32]
 8009a86:	429c      	cmp	r4, r3
 8009a88:	d006      	beq.n	8009a98 <std+0x48>
 8009a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a8e:	4294      	cmp	r4, r2
 8009a90:	d002      	beq.n	8009a98 <std+0x48>
 8009a92:	33d0      	adds	r3, #208	@ 0xd0
 8009a94:	429c      	cmp	r4, r3
 8009a96:	d105      	bne.n	8009aa4 <std+0x54>
 8009a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa0:	f000 b96a 	b.w	8009d78 <__retarget_lock_init_recursive>
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	bf00      	nop
 8009aa8:	08009bf9 	.word	0x08009bf9
 8009aac:	08009c1b 	.word	0x08009c1b
 8009ab0:	08009c53 	.word	0x08009c53
 8009ab4:	08009c77 	.word	0x08009c77
 8009ab8:	20000adc 	.word	0x20000adc

08009abc <stdio_exit_handler>:
 8009abc:	4a02      	ldr	r2, [pc, #8]	@ (8009ac8 <stdio_exit_handler+0xc>)
 8009abe:	4903      	ldr	r1, [pc, #12]	@ (8009acc <stdio_exit_handler+0x10>)
 8009ac0:	4803      	ldr	r0, [pc, #12]	@ (8009ad0 <stdio_exit_handler+0x14>)
 8009ac2:	f000 b869 	b.w	8009b98 <_fwalk_sglue>
 8009ac6:	bf00      	nop
 8009ac8:	20000434 	.word	0x20000434
 8009acc:	0800b6b1 	.word	0x0800b6b1
 8009ad0:	20000444 	.word	0x20000444

08009ad4 <cleanup_stdio>:
 8009ad4:	6841      	ldr	r1, [r0, #4]
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8009b08 <cleanup_stdio+0x34>)
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	b510      	push	{r4, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	d001      	beq.n	8009ae4 <cleanup_stdio+0x10>
 8009ae0:	f001 fde6 	bl	800b6b0 <_fflush_r>
 8009ae4:	68a1      	ldr	r1, [r4, #8]
 8009ae6:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <cleanup_stdio+0x38>)
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	d002      	beq.n	8009af2 <cleanup_stdio+0x1e>
 8009aec:	4620      	mov	r0, r4
 8009aee:	f001 fddf 	bl	800b6b0 <_fflush_r>
 8009af2:	68e1      	ldr	r1, [r4, #12]
 8009af4:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <cleanup_stdio+0x3c>)
 8009af6:	4299      	cmp	r1, r3
 8009af8:	d004      	beq.n	8009b04 <cleanup_stdio+0x30>
 8009afa:	4620      	mov	r0, r4
 8009afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b00:	f001 bdd6 	b.w	800b6b0 <_fflush_r>
 8009b04:	bd10      	pop	{r4, pc}
 8009b06:	bf00      	nop
 8009b08:	20000adc 	.word	0x20000adc
 8009b0c:	20000b44 	.word	0x20000b44
 8009b10:	20000bac 	.word	0x20000bac

08009b14 <global_stdio_init.part.0>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <global_stdio_init.part.0+0x30>)
 8009b18:	4c0b      	ldr	r4, [pc, #44]	@ (8009b48 <global_stdio_init.part.0+0x34>)
 8009b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b4c <global_stdio_init.part.0+0x38>)
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	2200      	movs	r2, #0
 8009b22:	2104      	movs	r1, #4
 8009b24:	f7ff ff94 	bl	8009a50 <std>
 8009b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	2109      	movs	r1, #9
 8009b30:	f7ff ff8e 	bl	8009a50 <std>
 8009b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b38:	2202      	movs	r2, #2
 8009b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3e:	2112      	movs	r1, #18
 8009b40:	f7ff bf86 	b.w	8009a50 <std>
 8009b44:	20000c14 	.word	0x20000c14
 8009b48:	20000adc 	.word	0x20000adc
 8009b4c:	08009abd 	.word	0x08009abd

08009b50 <__sfp_lock_acquire>:
 8009b50:	4801      	ldr	r0, [pc, #4]	@ (8009b58 <__sfp_lock_acquire+0x8>)
 8009b52:	f000 b912 	b.w	8009d7a <__retarget_lock_acquire_recursive>
 8009b56:	bf00      	nop
 8009b58:	20000c1d 	.word	0x20000c1d

08009b5c <__sfp_lock_release>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	@ (8009b64 <__sfp_lock_release+0x8>)
 8009b5e:	f000 b90d 	b.w	8009d7c <__retarget_lock_release_recursive>
 8009b62:	bf00      	nop
 8009b64:	20000c1d 	.word	0x20000c1d

08009b68 <__sinit>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	f7ff fff0 	bl	8009b50 <__sfp_lock_acquire>
 8009b70:	6a23      	ldr	r3, [r4, #32]
 8009b72:	b11b      	cbz	r3, 8009b7c <__sinit+0x14>
 8009b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b78:	f7ff bff0 	b.w	8009b5c <__sfp_lock_release>
 8009b7c:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <__sinit+0x28>)
 8009b7e:	6223      	str	r3, [r4, #32]
 8009b80:	4b04      	ldr	r3, [pc, #16]	@ (8009b94 <__sinit+0x2c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f5      	bne.n	8009b74 <__sinit+0xc>
 8009b88:	f7ff ffc4 	bl	8009b14 <global_stdio_init.part.0>
 8009b8c:	e7f2      	b.n	8009b74 <__sinit+0xc>
 8009b8e:	bf00      	nop
 8009b90:	08009ad5 	.word	0x08009ad5
 8009b94:	20000c14 	.word	0x20000c14

08009b98 <_fwalk_sglue>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	4688      	mov	r8, r1
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8009bac:	d505      	bpl.n	8009bba <_fwalk_sglue+0x22>
 8009bae:	6824      	ldr	r4, [r4, #0]
 8009bb0:	2c00      	cmp	r4, #0
 8009bb2:	d1f7      	bne.n	8009ba4 <_fwalk_sglue+0xc>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d907      	bls.n	8009bd0 <_fwalk_sglue+0x38>
 8009bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	d003      	beq.n	8009bd0 <_fwalk_sglue+0x38>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4638      	mov	r0, r7
 8009bcc:	47c0      	blx	r8
 8009bce:	4306      	orrs	r6, r0
 8009bd0:	3568      	adds	r5, #104	@ 0x68
 8009bd2:	e7e9      	b.n	8009ba8 <_fwalk_sglue+0x10>

08009bd4 <iprintf>:
 8009bd4:	b40f      	push	{r0, r1, r2, r3}
 8009bd6:	b507      	push	{r0, r1, r2, lr}
 8009bd8:	4906      	ldr	r1, [pc, #24]	@ (8009bf4 <iprintf+0x20>)
 8009bda:	ab04      	add	r3, sp, #16
 8009bdc:	6808      	ldr	r0, [r1, #0]
 8009bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be2:	6881      	ldr	r1, [r0, #8]
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	f001 fbc7 	bl	800b378 <_vfiprintf_r>
 8009bea:	b003      	add	sp, #12
 8009bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf0:	b004      	add	sp, #16
 8009bf2:	4770      	bx	lr
 8009bf4:	20000440 	.word	0x20000440

08009bf8 <__sread>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c00:	f000 f86c 	bl	8009cdc <_read_r>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	bfab      	itete	ge
 8009c08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c0c:	181b      	addge	r3, r3, r0
 8009c0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c12:	bfac      	ite	ge
 8009c14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c16:	81a3      	strhlt	r3, [r4, #12]
 8009c18:	bd10      	pop	{r4, pc}

08009c1a <__swrite>:
 8009c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1e:	461f      	mov	r7, r3
 8009c20:	898b      	ldrh	r3, [r1, #12]
 8009c22:	05db      	lsls	r3, r3, #23
 8009c24:	4605      	mov	r5, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	4616      	mov	r6, r2
 8009c2a:	d505      	bpl.n	8009c38 <__swrite+0x1e>
 8009c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c30:	2302      	movs	r3, #2
 8009c32:	2200      	movs	r2, #0
 8009c34:	f000 f840 	bl	8009cb8 <_lseek_r>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c42:	81a3      	strh	r3, [r4, #12]
 8009c44:	4632      	mov	r2, r6
 8009c46:	463b      	mov	r3, r7
 8009c48:	4628      	mov	r0, r5
 8009c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4e:	f000 b857 	b.w	8009d00 <_write_r>

08009c52 <__sseek>:
 8009c52:	b510      	push	{r4, lr}
 8009c54:	460c      	mov	r4, r1
 8009c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5a:	f000 f82d 	bl	8009cb8 <_lseek_r>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	bf15      	itete	ne
 8009c64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c6e:	81a3      	strheq	r3, [r4, #12]
 8009c70:	bf18      	it	ne
 8009c72:	81a3      	strhne	r3, [r4, #12]
 8009c74:	bd10      	pop	{r4, pc}

08009c76 <__sclose>:
 8009c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7a:	f000 b80d 	b.w	8009c98 <_close_r>

08009c7e <memset>:
 8009c7e:	4402      	add	r2, r0
 8009c80:	4603      	mov	r3, r0
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d100      	bne.n	8009c88 <memset+0xa>
 8009c86:	4770      	bx	lr
 8009c88:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8c:	e7f9      	b.n	8009c82 <memset+0x4>
	...

08009c90 <_localeconv_r>:
 8009c90:	4800      	ldr	r0, [pc, #0]	@ (8009c94 <_localeconv_r+0x4>)
 8009c92:	4770      	bx	lr
 8009c94:	20000580 	.word	0x20000580

08009c98 <_close_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d06      	ldr	r5, [pc, #24]	@ (8009cb4 <_close_r+0x1c>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	602b      	str	r3, [r5, #0]
 8009ca4:	f7f8 fdc9 	bl	800283a <_close>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d102      	bne.n	8009cb2 <_close_r+0x1a>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	b103      	cbz	r3, 8009cb2 <_close_r+0x1a>
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	20000c18 	.word	0x20000c18

08009cb8 <_lseek_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d07      	ldr	r5, [pc, #28]	@ (8009cd8 <_lseek_r+0x20>)
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	602a      	str	r2, [r5, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f7f8 fdde 	bl	8002888 <_lseek>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_lseek_r+0x1e>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_lseek_r+0x1e>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	20000c18 	.word	0x20000c18

08009cdc <_read_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	@ (8009cfc <_read_r+0x20>)
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	4608      	mov	r0, r1
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	602a      	str	r2, [r5, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f7f8 fd6c 	bl	80027c8 <_read>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_read_r+0x1e>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_read_r+0x1e>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	20000c18 	.word	0x20000c18

08009d00 <_write_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d07      	ldr	r5, [pc, #28]	@ (8009d20 <_write_r+0x20>)
 8009d04:	4604      	mov	r4, r0
 8009d06:	4608      	mov	r0, r1
 8009d08:	4611      	mov	r1, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	602a      	str	r2, [r5, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f7f8 fd77 	bl	8002802 <_write>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_write_r+0x1e>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_write_r+0x1e>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	20000c18 	.word	0x20000c18

08009d24 <__errno>:
 8009d24:	4b01      	ldr	r3, [pc, #4]	@ (8009d2c <__errno+0x8>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20000440 	.word	0x20000440

08009d30 <__libc_init_array>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	4d0d      	ldr	r5, [pc, #52]	@ (8009d68 <__libc_init_array+0x38>)
 8009d34:	4c0d      	ldr	r4, [pc, #52]	@ (8009d6c <__libc_init_array+0x3c>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	2600      	movs	r6, #0
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	d109      	bne.n	8009d54 <__libc_init_array+0x24>
 8009d40:	4d0b      	ldr	r5, [pc, #44]	@ (8009d70 <__libc_init_array+0x40>)
 8009d42:	4c0c      	ldr	r4, [pc, #48]	@ (8009d74 <__libc_init_array+0x44>)
 8009d44:	f002 f862 	bl	800be0c <_init>
 8009d48:	1b64      	subs	r4, r4, r5
 8009d4a:	10a4      	asrs	r4, r4, #2
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	d105      	bne.n	8009d5e <__libc_init_array+0x2e>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d58:	4798      	blx	r3
 8009d5a:	3601      	adds	r6, #1
 8009d5c:	e7ee      	b.n	8009d3c <__libc_init_array+0xc>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	4798      	blx	r3
 8009d64:	3601      	adds	r6, #1
 8009d66:	e7f2      	b.n	8009d4e <__libc_init_array+0x1e>
 8009d68:	0800dd6c 	.word	0x0800dd6c
 8009d6c:	0800dd6c 	.word	0x0800dd6c
 8009d70:	0800dd6c 	.word	0x0800dd6c
 8009d74:	0800dd70 	.word	0x0800dd70

08009d78 <__retarget_lock_init_recursive>:
 8009d78:	4770      	bx	lr

08009d7a <__retarget_lock_acquire_recursive>:
 8009d7a:	4770      	bx	lr

08009d7c <__retarget_lock_release_recursive>:
 8009d7c:	4770      	bx	lr

08009d7e <quorem>:
 8009d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d82:	6903      	ldr	r3, [r0, #16]
 8009d84:	690c      	ldr	r4, [r1, #16]
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	4607      	mov	r7, r0
 8009d8a:	db7e      	blt.n	8009e8a <quorem+0x10c>
 8009d8c:	3c01      	subs	r4, #1
 8009d8e:	f101 0814 	add.w	r8, r1, #20
 8009d92:	00a3      	lsls	r3, r4, #2
 8009d94:	f100 0514 	add.w	r5, r0, #20
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009da8:	3301      	adds	r3, #1
 8009daa:	429a      	cmp	r2, r3
 8009dac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009db0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009db4:	d32e      	bcc.n	8009e14 <quorem+0x96>
 8009db6:	f04f 0a00 	mov.w	sl, #0
 8009dba:	46c4      	mov	ip, r8
 8009dbc:	46ae      	mov	lr, r5
 8009dbe:	46d3      	mov	fp, sl
 8009dc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009dc4:	b298      	uxth	r0, r3
 8009dc6:	fb06 a000 	mla	r0, r6, r0, sl
 8009dca:	0c02      	lsrs	r2, r0, #16
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	fb06 2303 	mla	r3, r6, r3, r2
 8009dd2:	f8de 2000 	ldr.w	r2, [lr]
 8009dd6:	b280      	uxth	r0, r0
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	1a12      	subs	r2, r2, r0
 8009ddc:	445a      	add	r2, fp
 8009dde:	f8de 0000 	ldr.w	r0, [lr]
 8009de2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009dec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009df0:	b292      	uxth	r2, r2
 8009df2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009df6:	45e1      	cmp	r9, ip
 8009df8:	f84e 2b04 	str.w	r2, [lr], #4
 8009dfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e00:	d2de      	bcs.n	8009dc0 <quorem+0x42>
 8009e02:	9b00      	ldr	r3, [sp, #0]
 8009e04:	58eb      	ldr	r3, [r5, r3]
 8009e06:	b92b      	cbnz	r3, 8009e14 <quorem+0x96>
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	3b04      	subs	r3, #4
 8009e0c:	429d      	cmp	r5, r3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	d32f      	bcc.n	8009e72 <quorem+0xf4>
 8009e12:	613c      	str	r4, [r7, #16]
 8009e14:	4638      	mov	r0, r7
 8009e16:	f001 f97d 	bl	800b114 <__mcmp>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	db25      	blt.n	8009e6a <quorem+0xec>
 8009e1e:	4629      	mov	r1, r5
 8009e20:	2000      	movs	r0, #0
 8009e22:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e26:	f8d1 c000 	ldr.w	ip, [r1]
 8009e2a:	fa1f fe82 	uxth.w	lr, r2
 8009e2e:	fa1f f38c 	uxth.w	r3, ip
 8009e32:	eba3 030e 	sub.w	r3, r3, lr
 8009e36:	4403      	add	r3, r0
 8009e38:	0c12      	lsrs	r2, r2, #16
 8009e3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e48:	45c1      	cmp	r9, r8
 8009e4a:	f841 3b04 	str.w	r3, [r1], #4
 8009e4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e52:	d2e6      	bcs.n	8009e22 <quorem+0xa4>
 8009e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e5c:	b922      	cbnz	r2, 8009e68 <quorem+0xea>
 8009e5e:	3b04      	subs	r3, #4
 8009e60:	429d      	cmp	r5, r3
 8009e62:	461a      	mov	r2, r3
 8009e64:	d30b      	bcc.n	8009e7e <quorem+0x100>
 8009e66:	613c      	str	r4, [r7, #16]
 8009e68:	3601      	adds	r6, #1
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	b003      	add	sp, #12
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	3b04      	subs	r3, #4
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	d1cb      	bne.n	8009e12 <quorem+0x94>
 8009e7a:	3c01      	subs	r4, #1
 8009e7c:	e7c6      	b.n	8009e0c <quorem+0x8e>
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	3b04      	subs	r3, #4
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	d1ef      	bne.n	8009e66 <quorem+0xe8>
 8009e86:	3c01      	subs	r4, #1
 8009e88:	e7ea      	b.n	8009e60 <quorem+0xe2>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e7ee      	b.n	8009e6c <quorem+0xee>
	...

08009e90 <_dtoa_r>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	69c7      	ldr	r7, [r0, #28]
 8009e96:	b097      	sub	sp, #92	@ 0x5c
 8009e98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009e9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ea0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ea2:	9107      	str	r1, [sp, #28]
 8009ea4:	4681      	mov	r9, r0
 8009ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ea8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009eaa:	b97f      	cbnz	r7, 8009ecc <_dtoa_r+0x3c>
 8009eac:	2010      	movs	r0, #16
 8009eae:	f000 fe09 	bl	800aac4 <malloc>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8009eb8:	b920      	cbnz	r0, 8009ec4 <_dtoa_r+0x34>
 8009eba:	4ba9      	ldr	r3, [pc, #676]	@ (800a160 <_dtoa_r+0x2d0>)
 8009ebc:	21ef      	movs	r1, #239	@ 0xef
 8009ebe:	48a9      	ldr	r0, [pc, #676]	@ (800a164 <_dtoa_r+0x2d4>)
 8009ec0:	f001 fcd0 	bl	800b864 <__assert_func>
 8009ec4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ec8:	6007      	str	r7, [r0, #0]
 8009eca:	60c7      	str	r7, [r0, #12]
 8009ecc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ed0:	6819      	ldr	r1, [r3, #0]
 8009ed2:	b159      	cbz	r1, 8009eec <_dtoa_r+0x5c>
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	604a      	str	r2, [r1, #4]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	4093      	lsls	r3, r2
 8009edc:	608b      	str	r3, [r1, #8]
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f000 fee6 	bl	800acb0 <_Bfree>
 8009ee4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	1e2b      	subs	r3, r5, #0
 8009eee:	bfb9      	ittee	lt
 8009ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ef4:	9305      	strlt	r3, [sp, #20]
 8009ef6:	2300      	movge	r3, #0
 8009ef8:	6033      	strge	r3, [r6, #0]
 8009efa:	9f05      	ldr	r7, [sp, #20]
 8009efc:	4b9a      	ldr	r3, [pc, #616]	@ (800a168 <_dtoa_r+0x2d8>)
 8009efe:	bfbc      	itt	lt
 8009f00:	2201      	movlt	r2, #1
 8009f02:	6032      	strlt	r2, [r6, #0]
 8009f04:	43bb      	bics	r3, r7
 8009f06:	d112      	bne.n	8009f2e <_dtoa_r+0x9e>
 8009f08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f14:	4323      	orrs	r3, r4
 8009f16:	f000 855a 	beq.w	800a9ce <_dtoa_r+0xb3e>
 8009f1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a17c <_dtoa_r+0x2ec>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 855c 	beq.w	800a9de <_dtoa_r+0xb4e>
 8009f26:	f10a 0303 	add.w	r3, sl, #3
 8009f2a:	f000 bd56 	b.w	800a9da <_dtoa_r+0xb4a>
 8009f2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009f32:	2200      	movs	r2, #0
 8009f34:	ec51 0b17 	vmov	r0, r1, d7
 8009f38:	2300      	movs	r3, #0
 8009f3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009f3e:	f7f6 fdd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f42:	4680      	mov	r8, r0
 8009f44:	b158      	cbz	r0, 8009f5e <_dtoa_r+0xce>
 8009f46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f48:	2301      	movs	r3, #1
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f4e:	b113      	cbz	r3, 8009f56 <_dtoa_r+0xc6>
 8009f50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f52:	4b86      	ldr	r3, [pc, #536]	@ (800a16c <_dtoa_r+0x2dc>)
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a180 <_dtoa_r+0x2f0>
 8009f5a:	f000 bd40 	b.w	800a9de <_dtoa_r+0xb4e>
 8009f5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009f62:	aa14      	add	r2, sp, #80	@ 0x50
 8009f64:	a915      	add	r1, sp, #84	@ 0x54
 8009f66:	4648      	mov	r0, r9
 8009f68:	f001 f984 	bl	800b274 <__d2b>
 8009f6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f70:	9002      	str	r0, [sp, #8]
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d078      	beq.n	800a068 <_dtoa_r+0x1d8>
 8009f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f90:	4619      	mov	r1, r3
 8009f92:	2200      	movs	r2, #0
 8009f94:	4b76      	ldr	r3, [pc, #472]	@ (800a170 <_dtoa_r+0x2e0>)
 8009f96:	f7f6 f987 	bl	80002a8 <__aeabi_dsub>
 8009f9a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a148 <_dtoa_r+0x2b8>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f7f6 fb3a 	bl	8000618 <__aeabi_dmul>
 8009fa4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a150 <_dtoa_r+0x2c0>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f97f 	bl	80002ac <__adddf3>
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	f7f6 fac6 	bl	8000544 <__aeabi_i2d>
 8009fb8:	a367      	add	r3, pc, #412	@ (adr r3, 800a158 <_dtoa_r+0x2c8>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 fb2b 	bl	8000618 <__aeabi_dmul>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 f96f 	bl	80002ac <__adddf3>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	f7f6 fdd1 	bl	8000b78 <__aeabi_d2iz>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4607      	mov	r7, r0
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fd8c 	bl	8000afc <__aeabi_dcmplt>
 8009fe4:	b140      	cbz	r0, 8009ff8 <_dtoa_r+0x168>
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f7f6 faac 	bl	8000544 <__aeabi_i2d>
 8009fec:	4622      	mov	r2, r4
 8009fee:	462b      	mov	r3, r5
 8009ff0:	f7f6 fd7a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ff4:	b900      	cbnz	r0, 8009ff8 <_dtoa_r+0x168>
 8009ff6:	3f01      	subs	r7, #1
 8009ff8:	2f16      	cmp	r7, #22
 8009ffa:	d852      	bhi.n	800a0a2 <_dtoa_r+0x212>
 8009ffc:	4b5d      	ldr	r3, [pc, #372]	@ (800a174 <_dtoa_r+0x2e4>)
 8009ffe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a00a:	f7f6 fd77 	bl	8000afc <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d049      	beq.n	800a0a6 <_dtoa_r+0x216>
 800a012:	3f01      	subs	r7, #1
 800a014:	2300      	movs	r3, #0
 800a016:	9310      	str	r3, [sp, #64]	@ 0x40
 800a018:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a01a:	1b9b      	subs	r3, r3, r6
 800a01c:	1e5a      	subs	r2, r3, #1
 800a01e:	bf45      	ittet	mi
 800a020:	f1c3 0301 	rsbmi	r3, r3, #1
 800a024:	9300      	strmi	r3, [sp, #0]
 800a026:	2300      	movpl	r3, #0
 800a028:	2300      	movmi	r3, #0
 800a02a:	9206      	str	r2, [sp, #24]
 800a02c:	bf54      	ite	pl
 800a02e:	9300      	strpl	r3, [sp, #0]
 800a030:	9306      	strmi	r3, [sp, #24]
 800a032:	2f00      	cmp	r7, #0
 800a034:	db39      	blt.n	800a0aa <_dtoa_r+0x21a>
 800a036:	9b06      	ldr	r3, [sp, #24]
 800a038:	970d      	str	r7, [sp, #52]	@ 0x34
 800a03a:	443b      	add	r3, r7
 800a03c:	9306      	str	r3, [sp, #24]
 800a03e:	2300      	movs	r3, #0
 800a040:	9308      	str	r3, [sp, #32]
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	2b09      	cmp	r3, #9
 800a046:	d863      	bhi.n	800a110 <_dtoa_r+0x280>
 800a048:	2b05      	cmp	r3, #5
 800a04a:	bfc4      	itt	gt
 800a04c:	3b04      	subgt	r3, #4
 800a04e:	9307      	strgt	r3, [sp, #28]
 800a050:	9b07      	ldr	r3, [sp, #28]
 800a052:	f1a3 0302 	sub.w	r3, r3, #2
 800a056:	bfcc      	ite	gt
 800a058:	2400      	movgt	r4, #0
 800a05a:	2401      	movle	r4, #1
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d863      	bhi.n	800a128 <_dtoa_r+0x298>
 800a060:	e8df f003 	tbb	[pc, r3]
 800a064:	2b375452 	.word	0x2b375452
 800a068:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a06c:	441e      	add	r6, r3
 800a06e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a072:	2b20      	cmp	r3, #32
 800a074:	bfc1      	itttt	gt
 800a076:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a07a:	409f      	lslgt	r7, r3
 800a07c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a080:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a084:	bfd6      	itet	le
 800a086:	f1c3 0320 	rsble	r3, r3, #32
 800a08a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a08e:	fa04 f003 	lslle.w	r0, r4, r3
 800a092:	f7f6 fa47 	bl	8000524 <__aeabi_ui2d>
 800a096:	2201      	movs	r2, #1
 800a098:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a09c:	3e01      	subs	r6, #1
 800a09e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a0a0:	e776      	b.n	8009f90 <_dtoa_r+0x100>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e7b7      	b.n	800a016 <_dtoa_r+0x186>
 800a0a6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a0a8:	e7b6      	b.n	800a018 <_dtoa_r+0x188>
 800a0aa:	9b00      	ldr	r3, [sp, #0]
 800a0ac:	1bdb      	subs	r3, r3, r7
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	427b      	negs	r3, r7
 800a0b2:	9308      	str	r3, [sp, #32]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0b8:	e7c3      	b.n	800a042 <_dtoa_r+0x1b2>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0c0:	eb07 0b03 	add.w	fp, r7, r3
 800a0c4:	f10b 0301 	add.w	r3, fp, #1
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	9303      	str	r3, [sp, #12]
 800a0cc:	bfb8      	it	lt
 800a0ce:	2301      	movlt	r3, #1
 800a0d0:	e006      	b.n	800a0e0 <_dtoa_r+0x250>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dd28      	ble.n	800a12e <_dtoa_r+0x29e>
 800a0dc:	469b      	mov	fp, r3
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	2204      	movs	r2, #4
 800a0e8:	f102 0514 	add.w	r5, r2, #20
 800a0ec:	429d      	cmp	r5, r3
 800a0ee:	d926      	bls.n	800a13e <_dtoa_r+0x2ae>
 800a0f0:	6041      	str	r1, [r0, #4]
 800a0f2:	4648      	mov	r0, r9
 800a0f4:	f000 fd9c 	bl	800ac30 <_Balloc>
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d142      	bne.n	800a184 <_dtoa_r+0x2f4>
 800a0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a178 <_dtoa_r+0x2e8>)
 800a100:	4602      	mov	r2, r0
 800a102:	f240 11af 	movw	r1, #431	@ 0x1af
 800a106:	e6da      	b.n	8009ebe <_dtoa_r+0x2e>
 800a108:	2300      	movs	r3, #0
 800a10a:	e7e3      	b.n	800a0d4 <_dtoa_r+0x244>
 800a10c:	2300      	movs	r3, #0
 800a10e:	e7d5      	b.n	800a0bc <_dtoa_r+0x22c>
 800a110:	2401      	movs	r4, #1
 800a112:	2300      	movs	r3, #0
 800a114:	9307      	str	r3, [sp, #28]
 800a116:	9409      	str	r4, [sp, #36]	@ 0x24
 800a118:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a122:	2312      	movs	r3, #18
 800a124:	920c      	str	r2, [sp, #48]	@ 0x30
 800a126:	e7db      	b.n	800a0e0 <_dtoa_r+0x250>
 800a128:	2301      	movs	r3, #1
 800a12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12c:	e7f4      	b.n	800a118 <_dtoa_r+0x288>
 800a12e:	f04f 0b01 	mov.w	fp, #1
 800a132:	f8cd b00c 	str.w	fp, [sp, #12]
 800a136:	465b      	mov	r3, fp
 800a138:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a13c:	e7d0      	b.n	800a0e0 <_dtoa_r+0x250>
 800a13e:	3101      	adds	r1, #1
 800a140:	0052      	lsls	r2, r2, #1
 800a142:	e7d1      	b.n	800a0e8 <_dtoa_r+0x258>
 800a144:	f3af 8000 	nop.w
 800a148:	636f4361 	.word	0x636f4361
 800a14c:	3fd287a7 	.word	0x3fd287a7
 800a150:	8b60c8b3 	.word	0x8b60c8b3
 800a154:	3fc68a28 	.word	0x3fc68a28
 800a158:	509f79fb 	.word	0x509f79fb
 800a15c:	3fd34413 	.word	0x3fd34413
 800a160:	0800d9f5 	.word	0x0800d9f5
 800a164:	0800da0c 	.word	0x0800da0c
 800a168:	7ff00000 	.word	0x7ff00000
 800a16c:	0800d9c5 	.word	0x0800d9c5
 800a170:	3ff80000 	.word	0x3ff80000
 800a174:	0800db60 	.word	0x0800db60
 800a178:	0800da64 	.word	0x0800da64
 800a17c:	0800d9f1 	.word	0x0800d9f1
 800a180:	0800d9c4 	.word	0x0800d9c4
 800a184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a188:	6018      	str	r0, [r3, #0]
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	2b0e      	cmp	r3, #14
 800a18e:	f200 80a1 	bhi.w	800a2d4 <_dtoa_r+0x444>
 800a192:	2c00      	cmp	r4, #0
 800a194:	f000 809e 	beq.w	800a2d4 <_dtoa_r+0x444>
 800a198:	2f00      	cmp	r7, #0
 800a19a:	dd33      	ble.n	800a204 <_dtoa_r+0x374>
 800a19c:	4b9c      	ldr	r3, [pc, #624]	@ (800a410 <_dtoa_r+0x580>)
 800a19e:	f007 020f 	and.w	r2, r7, #15
 800a1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1a6:	ed93 7b00 	vldr	d7, [r3]
 800a1aa:	05f8      	lsls	r0, r7, #23
 800a1ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a1b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a1b4:	d516      	bpl.n	800a1e4 <_dtoa_r+0x354>
 800a1b6:	4b97      	ldr	r3, [pc, #604]	@ (800a414 <_dtoa_r+0x584>)
 800a1b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1c0:	f7f6 fb54 	bl	800086c <__aeabi_ddiv>
 800a1c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1c8:	f004 040f 	and.w	r4, r4, #15
 800a1cc:	2603      	movs	r6, #3
 800a1ce:	4d91      	ldr	r5, [pc, #580]	@ (800a414 <_dtoa_r+0x584>)
 800a1d0:	b954      	cbnz	r4, 800a1e8 <_dtoa_r+0x358>
 800a1d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1da:	f7f6 fb47 	bl	800086c <__aeabi_ddiv>
 800a1de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1e2:	e028      	b.n	800a236 <_dtoa_r+0x3a6>
 800a1e4:	2602      	movs	r6, #2
 800a1e6:	e7f2      	b.n	800a1ce <_dtoa_r+0x33e>
 800a1e8:	07e1      	lsls	r1, r4, #31
 800a1ea:	d508      	bpl.n	800a1fe <_dtoa_r+0x36e>
 800a1ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1f4:	f7f6 fa10 	bl	8000618 <__aeabi_dmul>
 800a1f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1fc:	3601      	adds	r6, #1
 800a1fe:	1064      	asrs	r4, r4, #1
 800a200:	3508      	adds	r5, #8
 800a202:	e7e5      	b.n	800a1d0 <_dtoa_r+0x340>
 800a204:	f000 80af 	beq.w	800a366 <_dtoa_r+0x4d6>
 800a208:	427c      	negs	r4, r7
 800a20a:	4b81      	ldr	r3, [pc, #516]	@ (800a410 <_dtoa_r+0x580>)
 800a20c:	4d81      	ldr	r5, [pc, #516]	@ (800a414 <_dtoa_r+0x584>)
 800a20e:	f004 020f 	and.w	r2, r4, #15
 800a212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a21e:	f7f6 f9fb 	bl	8000618 <__aeabi_dmul>
 800a222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a226:	1124      	asrs	r4, r4, #4
 800a228:	2300      	movs	r3, #0
 800a22a:	2602      	movs	r6, #2
 800a22c:	2c00      	cmp	r4, #0
 800a22e:	f040 808f 	bne.w	800a350 <_dtoa_r+0x4c0>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1d3      	bne.n	800a1de <_dtoa_r+0x34e>
 800a236:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a238:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8094 	beq.w	800a36a <_dtoa_r+0x4da>
 800a242:	4b75      	ldr	r3, [pc, #468]	@ (800a418 <_dtoa_r+0x588>)
 800a244:	2200      	movs	r2, #0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 fc57 	bl	8000afc <__aeabi_dcmplt>
 800a24e:	2800      	cmp	r0, #0
 800a250:	f000 808b 	beq.w	800a36a <_dtoa_r+0x4da>
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8087 	beq.w	800a36a <_dtoa_r+0x4da>
 800a25c:	f1bb 0f00 	cmp.w	fp, #0
 800a260:	dd34      	ble.n	800a2cc <_dtoa_r+0x43c>
 800a262:	4620      	mov	r0, r4
 800a264:	4b6d      	ldr	r3, [pc, #436]	@ (800a41c <_dtoa_r+0x58c>)
 800a266:	2200      	movs	r2, #0
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 f9d5 	bl	8000618 <__aeabi_dmul>
 800a26e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a272:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a276:	3601      	adds	r6, #1
 800a278:	465c      	mov	r4, fp
 800a27a:	4630      	mov	r0, r6
 800a27c:	f7f6 f962 	bl	8000544 <__aeabi_i2d>
 800a280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a284:	f7f6 f9c8 	bl	8000618 <__aeabi_dmul>
 800a288:	4b65      	ldr	r3, [pc, #404]	@ (800a420 <_dtoa_r+0x590>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	f7f6 f80e 	bl	80002ac <__adddf3>
 800a290:	4605      	mov	r5, r0
 800a292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a296:	2c00      	cmp	r4, #0
 800a298:	d16a      	bne.n	800a370 <_dtoa_r+0x4e0>
 800a29a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a29e:	4b61      	ldr	r3, [pc, #388]	@ (800a424 <_dtoa_r+0x594>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f7f6 f801 	bl	80002a8 <__aeabi_dsub>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	4633      	mov	r3, r6
 800a2b2:	f7f6 fc41 	bl	8000b38 <__aeabi_dcmpgt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f040 8298 	bne.w	800a7ec <_dtoa_r+0x95c>
 800a2bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2c6:	f7f6 fc19 	bl	8000afc <__aeabi_dcmplt>
 800a2ca:	bb38      	cbnz	r0, 800a31c <_dtoa_r+0x48c>
 800a2cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a2d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f2c0 8157 	blt.w	800a58a <_dtoa_r+0x6fa>
 800a2dc:	2f0e      	cmp	r7, #14
 800a2de:	f300 8154 	bgt.w	800a58a <_dtoa_r+0x6fa>
 800a2e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a410 <_dtoa_r+0x580>)
 800a2e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2e8:	ed93 7b00 	vldr	d7, [r3]
 800a2ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	ed8d 7b00 	vstr	d7, [sp]
 800a2f4:	f280 80e5 	bge.w	800a4c2 <_dtoa_r+0x632>
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f300 80e1 	bgt.w	800a4c2 <_dtoa_r+0x632>
 800a300:	d10c      	bne.n	800a31c <_dtoa_r+0x48c>
 800a302:	4b48      	ldr	r3, [pc, #288]	@ (800a424 <_dtoa_r+0x594>)
 800a304:	2200      	movs	r2, #0
 800a306:	ec51 0b17 	vmov	r0, r1, d7
 800a30a:	f7f6 f985 	bl	8000618 <__aeabi_dmul>
 800a30e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a312:	f7f6 fc07 	bl	8000b24 <__aeabi_dcmpge>
 800a316:	2800      	cmp	r0, #0
 800a318:	f000 8266 	beq.w	800a7e8 <_dtoa_r+0x958>
 800a31c:	2400      	movs	r4, #0
 800a31e:	4625      	mov	r5, r4
 800a320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a322:	4656      	mov	r6, sl
 800a324:	ea6f 0803 	mvn.w	r8, r3
 800a328:	2700      	movs	r7, #0
 800a32a:	4621      	mov	r1, r4
 800a32c:	4648      	mov	r0, r9
 800a32e:	f000 fcbf 	bl	800acb0 <_Bfree>
 800a332:	2d00      	cmp	r5, #0
 800a334:	f000 80bd 	beq.w	800a4b2 <_dtoa_r+0x622>
 800a338:	b12f      	cbz	r7, 800a346 <_dtoa_r+0x4b6>
 800a33a:	42af      	cmp	r7, r5
 800a33c:	d003      	beq.n	800a346 <_dtoa_r+0x4b6>
 800a33e:	4639      	mov	r1, r7
 800a340:	4648      	mov	r0, r9
 800a342:	f000 fcb5 	bl	800acb0 <_Bfree>
 800a346:	4629      	mov	r1, r5
 800a348:	4648      	mov	r0, r9
 800a34a:	f000 fcb1 	bl	800acb0 <_Bfree>
 800a34e:	e0b0      	b.n	800a4b2 <_dtoa_r+0x622>
 800a350:	07e2      	lsls	r2, r4, #31
 800a352:	d505      	bpl.n	800a360 <_dtoa_r+0x4d0>
 800a354:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a358:	f7f6 f95e 	bl	8000618 <__aeabi_dmul>
 800a35c:	3601      	adds	r6, #1
 800a35e:	2301      	movs	r3, #1
 800a360:	1064      	asrs	r4, r4, #1
 800a362:	3508      	adds	r5, #8
 800a364:	e762      	b.n	800a22c <_dtoa_r+0x39c>
 800a366:	2602      	movs	r6, #2
 800a368:	e765      	b.n	800a236 <_dtoa_r+0x3a6>
 800a36a:	9c03      	ldr	r4, [sp, #12]
 800a36c:	46b8      	mov	r8, r7
 800a36e:	e784      	b.n	800a27a <_dtoa_r+0x3ea>
 800a370:	4b27      	ldr	r3, [pc, #156]	@ (800a410 <_dtoa_r+0x580>)
 800a372:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a374:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a378:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a37c:	4454      	add	r4, sl
 800a37e:	2900      	cmp	r1, #0
 800a380:	d054      	beq.n	800a42c <_dtoa_r+0x59c>
 800a382:	4929      	ldr	r1, [pc, #164]	@ (800a428 <_dtoa_r+0x598>)
 800a384:	2000      	movs	r0, #0
 800a386:	f7f6 fa71 	bl	800086c <__aeabi_ddiv>
 800a38a:	4633      	mov	r3, r6
 800a38c:	462a      	mov	r2, r5
 800a38e:	f7f5 ff8b 	bl	80002a8 <__aeabi_dsub>
 800a392:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a396:	4656      	mov	r6, sl
 800a398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a39c:	f7f6 fbec 	bl	8000b78 <__aeabi_d2iz>
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	f7f6 f8cf 	bl	8000544 <__aeabi_i2d>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ae:	f7f5 ff7b 	bl	80002a8 <__aeabi_dsub>
 800a3b2:	3530      	adds	r5, #48	@ 0x30
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3bc:	f806 5b01 	strb.w	r5, [r6], #1
 800a3c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3c4:	f7f6 fb9a 	bl	8000afc <__aeabi_dcmplt>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d172      	bne.n	800a4b2 <_dtoa_r+0x622>
 800a3cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d0:	4911      	ldr	r1, [pc, #68]	@ (800a418 <_dtoa_r+0x588>)
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7f5 ff68 	bl	80002a8 <__aeabi_dsub>
 800a3d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3dc:	f7f6 fb8e 	bl	8000afc <__aeabi_dcmplt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f040 80b4 	bne.w	800a54e <_dtoa_r+0x6be>
 800a3e6:	42a6      	cmp	r6, r4
 800a3e8:	f43f af70 	beq.w	800a2cc <_dtoa_r+0x43c>
 800a3ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a3f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a41c <_dtoa_r+0x58c>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f7f6 f910 	bl	8000618 <__aeabi_dmul>
 800a3f8:	4b08      	ldr	r3, [pc, #32]	@ (800a41c <_dtoa_r+0x58c>)
 800a3fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a3fe:	2200      	movs	r2, #0
 800a400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a404:	f7f6 f908 	bl	8000618 <__aeabi_dmul>
 800a408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a40c:	e7c4      	b.n	800a398 <_dtoa_r+0x508>
 800a40e:	bf00      	nop
 800a410:	0800db60 	.word	0x0800db60
 800a414:	0800db38 	.word	0x0800db38
 800a418:	3ff00000 	.word	0x3ff00000
 800a41c:	40240000 	.word	0x40240000
 800a420:	401c0000 	.word	0x401c0000
 800a424:	40140000 	.word	0x40140000
 800a428:	3fe00000 	.word	0x3fe00000
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	f7f6 f8f2 	bl	8000618 <__aeabi_dmul>
 800a434:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a438:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a43a:	4656      	mov	r6, sl
 800a43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a440:	f7f6 fb9a 	bl	8000b78 <__aeabi_d2iz>
 800a444:	4605      	mov	r5, r0
 800a446:	f7f6 f87d 	bl	8000544 <__aeabi_i2d>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a452:	f7f5 ff29 	bl	80002a8 <__aeabi_dsub>
 800a456:	3530      	adds	r5, #48	@ 0x30
 800a458:	f806 5b01 	strb.w	r5, [r6], #1
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	42a6      	cmp	r6, r4
 800a462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	d124      	bne.n	800a4b6 <_dtoa_r+0x626>
 800a46c:	4baf      	ldr	r3, [pc, #700]	@ (800a72c <_dtoa_r+0x89c>)
 800a46e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a472:	f7f5 ff1b 	bl	80002ac <__adddf3>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a47e:	f7f6 fb5b 	bl	8000b38 <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	d163      	bne.n	800a54e <_dtoa_r+0x6be>
 800a486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a48a:	49a8      	ldr	r1, [pc, #672]	@ (800a72c <_dtoa_r+0x89c>)
 800a48c:	2000      	movs	r0, #0
 800a48e:	f7f5 ff0b 	bl	80002a8 <__aeabi_dsub>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a49a:	f7f6 fb2f 	bl	8000afc <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f af14 	beq.w	800a2cc <_dtoa_r+0x43c>
 800a4a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a4a6:	1e73      	subs	r3, r6, #1
 800a4a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4ae:	2b30      	cmp	r3, #48	@ 0x30
 800a4b0:	d0f8      	beq.n	800a4a4 <_dtoa_r+0x614>
 800a4b2:	4647      	mov	r7, r8
 800a4b4:	e03b      	b.n	800a52e <_dtoa_r+0x69e>
 800a4b6:	4b9e      	ldr	r3, [pc, #632]	@ (800a730 <_dtoa_r+0x8a0>)
 800a4b8:	f7f6 f8ae 	bl	8000618 <__aeabi_dmul>
 800a4bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4c0:	e7bc      	b.n	800a43c <_dtoa_r+0x5ac>
 800a4c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a4c6:	4656      	mov	r6, sl
 800a4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7f6 f9cc 	bl	800086c <__aeabi_ddiv>
 800a4d4:	f7f6 fb50 	bl	8000b78 <__aeabi_d2iz>
 800a4d8:	4680      	mov	r8, r0
 800a4da:	f7f6 f833 	bl	8000544 <__aeabi_i2d>
 800a4de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4e2:	f7f6 f899 	bl	8000618 <__aeabi_dmul>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a4f2:	f7f5 fed9 	bl	80002a8 <__aeabi_dsub>
 800a4f6:	f806 4b01 	strb.w	r4, [r6], #1
 800a4fa:	9d03      	ldr	r5, [sp, #12]
 800a4fc:	eba6 040a 	sub.w	r4, r6, sl
 800a500:	42a5      	cmp	r5, r4
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	d133      	bne.n	800a570 <_dtoa_r+0x6e0>
 800a508:	f7f5 fed0 	bl	80002ac <__adddf3>
 800a50c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	f7f6 fb10 	bl	8000b38 <__aeabi_dcmpgt>
 800a518:	b9c0      	cbnz	r0, 800a54c <_dtoa_r+0x6bc>
 800a51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a51e:	4620      	mov	r0, r4
 800a520:	4629      	mov	r1, r5
 800a522:	f7f6 fae1 	bl	8000ae8 <__aeabi_dcmpeq>
 800a526:	b110      	cbz	r0, 800a52e <_dtoa_r+0x69e>
 800a528:	f018 0f01 	tst.w	r8, #1
 800a52c:	d10e      	bne.n	800a54c <_dtoa_r+0x6bc>
 800a52e:	9902      	ldr	r1, [sp, #8]
 800a530:	4648      	mov	r0, r9
 800a532:	f000 fbbd 	bl	800acb0 <_Bfree>
 800a536:	2300      	movs	r3, #0
 800a538:	7033      	strb	r3, [r6, #0]
 800a53a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a53c:	3701      	adds	r7, #1
 800a53e:	601f      	str	r7, [r3, #0]
 800a540:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 824b 	beq.w	800a9de <_dtoa_r+0xb4e>
 800a548:	601e      	str	r6, [r3, #0]
 800a54a:	e248      	b.n	800a9de <_dtoa_r+0xb4e>
 800a54c:	46b8      	mov	r8, r7
 800a54e:	4633      	mov	r3, r6
 800a550:	461e      	mov	r6, r3
 800a552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a556:	2a39      	cmp	r2, #57	@ 0x39
 800a558:	d106      	bne.n	800a568 <_dtoa_r+0x6d8>
 800a55a:	459a      	cmp	sl, r3
 800a55c:	d1f8      	bne.n	800a550 <_dtoa_r+0x6c0>
 800a55e:	2230      	movs	r2, #48	@ 0x30
 800a560:	f108 0801 	add.w	r8, r8, #1
 800a564:	f88a 2000 	strb.w	r2, [sl]
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	3201      	adds	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e7a0      	b.n	800a4b2 <_dtoa_r+0x622>
 800a570:	4b6f      	ldr	r3, [pc, #444]	@ (800a730 <_dtoa_r+0x8a0>)
 800a572:	2200      	movs	r2, #0
 800a574:	f7f6 f850 	bl	8000618 <__aeabi_dmul>
 800a578:	2200      	movs	r2, #0
 800a57a:	2300      	movs	r3, #0
 800a57c:	4604      	mov	r4, r0
 800a57e:	460d      	mov	r5, r1
 800a580:	f7f6 fab2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a584:	2800      	cmp	r0, #0
 800a586:	d09f      	beq.n	800a4c8 <_dtoa_r+0x638>
 800a588:	e7d1      	b.n	800a52e <_dtoa_r+0x69e>
 800a58a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a58c:	2a00      	cmp	r2, #0
 800a58e:	f000 80ea 	beq.w	800a766 <_dtoa_r+0x8d6>
 800a592:	9a07      	ldr	r2, [sp, #28]
 800a594:	2a01      	cmp	r2, #1
 800a596:	f300 80cd 	bgt.w	800a734 <_dtoa_r+0x8a4>
 800a59a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	f000 80c1 	beq.w	800a724 <_dtoa_r+0x894>
 800a5a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a5a6:	9c08      	ldr	r4, [sp, #32]
 800a5a8:	9e00      	ldr	r6, [sp, #0]
 800a5aa:	9a00      	ldr	r2, [sp, #0]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	9200      	str	r2, [sp, #0]
 800a5b0:	9a06      	ldr	r2, [sp, #24]
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	441a      	add	r2, r3
 800a5b6:	4648      	mov	r0, r9
 800a5b8:	9206      	str	r2, [sp, #24]
 800a5ba:	f000 fc2d 	bl	800ae18 <__i2b>
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b166      	cbz	r6, 800a5dc <_dtoa_r+0x74c>
 800a5c2:	9b06      	ldr	r3, [sp, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd09      	ble.n	800a5dc <_dtoa_r+0x74c>
 800a5c8:	42b3      	cmp	r3, r6
 800a5ca:	9a00      	ldr	r2, [sp, #0]
 800a5cc:	bfa8      	it	ge
 800a5ce:	4633      	movge	r3, r6
 800a5d0:	1ad2      	subs	r2, r2, r3
 800a5d2:	9200      	str	r2, [sp, #0]
 800a5d4:	9a06      	ldr	r2, [sp, #24]
 800a5d6:	1af6      	subs	r6, r6, r3
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	9306      	str	r3, [sp, #24]
 800a5dc:	9b08      	ldr	r3, [sp, #32]
 800a5de:	b30b      	cbz	r3, 800a624 <_dtoa_r+0x794>
 800a5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80c6 	beq.w	800a774 <_dtoa_r+0x8e4>
 800a5e8:	2c00      	cmp	r4, #0
 800a5ea:	f000 80c0 	beq.w	800a76e <_dtoa_r+0x8de>
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4648      	mov	r0, r9
 800a5f4:	f000 fcc8 	bl	800af88 <__pow5mult>
 800a5f8:	9a02      	ldr	r2, [sp, #8]
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	4648      	mov	r0, r9
 800a600:	f000 fc20 	bl	800ae44 <__multiply>
 800a604:	9902      	ldr	r1, [sp, #8]
 800a606:	4680      	mov	r8, r0
 800a608:	4648      	mov	r0, r9
 800a60a:	f000 fb51 	bl	800acb0 <_Bfree>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	1b1b      	subs	r3, r3, r4
 800a612:	9308      	str	r3, [sp, #32]
 800a614:	f000 80b1 	beq.w	800a77a <_dtoa_r+0x8ea>
 800a618:	9a08      	ldr	r2, [sp, #32]
 800a61a:	4641      	mov	r1, r8
 800a61c:	4648      	mov	r0, r9
 800a61e:	f000 fcb3 	bl	800af88 <__pow5mult>
 800a622:	9002      	str	r0, [sp, #8]
 800a624:	2101      	movs	r1, #1
 800a626:	4648      	mov	r0, r9
 800a628:	f000 fbf6 	bl	800ae18 <__i2b>
 800a62c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a62e:	4604      	mov	r4, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 81d8 	beq.w	800a9e6 <_dtoa_r+0xb56>
 800a636:	461a      	mov	r2, r3
 800a638:	4601      	mov	r1, r0
 800a63a:	4648      	mov	r0, r9
 800a63c:	f000 fca4 	bl	800af88 <__pow5mult>
 800a640:	9b07      	ldr	r3, [sp, #28]
 800a642:	2b01      	cmp	r3, #1
 800a644:	4604      	mov	r4, r0
 800a646:	f300 809f 	bgt.w	800a788 <_dtoa_r+0x8f8>
 800a64a:	9b04      	ldr	r3, [sp, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 8097 	bne.w	800a780 <_dtoa_r+0x8f0>
 800a652:	9b05      	ldr	r3, [sp, #20]
 800a654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f040 8093 	bne.w	800a784 <_dtoa_r+0x8f4>
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a664:	0d1b      	lsrs	r3, r3, #20
 800a666:	051b      	lsls	r3, r3, #20
 800a668:	b133      	cbz	r3, 800a678 <_dtoa_r+0x7e8>
 800a66a:	9b00      	ldr	r3, [sp, #0]
 800a66c:	3301      	adds	r3, #1
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	3301      	adds	r3, #1
 800a674:	9306      	str	r3, [sp, #24]
 800a676:	2301      	movs	r3, #1
 800a678:	9308      	str	r3, [sp, #32]
 800a67a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 81b8 	beq.w	800a9f2 <_dtoa_r+0xb62>
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a688:	6918      	ldr	r0, [r3, #16]
 800a68a:	f000 fb79 	bl	800ad80 <__hi0bits>
 800a68e:	f1c0 0020 	rsb	r0, r0, #32
 800a692:	9b06      	ldr	r3, [sp, #24]
 800a694:	4418      	add	r0, r3
 800a696:	f010 001f 	ands.w	r0, r0, #31
 800a69a:	f000 8082 	beq.w	800a7a2 <_dtoa_r+0x912>
 800a69e:	f1c0 0320 	rsb	r3, r0, #32
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	dd73      	ble.n	800a78e <_dtoa_r+0x8fe>
 800a6a6:	9b00      	ldr	r3, [sp, #0]
 800a6a8:	f1c0 001c 	rsb	r0, r0, #28
 800a6ac:	4403      	add	r3, r0
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	9b06      	ldr	r3, [sp, #24]
 800a6b2:	4403      	add	r3, r0
 800a6b4:	4406      	add	r6, r0
 800a6b6:	9306      	str	r3, [sp, #24]
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dd05      	ble.n	800a6ca <_dtoa_r+0x83a>
 800a6be:	9902      	ldr	r1, [sp, #8]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4648      	mov	r0, r9
 800a6c4:	f000 fcba 	bl	800b03c <__lshift>
 800a6c8:	9002      	str	r0, [sp, #8]
 800a6ca:	9b06      	ldr	r3, [sp, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dd05      	ble.n	800a6dc <_dtoa_r+0x84c>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	4648      	mov	r0, r9
 800a6d6:	f000 fcb1 	bl	800b03c <__lshift>
 800a6da:	4604      	mov	r4, r0
 800a6dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d061      	beq.n	800a7a6 <_dtoa_r+0x916>
 800a6e2:	9802      	ldr	r0, [sp, #8]
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f000 fd15 	bl	800b114 <__mcmp>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	da5b      	bge.n	800a7a6 <_dtoa_r+0x916>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	9902      	ldr	r1, [sp, #8]
 800a6f2:	220a      	movs	r2, #10
 800a6f4:	4648      	mov	r0, r9
 800a6f6:	f000 fafd 	bl	800acf4 <__multadd>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fc:	9002      	str	r0, [sp, #8]
 800a6fe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 8177 	beq.w	800a9f6 <_dtoa_r+0xb66>
 800a708:	4629      	mov	r1, r5
 800a70a:	2300      	movs	r3, #0
 800a70c:	220a      	movs	r2, #10
 800a70e:	4648      	mov	r0, r9
 800a710:	f000 faf0 	bl	800acf4 <__multadd>
 800a714:	f1bb 0f00 	cmp.w	fp, #0
 800a718:	4605      	mov	r5, r0
 800a71a:	dc6f      	bgt.n	800a7fc <_dtoa_r+0x96c>
 800a71c:	9b07      	ldr	r3, [sp, #28]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	dc49      	bgt.n	800a7b6 <_dtoa_r+0x926>
 800a722:	e06b      	b.n	800a7fc <_dtoa_r+0x96c>
 800a724:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a72a:	e73c      	b.n	800a5a6 <_dtoa_r+0x716>
 800a72c:	3fe00000 	.word	0x3fe00000
 800a730:	40240000 	.word	0x40240000
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	1e5c      	subs	r4, r3, #1
 800a738:	9b08      	ldr	r3, [sp, #32]
 800a73a:	42a3      	cmp	r3, r4
 800a73c:	db09      	blt.n	800a752 <_dtoa_r+0x8c2>
 800a73e:	1b1c      	subs	r4, r3, r4
 800a740:	9b03      	ldr	r3, [sp, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f6bf af30 	bge.w	800a5a8 <_dtoa_r+0x718>
 800a748:	9b00      	ldr	r3, [sp, #0]
 800a74a:	9a03      	ldr	r2, [sp, #12]
 800a74c:	1a9e      	subs	r6, r3, r2
 800a74e:	2300      	movs	r3, #0
 800a750:	e72b      	b.n	800a5aa <_dtoa_r+0x71a>
 800a752:	9b08      	ldr	r3, [sp, #32]
 800a754:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a756:	9408      	str	r4, [sp, #32]
 800a758:	1ae3      	subs	r3, r4, r3
 800a75a:	441a      	add	r2, r3
 800a75c:	9e00      	ldr	r6, [sp, #0]
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	920d      	str	r2, [sp, #52]	@ 0x34
 800a762:	2400      	movs	r4, #0
 800a764:	e721      	b.n	800a5aa <_dtoa_r+0x71a>
 800a766:	9c08      	ldr	r4, [sp, #32]
 800a768:	9e00      	ldr	r6, [sp, #0]
 800a76a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a76c:	e728      	b.n	800a5c0 <_dtoa_r+0x730>
 800a76e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a772:	e751      	b.n	800a618 <_dtoa_r+0x788>
 800a774:	9a08      	ldr	r2, [sp, #32]
 800a776:	9902      	ldr	r1, [sp, #8]
 800a778:	e750      	b.n	800a61c <_dtoa_r+0x78c>
 800a77a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a77e:	e751      	b.n	800a624 <_dtoa_r+0x794>
 800a780:	2300      	movs	r3, #0
 800a782:	e779      	b.n	800a678 <_dtoa_r+0x7e8>
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	e777      	b.n	800a678 <_dtoa_r+0x7e8>
 800a788:	2300      	movs	r3, #0
 800a78a:	9308      	str	r3, [sp, #32]
 800a78c:	e779      	b.n	800a682 <_dtoa_r+0x7f2>
 800a78e:	d093      	beq.n	800a6b8 <_dtoa_r+0x828>
 800a790:	9a00      	ldr	r2, [sp, #0]
 800a792:	331c      	adds	r3, #28
 800a794:	441a      	add	r2, r3
 800a796:	9200      	str	r2, [sp, #0]
 800a798:	9a06      	ldr	r2, [sp, #24]
 800a79a:	441a      	add	r2, r3
 800a79c:	441e      	add	r6, r3
 800a79e:	9206      	str	r2, [sp, #24]
 800a7a0:	e78a      	b.n	800a6b8 <_dtoa_r+0x828>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	e7f4      	b.n	800a790 <_dtoa_r+0x900>
 800a7a6:	9b03      	ldr	r3, [sp, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	46b8      	mov	r8, r7
 800a7ac:	dc20      	bgt.n	800a7f0 <_dtoa_r+0x960>
 800a7ae:	469b      	mov	fp, r3
 800a7b0:	9b07      	ldr	r3, [sp, #28]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	dd1e      	ble.n	800a7f4 <_dtoa_r+0x964>
 800a7b6:	f1bb 0f00 	cmp.w	fp, #0
 800a7ba:	f47f adb1 	bne.w	800a320 <_dtoa_r+0x490>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	465b      	mov	r3, fp
 800a7c2:	2205      	movs	r2, #5
 800a7c4:	4648      	mov	r0, r9
 800a7c6:	f000 fa95 	bl	800acf4 <__multadd>
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	9802      	ldr	r0, [sp, #8]
 800a7d0:	f000 fca0 	bl	800b114 <__mcmp>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	f77f ada3 	ble.w	800a320 <_dtoa_r+0x490>
 800a7da:	4656      	mov	r6, sl
 800a7dc:	2331      	movs	r3, #49	@ 0x31
 800a7de:	f806 3b01 	strb.w	r3, [r6], #1
 800a7e2:	f108 0801 	add.w	r8, r8, #1
 800a7e6:	e59f      	b.n	800a328 <_dtoa_r+0x498>
 800a7e8:	9c03      	ldr	r4, [sp, #12]
 800a7ea:	46b8      	mov	r8, r7
 800a7ec:	4625      	mov	r5, r4
 800a7ee:	e7f4      	b.n	800a7da <_dtoa_r+0x94a>
 800a7f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 8101 	beq.w	800a9fe <_dtoa_r+0xb6e>
 800a7fc:	2e00      	cmp	r6, #0
 800a7fe:	dd05      	ble.n	800a80c <_dtoa_r+0x97c>
 800a800:	4629      	mov	r1, r5
 800a802:	4632      	mov	r2, r6
 800a804:	4648      	mov	r0, r9
 800a806:	f000 fc19 	bl	800b03c <__lshift>
 800a80a:	4605      	mov	r5, r0
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d05c      	beq.n	800a8cc <_dtoa_r+0xa3c>
 800a812:	6869      	ldr	r1, [r5, #4]
 800a814:	4648      	mov	r0, r9
 800a816:	f000 fa0b 	bl	800ac30 <_Balloc>
 800a81a:	4606      	mov	r6, r0
 800a81c:	b928      	cbnz	r0, 800a82a <_dtoa_r+0x99a>
 800a81e:	4b82      	ldr	r3, [pc, #520]	@ (800aa28 <_dtoa_r+0xb98>)
 800a820:	4602      	mov	r2, r0
 800a822:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a826:	f7ff bb4a 	b.w	8009ebe <_dtoa_r+0x2e>
 800a82a:	692a      	ldr	r2, [r5, #16]
 800a82c:	3202      	adds	r2, #2
 800a82e:	0092      	lsls	r2, r2, #2
 800a830:	f105 010c 	add.w	r1, r5, #12
 800a834:	300c      	adds	r0, #12
 800a836:	f001 f807 	bl	800b848 <memcpy>
 800a83a:	2201      	movs	r2, #1
 800a83c:	4631      	mov	r1, r6
 800a83e:	4648      	mov	r0, r9
 800a840:	f000 fbfc 	bl	800b03c <__lshift>
 800a844:	f10a 0301 	add.w	r3, sl, #1
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	eb0a 030b 	add.w	r3, sl, fp
 800a84e:	9308      	str	r3, [sp, #32]
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	462f      	mov	r7, r5
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	4605      	mov	r5, r0
 800a85c:	9b00      	ldr	r3, [sp, #0]
 800a85e:	9802      	ldr	r0, [sp, #8]
 800a860:	4621      	mov	r1, r4
 800a862:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a866:	f7ff fa8a 	bl	8009d7e <quorem>
 800a86a:	4603      	mov	r3, r0
 800a86c:	3330      	adds	r3, #48	@ 0x30
 800a86e:	9003      	str	r0, [sp, #12]
 800a870:	4639      	mov	r1, r7
 800a872:	9802      	ldr	r0, [sp, #8]
 800a874:	9309      	str	r3, [sp, #36]	@ 0x24
 800a876:	f000 fc4d 	bl	800b114 <__mcmp>
 800a87a:	462a      	mov	r2, r5
 800a87c:	9004      	str	r0, [sp, #16]
 800a87e:	4621      	mov	r1, r4
 800a880:	4648      	mov	r0, r9
 800a882:	f000 fc63 	bl	800b14c <__mdiff>
 800a886:	68c2      	ldr	r2, [r0, #12]
 800a888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88a:	4606      	mov	r6, r0
 800a88c:	bb02      	cbnz	r2, 800a8d0 <_dtoa_r+0xa40>
 800a88e:	4601      	mov	r1, r0
 800a890:	9802      	ldr	r0, [sp, #8]
 800a892:	f000 fc3f 	bl	800b114 <__mcmp>
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	4602      	mov	r2, r0
 800a89a:	4631      	mov	r1, r6
 800a89c:	4648      	mov	r0, r9
 800a89e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a8a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8a2:	f000 fa05 	bl	800acb0 <_Bfree>
 800a8a6:	9b07      	ldr	r3, [sp, #28]
 800a8a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a8aa:	9e00      	ldr	r6, [sp, #0]
 800a8ac:	ea42 0103 	orr.w	r1, r2, r3
 800a8b0:	9b06      	ldr	r3, [sp, #24]
 800a8b2:	4319      	orrs	r1, r3
 800a8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8b6:	d10d      	bne.n	800a8d4 <_dtoa_r+0xa44>
 800a8b8:	2b39      	cmp	r3, #57	@ 0x39
 800a8ba:	d027      	beq.n	800a90c <_dtoa_r+0xa7c>
 800a8bc:	9a04      	ldr	r2, [sp, #16]
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	dd01      	ble.n	800a8c6 <_dtoa_r+0xa36>
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	3331      	adds	r3, #49	@ 0x31
 800a8c6:	f88b 3000 	strb.w	r3, [fp]
 800a8ca:	e52e      	b.n	800a32a <_dtoa_r+0x49a>
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	e7b9      	b.n	800a844 <_dtoa_r+0x9b4>
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	e7e2      	b.n	800a89a <_dtoa_r+0xa0a>
 800a8d4:	9904      	ldr	r1, [sp, #16]
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	db04      	blt.n	800a8e4 <_dtoa_r+0xa54>
 800a8da:	9807      	ldr	r0, [sp, #28]
 800a8dc:	4301      	orrs	r1, r0
 800a8de:	9806      	ldr	r0, [sp, #24]
 800a8e0:	4301      	orrs	r1, r0
 800a8e2:	d120      	bne.n	800a926 <_dtoa_r+0xa96>
 800a8e4:	2a00      	cmp	r2, #0
 800a8e6:	ddee      	ble.n	800a8c6 <_dtoa_r+0xa36>
 800a8e8:	9902      	ldr	r1, [sp, #8]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	4648      	mov	r0, r9
 800a8f0:	f000 fba4 	bl	800b03c <__lshift>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	9002      	str	r0, [sp, #8]
 800a8f8:	f000 fc0c 	bl	800b114 <__mcmp>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	9b00      	ldr	r3, [sp, #0]
 800a900:	dc02      	bgt.n	800a908 <_dtoa_r+0xa78>
 800a902:	d1e0      	bne.n	800a8c6 <_dtoa_r+0xa36>
 800a904:	07da      	lsls	r2, r3, #31
 800a906:	d5de      	bpl.n	800a8c6 <_dtoa_r+0xa36>
 800a908:	2b39      	cmp	r3, #57	@ 0x39
 800a90a:	d1da      	bne.n	800a8c2 <_dtoa_r+0xa32>
 800a90c:	2339      	movs	r3, #57	@ 0x39
 800a90e:	f88b 3000 	strb.w	r3, [fp]
 800a912:	4633      	mov	r3, r6
 800a914:	461e      	mov	r6, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a91c:	2a39      	cmp	r2, #57	@ 0x39
 800a91e:	d04e      	beq.n	800a9be <_dtoa_r+0xb2e>
 800a920:	3201      	adds	r2, #1
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e501      	b.n	800a32a <_dtoa_r+0x49a>
 800a926:	2a00      	cmp	r2, #0
 800a928:	dd03      	ble.n	800a932 <_dtoa_r+0xaa2>
 800a92a:	2b39      	cmp	r3, #57	@ 0x39
 800a92c:	d0ee      	beq.n	800a90c <_dtoa_r+0xa7c>
 800a92e:	3301      	adds	r3, #1
 800a930:	e7c9      	b.n	800a8c6 <_dtoa_r+0xa36>
 800a932:	9a00      	ldr	r2, [sp, #0]
 800a934:	9908      	ldr	r1, [sp, #32]
 800a936:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a93a:	428a      	cmp	r2, r1
 800a93c:	d028      	beq.n	800a990 <_dtoa_r+0xb00>
 800a93e:	9902      	ldr	r1, [sp, #8]
 800a940:	2300      	movs	r3, #0
 800a942:	220a      	movs	r2, #10
 800a944:	4648      	mov	r0, r9
 800a946:	f000 f9d5 	bl	800acf4 <__multadd>
 800a94a:	42af      	cmp	r7, r5
 800a94c:	9002      	str	r0, [sp, #8]
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	f04f 020a 	mov.w	r2, #10
 800a956:	4639      	mov	r1, r7
 800a958:	4648      	mov	r0, r9
 800a95a:	d107      	bne.n	800a96c <_dtoa_r+0xadc>
 800a95c:	f000 f9ca 	bl	800acf4 <__multadd>
 800a960:	4607      	mov	r7, r0
 800a962:	4605      	mov	r5, r0
 800a964:	9b00      	ldr	r3, [sp, #0]
 800a966:	3301      	adds	r3, #1
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	e777      	b.n	800a85c <_dtoa_r+0x9cc>
 800a96c:	f000 f9c2 	bl	800acf4 <__multadd>
 800a970:	4629      	mov	r1, r5
 800a972:	4607      	mov	r7, r0
 800a974:	2300      	movs	r3, #0
 800a976:	220a      	movs	r2, #10
 800a978:	4648      	mov	r0, r9
 800a97a:	f000 f9bb 	bl	800acf4 <__multadd>
 800a97e:	4605      	mov	r5, r0
 800a980:	e7f0      	b.n	800a964 <_dtoa_r+0xad4>
 800a982:	f1bb 0f00 	cmp.w	fp, #0
 800a986:	bfcc      	ite	gt
 800a988:	465e      	movgt	r6, fp
 800a98a:	2601      	movle	r6, #1
 800a98c:	4456      	add	r6, sl
 800a98e:	2700      	movs	r7, #0
 800a990:	9902      	ldr	r1, [sp, #8]
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	2201      	movs	r2, #1
 800a996:	4648      	mov	r0, r9
 800a998:	f000 fb50 	bl	800b03c <__lshift>
 800a99c:	4621      	mov	r1, r4
 800a99e:	9002      	str	r0, [sp, #8]
 800a9a0:	f000 fbb8 	bl	800b114 <__mcmp>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	dcb4      	bgt.n	800a912 <_dtoa_r+0xa82>
 800a9a8:	d102      	bne.n	800a9b0 <_dtoa_r+0xb20>
 800a9aa:	9b00      	ldr	r3, [sp, #0]
 800a9ac:	07db      	lsls	r3, r3, #31
 800a9ae:	d4b0      	bmi.n	800a912 <_dtoa_r+0xa82>
 800a9b0:	4633      	mov	r3, r6
 800a9b2:	461e      	mov	r6, r3
 800a9b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9b8:	2a30      	cmp	r2, #48	@ 0x30
 800a9ba:	d0fa      	beq.n	800a9b2 <_dtoa_r+0xb22>
 800a9bc:	e4b5      	b.n	800a32a <_dtoa_r+0x49a>
 800a9be:	459a      	cmp	sl, r3
 800a9c0:	d1a8      	bne.n	800a914 <_dtoa_r+0xa84>
 800a9c2:	2331      	movs	r3, #49	@ 0x31
 800a9c4:	f108 0801 	add.w	r8, r8, #1
 800a9c8:	f88a 3000 	strb.w	r3, [sl]
 800a9cc:	e4ad      	b.n	800a32a <_dtoa_r+0x49a>
 800a9ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800aa2c <_dtoa_r+0xb9c>
 800a9d4:	b11b      	cbz	r3, 800a9de <_dtoa_r+0xb4e>
 800a9d6:	f10a 0308 	add.w	r3, sl, #8
 800a9da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	4650      	mov	r0, sl
 800a9e0:	b017      	add	sp, #92	@ 0x5c
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	9b07      	ldr	r3, [sp, #28]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	f77f ae2e 	ble.w	800a64a <_dtoa_r+0x7ba>
 800a9ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9f0:	9308      	str	r3, [sp, #32]
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	e64d      	b.n	800a692 <_dtoa_r+0x802>
 800a9f6:	f1bb 0f00 	cmp.w	fp, #0
 800a9fa:	f77f aed9 	ble.w	800a7b0 <_dtoa_r+0x920>
 800a9fe:	4656      	mov	r6, sl
 800aa00:	9802      	ldr	r0, [sp, #8]
 800aa02:	4621      	mov	r1, r4
 800aa04:	f7ff f9bb 	bl	8009d7e <quorem>
 800aa08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800aa0c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa10:	eba6 020a 	sub.w	r2, r6, sl
 800aa14:	4593      	cmp	fp, r2
 800aa16:	ddb4      	ble.n	800a982 <_dtoa_r+0xaf2>
 800aa18:	9902      	ldr	r1, [sp, #8]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	220a      	movs	r2, #10
 800aa1e:	4648      	mov	r0, r9
 800aa20:	f000 f968 	bl	800acf4 <__multadd>
 800aa24:	9002      	str	r0, [sp, #8]
 800aa26:	e7eb      	b.n	800aa00 <_dtoa_r+0xb70>
 800aa28:	0800da64 	.word	0x0800da64
 800aa2c:	0800d9e8 	.word	0x0800d9e8

0800aa30 <_free_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4605      	mov	r5, r0
 800aa34:	2900      	cmp	r1, #0
 800aa36:	d041      	beq.n	800aabc <_free_r+0x8c>
 800aa38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3c:	1f0c      	subs	r4, r1, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bfb8      	it	lt
 800aa42:	18e4      	addlt	r4, r4, r3
 800aa44:	f000 f8e8 	bl	800ac18 <__malloc_lock>
 800aa48:	4a1d      	ldr	r2, [pc, #116]	@ (800aac0 <_free_r+0x90>)
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	b933      	cbnz	r3, 800aa5c <_free_r+0x2c>
 800aa4e:	6063      	str	r3, [r4, #4]
 800aa50:	6014      	str	r4, [r2, #0]
 800aa52:	4628      	mov	r0, r5
 800aa54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa58:	f000 b8e4 	b.w	800ac24 <__malloc_unlock>
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d908      	bls.n	800aa72 <_free_r+0x42>
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	1821      	adds	r1, r4, r0
 800aa64:	428b      	cmp	r3, r1
 800aa66:	bf01      	itttt	eq
 800aa68:	6819      	ldreq	r1, [r3, #0]
 800aa6a:	685b      	ldreq	r3, [r3, #4]
 800aa6c:	1809      	addeq	r1, r1, r0
 800aa6e:	6021      	streq	r1, [r4, #0]
 800aa70:	e7ed      	b.n	800aa4e <_free_r+0x1e>
 800aa72:	461a      	mov	r2, r3
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	b10b      	cbz	r3, 800aa7c <_free_r+0x4c>
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d9fa      	bls.n	800aa72 <_free_r+0x42>
 800aa7c:	6811      	ldr	r1, [r2, #0]
 800aa7e:	1850      	adds	r0, r2, r1
 800aa80:	42a0      	cmp	r0, r4
 800aa82:	d10b      	bne.n	800aa9c <_free_r+0x6c>
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	4401      	add	r1, r0
 800aa88:	1850      	adds	r0, r2, r1
 800aa8a:	4283      	cmp	r3, r0
 800aa8c:	6011      	str	r1, [r2, #0]
 800aa8e:	d1e0      	bne.n	800aa52 <_free_r+0x22>
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	6053      	str	r3, [r2, #4]
 800aa96:	4408      	add	r0, r1
 800aa98:	6010      	str	r0, [r2, #0]
 800aa9a:	e7da      	b.n	800aa52 <_free_r+0x22>
 800aa9c:	d902      	bls.n	800aaa4 <_free_r+0x74>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	e7d6      	b.n	800aa52 <_free_r+0x22>
 800aaa4:	6820      	ldr	r0, [r4, #0]
 800aaa6:	1821      	adds	r1, r4, r0
 800aaa8:	428b      	cmp	r3, r1
 800aaaa:	bf04      	itt	eq
 800aaac:	6819      	ldreq	r1, [r3, #0]
 800aaae:	685b      	ldreq	r3, [r3, #4]
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	bf04      	itt	eq
 800aab4:	1809      	addeq	r1, r1, r0
 800aab6:	6021      	streq	r1, [r4, #0]
 800aab8:	6054      	str	r4, [r2, #4]
 800aaba:	e7ca      	b.n	800aa52 <_free_r+0x22>
 800aabc:	bd38      	pop	{r3, r4, r5, pc}
 800aabe:	bf00      	nop
 800aac0:	20000c24 	.word	0x20000c24

0800aac4 <malloc>:
 800aac4:	4b02      	ldr	r3, [pc, #8]	@ (800aad0 <malloc+0xc>)
 800aac6:	4601      	mov	r1, r0
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f000 b825 	b.w	800ab18 <_malloc_r>
 800aace:	bf00      	nop
 800aad0:	20000440 	.word	0x20000440

0800aad4 <sbrk_aligned>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	4e0f      	ldr	r6, [pc, #60]	@ (800ab14 <sbrk_aligned+0x40>)
 800aad8:	460c      	mov	r4, r1
 800aada:	6831      	ldr	r1, [r6, #0]
 800aadc:	4605      	mov	r5, r0
 800aade:	b911      	cbnz	r1, 800aae6 <sbrk_aligned+0x12>
 800aae0:	f000 fea2 	bl	800b828 <_sbrk_r>
 800aae4:	6030      	str	r0, [r6, #0]
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f000 fe9d 	bl	800b828 <_sbrk_r>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d103      	bne.n	800aafa <sbrk_aligned+0x26>
 800aaf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	bd70      	pop	{r4, r5, r6, pc}
 800aafa:	1cc4      	adds	r4, r0, #3
 800aafc:	f024 0403 	bic.w	r4, r4, #3
 800ab00:	42a0      	cmp	r0, r4
 800ab02:	d0f8      	beq.n	800aaf6 <sbrk_aligned+0x22>
 800ab04:	1a21      	subs	r1, r4, r0
 800ab06:	4628      	mov	r0, r5
 800ab08:	f000 fe8e 	bl	800b828 <_sbrk_r>
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d1f2      	bne.n	800aaf6 <sbrk_aligned+0x22>
 800ab10:	e7ef      	b.n	800aaf2 <sbrk_aligned+0x1e>
 800ab12:	bf00      	nop
 800ab14:	20000c20 	.word	0x20000c20

0800ab18 <_malloc_r>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	1ccd      	adds	r5, r1, #3
 800ab1e:	f025 0503 	bic.w	r5, r5, #3
 800ab22:	3508      	adds	r5, #8
 800ab24:	2d0c      	cmp	r5, #12
 800ab26:	bf38      	it	cc
 800ab28:	250c      	movcc	r5, #12
 800ab2a:	2d00      	cmp	r5, #0
 800ab2c:	4606      	mov	r6, r0
 800ab2e:	db01      	blt.n	800ab34 <_malloc_r+0x1c>
 800ab30:	42a9      	cmp	r1, r5
 800ab32:	d904      	bls.n	800ab3e <_malloc_r+0x26>
 800ab34:	230c      	movs	r3, #12
 800ab36:	6033      	str	r3, [r6, #0]
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac14 <_malloc_r+0xfc>
 800ab42:	f000 f869 	bl	800ac18 <__malloc_lock>
 800ab46:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4a:	461c      	mov	r4, r3
 800ab4c:	bb44      	cbnz	r4, 800aba0 <_malloc_r+0x88>
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4630      	mov	r0, r6
 800ab52:	f7ff ffbf 	bl	800aad4 <sbrk_aligned>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	4604      	mov	r4, r0
 800ab5a:	d158      	bne.n	800ac0e <_malloc_r+0xf6>
 800ab5c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab60:	4627      	mov	r7, r4
 800ab62:	2f00      	cmp	r7, #0
 800ab64:	d143      	bne.n	800abee <_malloc_r+0xd6>
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d04b      	beq.n	800ac02 <_malloc_r+0xea>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4630      	mov	r0, r6
 800ab70:	eb04 0903 	add.w	r9, r4, r3
 800ab74:	f000 fe58 	bl	800b828 <_sbrk_r>
 800ab78:	4581      	cmp	r9, r0
 800ab7a:	d142      	bne.n	800ac02 <_malloc_r+0xea>
 800ab7c:	6821      	ldr	r1, [r4, #0]
 800ab7e:	1a6d      	subs	r5, r5, r1
 800ab80:	4629      	mov	r1, r5
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7ff ffa6 	bl	800aad4 <sbrk_aligned>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d03a      	beq.n	800ac02 <_malloc_r+0xea>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	442b      	add	r3, r5
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	f8d8 3000 	ldr.w	r3, [r8]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	bb62      	cbnz	r2, 800abf4 <_malloc_r+0xdc>
 800ab9a:	f8c8 7000 	str.w	r7, [r8]
 800ab9e:	e00f      	b.n	800abc0 <_malloc_r+0xa8>
 800aba0:	6822      	ldr	r2, [r4, #0]
 800aba2:	1b52      	subs	r2, r2, r5
 800aba4:	d420      	bmi.n	800abe8 <_malloc_r+0xd0>
 800aba6:	2a0b      	cmp	r2, #11
 800aba8:	d917      	bls.n	800abda <_malloc_r+0xc2>
 800abaa:	1961      	adds	r1, r4, r5
 800abac:	42a3      	cmp	r3, r4
 800abae:	6025      	str	r5, [r4, #0]
 800abb0:	bf18      	it	ne
 800abb2:	6059      	strne	r1, [r3, #4]
 800abb4:	6863      	ldr	r3, [r4, #4]
 800abb6:	bf08      	it	eq
 800abb8:	f8c8 1000 	streq.w	r1, [r8]
 800abbc:	5162      	str	r2, [r4, r5]
 800abbe:	604b      	str	r3, [r1, #4]
 800abc0:	4630      	mov	r0, r6
 800abc2:	f000 f82f 	bl	800ac24 <__malloc_unlock>
 800abc6:	f104 000b 	add.w	r0, r4, #11
 800abca:	1d23      	adds	r3, r4, #4
 800abcc:	f020 0007 	bic.w	r0, r0, #7
 800abd0:	1ac2      	subs	r2, r0, r3
 800abd2:	bf1c      	itt	ne
 800abd4:	1a1b      	subne	r3, r3, r0
 800abd6:	50a3      	strne	r3, [r4, r2]
 800abd8:	e7af      	b.n	800ab3a <_malloc_r+0x22>
 800abda:	6862      	ldr	r2, [r4, #4]
 800abdc:	42a3      	cmp	r3, r4
 800abde:	bf0c      	ite	eq
 800abe0:	f8c8 2000 	streq.w	r2, [r8]
 800abe4:	605a      	strne	r2, [r3, #4]
 800abe6:	e7eb      	b.n	800abc0 <_malloc_r+0xa8>
 800abe8:	4623      	mov	r3, r4
 800abea:	6864      	ldr	r4, [r4, #4]
 800abec:	e7ae      	b.n	800ab4c <_malloc_r+0x34>
 800abee:	463c      	mov	r4, r7
 800abf0:	687f      	ldr	r7, [r7, #4]
 800abf2:	e7b6      	b.n	800ab62 <_malloc_r+0x4a>
 800abf4:	461a      	mov	r2, r3
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	d1fb      	bne.n	800abf4 <_malloc_r+0xdc>
 800abfc:	2300      	movs	r3, #0
 800abfe:	6053      	str	r3, [r2, #4]
 800ac00:	e7de      	b.n	800abc0 <_malloc_r+0xa8>
 800ac02:	230c      	movs	r3, #12
 800ac04:	6033      	str	r3, [r6, #0]
 800ac06:	4630      	mov	r0, r6
 800ac08:	f000 f80c 	bl	800ac24 <__malloc_unlock>
 800ac0c:	e794      	b.n	800ab38 <_malloc_r+0x20>
 800ac0e:	6005      	str	r5, [r0, #0]
 800ac10:	e7d6      	b.n	800abc0 <_malloc_r+0xa8>
 800ac12:	bf00      	nop
 800ac14:	20000c24 	.word	0x20000c24

0800ac18 <__malloc_lock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	@ (800ac20 <__malloc_lock+0x8>)
 800ac1a:	f7ff b8ae 	b.w	8009d7a <__retarget_lock_acquire_recursive>
 800ac1e:	bf00      	nop
 800ac20:	20000c1c 	.word	0x20000c1c

0800ac24 <__malloc_unlock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	@ (800ac2c <__malloc_unlock+0x8>)
 800ac26:	f7ff b8a9 	b.w	8009d7c <__retarget_lock_release_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	20000c1c 	.word	0x20000c1c

0800ac30 <_Balloc>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	69c6      	ldr	r6, [r0, #28]
 800ac34:	4604      	mov	r4, r0
 800ac36:	460d      	mov	r5, r1
 800ac38:	b976      	cbnz	r6, 800ac58 <_Balloc+0x28>
 800ac3a:	2010      	movs	r0, #16
 800ac3c:	f7ff ff42 	bl	800aac4 <malloc>
 800ac40:	4602      	mov	r2, r0
 800ac42:	61e0      	str	r0, [r4, #28]
 800ac44:	b920      	cbnz	r0, 800ac50 <_Balloc+0x20>
 800ac46:	4b18      	ldr	r3, [pc, #96]	@ (800aca8 <_Balloc+0x78>)
 800ac48:	4818      	ldr	r0, [pc, #96]	@ (800acac <_Balloc+0x7c>)
 800ac4a:	216b      	movs	r1, #107	@ 0x6b
 800ac4c:	f000 fe0a 	bl	800b864 <__assert_func>
 800ac50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac54:	6006      	str	r6, [r0, #0]
 800ac56:	60c6      	str	r6, [r0, #12]
 800ac58:	69e6      	ldr	r6, [r4, #28]
 800ac5a:	68f3      	ldr	r3, [r6, #12]
 800ac5c:	b183      	cbz	r3, 800ac80 <_Balloc+0x50>
 800ac5e:	69e3      	ldr	r3, [r4, #28]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac66:	b9b8      	cbnz	r0, 800ac98 <_Balloc+0x68>
 800ac68:	2101      	movs	r1, #1
 800ac6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac6e:	1d72      	adds	r2, r6, #5
 800ac70:	0092      	lsls	r2, r2, #2
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 fe14 	bl	800b8a0 <_calloc_r>
 800ac78:	b160      	cbz	r0, 800ac94 <_Balloc+0x64>
 800ac7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac7e:	e00e      	b.n	800ac9e <_Balloc+0x6e>
 800ac80:	2221      	movs	r2, #33	@ 0x21
 800ac82:	2104      	movs	r1, #4
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fe0b 	bl	800b8a0 <_calloc_r>
 800ac8a:	69e3      	ldr	r3, [r4, #28]
 800ac8c:	60f0      	str	r0, [r6, #12]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e4      	bne.n	800ac5e <_Balloc+0x2e>
 800ac94:	2000      	movs	r0, #0
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	6802      	ldr	r2, [r0, #0]
 800ac9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aca4:	e7f7      	b.n	800ac96 <_Balloc+0x66>
 800aca6:	bf00      	nop
 800aca8:	0800d9f5 	.word	0x0800d9f5
 800acac:	0800da75 	.word	0x0800da75

0800acb0 <_Bfree>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	69c6      	ldr	r6, [r0, #28]
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b976      	cbnz	r6, 800acd8 <_Bfree+0x28>
 800acba:	2010      	movs	r0, #16
 800acbc:	f7ff ff02 	bl	800aac4 <malloc>
 800acc0:	4602      	mov	r2, r0
 800acc2:	61e8      	str	r0, [r5, #28]
 800acc4:	b920      	cbnz	r0, 800acd0 <_Bfree+0x20>
 800acc6:	4b09      	ldr	r3, [pc, #36]	@ (800acec <_Bfree+0x3c>)
 800acc8:	4809      	ldr	r0, [pc, #36]	@ (800acf0 <_Bfree+0x40>)
 800acca:	218f      	movs	r1, #143	@ 0x8f
 800accc:	f000 fdca 	bl	800b864 <__assert_func>
 800acd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd4:	6006      	str	r6, [r0, #0]
 800acd6:	60c6      	str	r6, [r0, #12]
 800acd8:	b13c      	cbz	r4, 800acea <_Bfree+0x3a>
 800acda:	69eb      	ldr	r3, [r5, #28]
 800acdc:	6862      	ldr	r2, [r4, #4]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace4:	6021      	str	r1, [r4, #0]
 800ace6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	0800d9f5 	.word	0x0800d9f5
 800acf0:	0800da75 	.word	0x0800da75

0800acf4 <__multadd>:
 800acf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf8:	690d      	ldr	r5, [r1, #16]
 800acfa:	4607      	mov	r7, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	461e      	mov	r6, r3
 800ad00:	f101 0c14 	add.w	ip, r1, #20
 800ad04:	2000      	movs	r0, #0
 800ad06:	f8dc 3000 	ldr.w	r3, [ip]
 800ad0a:	b299      	uxth	r1, r3
 800ad0c:	fb02 6101 	mla	r1, r2, r1, r6
 800ad10:	0c1e      	lsrs	r6, r3, #16
 800ad12:	0c0b      	lsrs	r3, r1, #16
 800ad14:	fb02 3306 	mla	r3, r2, r6, r3
 800ad18:	b289      	uxth	r1, r1
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad20:	4285      	cmp	r5, r0
 800ad22:	f84c 1b04 	str.w	r1, [ip], #4
 800ad26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad2a:	dcec      	bgt.n	800ad06 <__multadd+0x12>
 800ad2c:	b30e      	cbz	r6, 800ad72 <__multadd+0x7e>
 800ad2e:	68a3      	ldr	r3, [r4, #8]
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	dc19      	bgt.n	800ad68 <__multadd+0x74>
 800ad34:	6861      	ldr	r1, [r4, #4]
 800ad36:	4638      	mov	r0, r7
 800ad38:	3101      	adds	r1, #1
 800ad3a:	f7ff ff79 	bl	800ac30 <_Balloc>
 800ad3e:	4680      	mov	r8, r0
 800ad40:	b928      	cbnz	r0, 800ad4e <__multadd+0x5a>
 800ad42:	4602      	mov	r2, r0
 800ad44:	4b0c      	ldr	r3, [pc, #48]	@ (800ad78 <__multadd+0x84>)
 800ad46:	480d      	ldr	r0, [pc, #52]	@ (800ad7c <__multadd+0x88>)
 800ad48:	21ba      	movs	r1, #186	@ 0xba
 800ad4a:	f000 fd8b 	bl	800b864 <__assert_func>
 800ad4e:	6922      	ldr	r2, [r4, #16]
 800ad50:	3202      	adds	r2, #2
 800ad52:	f104 010c 	add.w	r1, r4, #12
 800ad56:	0092      	lsls	r2, r2, #2
 800ad58:	300c      	adds	r0, #12
 800ad5a:	f000 fd75 	bl	800b848 <memcpy>
 800ad5e:	4621      	mov	r1, r4
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff ffa5 	bl	800acb0 <_Bfree>
 800ad66:	4644      	mov	r4, r8
 800ad68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad6c:	3501      	adds	r5, #1
 800ad6e:	615e      	str	r6, [r3, #20]
 800ad70:	6125      	str	r5, [r4, #16]
 800ad72:	4620      	mov	r0, r4
 800ad74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad78:	0800da64 	.word	0x0800da64
 800ad7c:	0800da75 	.word	0x0800da75

0800ad80 <__hi0bits>:
 800ad80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad84:	4603      	mov	r3, r0
 800ad86:	bf36      	itet	cc
 800ad88:	0403      	lslcc	r3, r0, #16
 800ad8a:	2000      	movcs	r0, #0
 800ad8c:	2010      	movcc	r0, #16
 800ad8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad92:	bf3c      	itt	cc
 800ad94:	021b      	lslcc	r3, r3, #8
 800ad96:	3008      	addcc	r0, #8
 800ad98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad9c:	bf3c      	itt	cc
 800ad9e:	011b      	lslcc	r3, r3, #4
 800ada0:	3004      	addcc	r0, #4
 800ada2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ada6:	bf3c      	itt	cc
 800ada8:	009b      	lslcc	r3, r3, #2
 800adaa:	3002      	addcc	r0, #2
 800adac:	2b00      	cmp	r3, #0
 800adae:	db05      	blt.n	800adbc <__hi0bits+0x3c>
 800adb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800adb4:	f100 0001 	add.w	r0, r0, #1
 800adb8:	bf08      	it	eq
 800adba:	2020      	moveq	r0, #32
 800adbc:	4770      	bx	lr

0800adbe <__lo0bits>:
 800adbe:	6803      	ldr	r3, [r0, #0]
 800adc0:	4602      	mov	r2, r0
 800adc2:	f013 0007 	ands.w	r0, r3, #7
 800adc6:	d00b      	beq.n	800ade0 <__lo0bits+0x22>
 800adc8:	07d9      	lsls	r1, r3, #31
 800adca:	d421      	bmi.n	800ae10 <__lo0bits+0x52>
 800adcc:	0798      	lsls	r0, r3, #30
 800adce:	bf49      	itett	mi
 800add0:	085b      	lsrmi	r3, r3, #1
 800add2:	089b      	lsrpl	r3, r3, #2
 800add4:	2001      	movmi	r0, #1
 800add6:	6013      	strmi	r3, [r2, #0]
 800add8:	bf5c      	itt	pl
 800adda:	6013      	strpl	r3, [r2, #0]
 800addc:	2002      	movpl	r0, #2
 800adde:	4770      	bx	lr
 800ade0:	b299      	uxth	r1, r3
 800ade2:	b909      	cbnz	r1, 800ade8 <__lo0bits+0x2a>
 800ade4:	0c1b      	lsrs	r3, r3, #16
 800ade6:	2010      	movs	r0, #16
 800ade8:	b2d9      	uxtb	r1, r3
 800adea:	b909      	cbnz	r1, 800adf0 <__lo0bits+0x32>
 800adec:	3008      	adds	r0, #8
 800adee:	0a1b      	lsrs	r3, r3, #8
 800adf0:	0719      	lsls	r1, r3, #28
 800adf2:	bf04      	itt	eq
 800adf4:	091b      	lsreq	r3, r3, #4
 800adf6:	3004      	addeq	r0, #4
 800adf8:	0799      	lsls	r1, r3, #30
 800adfa:	bf04      	itt	eq
 800adfc:	089b      	lsreq	r3, r3, #2
 800adfe:	3002      	addeq	r0, #2
 800ae00:	07d9      	lsls	r1, r3, #31
 800ae02:	d403      	bmi.n	800ae0c <__lo0bits+0x4e>
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	f100 0001 	add.w	r0, r0, #1
 800ae0a:	d003      	beq.n	800ae14 <__lo0bits+0x56>
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	4770      	bx	lr
 800ae10:	2000      	movs	r0, #0
 800ae12:	4770      	bx	lr
 800ae14:	2020      	movs	r0, #32
 800ae16:	4770      	bx	lr

0800ae18 <__i2b>:
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	f7ff ff07 	bl	800ac30 <_Balloc>
 800ae22:	4602      	mov	r2, r0
 800ae24:	b928      	cbnz	r0, 800ae32 <__i2b+0x1a>
 800ae26:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <__i2b+0x24>)
 800ae28:	4805      	ldr	r0, [pc, #20]	@ (800ae40 <__i2b+0x28>)
 800ae2a:	f240 1145 	movw	r1, #325	@ 0x145
 800ae2e:	f000 fd19 	bl	800b864 <__assert_func>
 800ae32:	2301      	movs	r3, #1
 800ae34:	6144      	str	r4, [r0, #20]
 800ae36:	6103      	str	r3, [r0, #16]
 800ae38:	bd10      	pop	{r4, pc}
 800ae3a:	bf00      	nop
 800ae3c:	0800da64 	.word	0x0800da64
 800ae40:	0800da75 	.word	0x0800da75

0800ae44 <__multiply>:
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	4617      	mov	r7, r2
 800ae4a:	690a      	ldr	r2, [r1, #16]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	bfa8      	it	ge
 800ae52:	463b      	movge	r3, r7
 800ae54:	4689      	mov	r9, r1
 800ae56:	bfa4      	itt	ge
 800ae58:	460f      	movge	r7, r1
 800ae5a:	4699      	movge	r9, r3
 800ae5c:	693d      	ldr	r5, [r7, #16]
 800ae5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	eb05 060a 	add.w	r6, r5, sl
 800ae6a:	42b3      	cmp	r3, r6
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	bfb8      	it	lt
 800ae70:	3101      	addlt	r1, #1
 800ae72:	f7ff fedd 	bl	800ac30 <_Balloc>
 800ae76:	b930      	cbnz	r0, 800ae86 <__multiply+0x42>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	4b41      	ldr	r3, [pc, #260]	@ (800af80 <__multiply+0x13c>)
 800ae7c:	4841      	ldr	r0, [pc, #260]	@ (800af84 <__multiply+0x140>)
 800ae7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae82:	f000 fcef 	bl	800b864 <__assert_func>
 800ae86:	f100 0414 	add.w	r4, r0, #20
 800ae8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ae8e:	4623      	mov	r3, r4
 800ae90:	2200      	movs	r2, #0
 800ae92:	4573      	cmp	r3, lr
 800ae94:	d320      	bcc.n	800aed8 <__multiply+0x94>
 800ae96:	f107 0814 	add.w	r8, r7, #20
 800ae9a:	f109 0114 	add.w	r1, r9, #20
 800ae9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800aea2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	1beb      	subs	r3, r5, r7
 800aeaa:	3b15      	subs	r3, #21
 800aeac:	f023 0303 	bic.w	r3, r3, #3
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	3715      	adds	r7, #21
 800aeb4:	42bd      	cmp	r5, r7
 800aeb6:	bf38      	it	cc
 800aeb8:	2304      	movcc	r3, #4
 800aeba:	9301      	str	r3, [sp, #4]
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	9103      	str	r1, [sp, #12]
 800aec0:	428b      	cmp	r3, r1
 800aec2:	d80c      	bhi.n	800aede <__multiply+0x9a>
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	dd03      	ble.n	800aed0 <__multiply+0x8c>
 800aec8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d055      	beq.n	800af7c <__multiply+0x138>
 800aed0:	6106      	str	r6, [r0, #16]
 800aed2:	b005      	add	sp, #20
 800aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed8:	f843 2b04 	str.w	r2, [r3], #4
 800aedc:	e7d9      	b.n	800ae92 <__multiply+0x4e>
 800aede:	f8b1 a000 	ldrh.w	sl, [r1]
 800aee2:	f1ba 0f00 	cmp.w	sl, #0
 800aee6:	d01f      	beq.n	800af28 <__multiply+0xe4>
 800aee8:	46c4      	mov	ip, r8
 800aeea:	46a1      	mov	r9, r4
 800aeec:	2700      	movs	r7, #0
 800aeee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aef2:	f8d9 3000 	ldr.w	r3, [r9]
 800aef6:	fa1f fb82 	uxth.w	fp, r2
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	fb0a 330b 	mla	r3, sl, fp, r3
 800af00:	443b      	add	r3, r7
 800af02:	f8d9 7000 	ldr.w	r7, [r9]
 800af06:	0c12      	lsrs	r2, r2, #16
 800af08:	0c3f      	lsrs	r7, r7, #16
 800af0a:	fb0a 7202 	mla	r2, sl, r2, r7
 800af0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800af12:	b29b      	uxth	r3, r3
 800af14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af18:	4565      	cmp	r5, ip
 800af1a:	f849 3b04 	str.w	r3, [r9], #4
 800af1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800af22:	d8e4      	bhi.n	800aeee <__multiply+0xaa>
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	50e7      	str	r7, [r4, r3]
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af2e:	3104      	adds	r1, #4
 800af30:	f1b9 0f00 	cmp.w	r9, #0
 800af34:	d020      	beq.n	800af78 <__multiply+0x134>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	4647      	mov	r7, r8
 800af3a:	46a4      	mov	ip, r4
 800af3c:	f04f 0a00 	mov.w	sl, #0
 800af40:	f8b7 b000 	ldrh.w	fp, [r7]
 800af44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800af48:	fb09 220b 	mla	r2, r9, fp, r2
 800af4c:	4452      	add	r2, sl
 800af4e:	b29b      	uxth	r3, r3
 800af50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af54:	f84c 3b04 	str.w	r3, [ip], #4
 800af58:	f857 3b04 	ldr.w	r3, [r7], #4
 800af5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af60:	f8bc 3000 	ldrh.w	r3, [ip]
 800af64:	fb09 330a 	mla	r3, r9, sl, r3
 800af68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800af6c:	42bd      	cmp	r5, r7
 800af6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af72:	d8e5      	bhi.n	800af40 <__multiply+0xfc>
 800af74:	9a01      	ldr	r2, [sp, #4]
 800af76:	50a3      	str	r3, [r4, r2]
 800af78:	3404      	adds	r4, #4
 800af7a:	e79f      	b.n	800aebc <__multiply+0x78>
 800af7c:	3e01      	subs	r6, #1
 800af7e:	e7a1      	b.n	800aec4 <__multiply+0x80>
 800af80:	0800da64 	.word	0x0800da64
 800af84:	0800da75 	.word	0x0800da75

0800af88 <__pow5mult>:
 800af88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	4615      	mov	r5, r2
 800af8e:	f012 0203 	ands.w	r2, r2, #3
 800af92:	4607      	mov	r7, r0
 800af94:	460e      	mov	r6, r1
 800af96:	d007      	beq.n	800afa8 <__pow5mult+0x20>
 800af98:	4c25      	ldr	r4, [pc, #148]	@ (800b030 <__pow5mult+0xa8>)
 800af9a:	3a01      	subs	r2, #1
 800af9c:	2300      	movs	r3, #0
 800af9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afa2:	f7ff fea7 	bl	800acf4 <__multadd>
 800afa6:	4606      	mov	r6, r0
 800afa8:	10ad      	asrs	r5, r5, #2
 800afaa:	d03d      	beq.n	800b028 <__pow5mult+0xa0>
 800afac:	69fc      	ldr	r4, [r7, #28]
 800afae:	b97c      	cbnz	r4, 800afd0 <__pow5mult+0x48>
 800afb0:	2010      	movs	r0, #16
 800afb2:	f7ff fd87 	bl	800aac4 <malloc>
 800afb6:	4602      	mov	r2, r0
 800afb8:	61f8      	str	r0, [r7, #28]
 800afba:	b928      	cbnz	r0, 800afc8 <__pow5mult+0x40>
 800afbc:	4b1d      	ldr	r3, [pc, #116]	@ (800b034 <__pow5mult+0xac>)
 800afbe:	481e      	ldr	r0, [pc, #120]	@ (800b038 <__pow5mult+0xb0>)
 800afc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afc4:	f000 fc4e 	bl	800b864 <__assert_func>
 800afc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afcc:	6004      	str	r4, [r0, #0]
 800afce:	60c4      	str	r4, [r0, #12]
 800afd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afd8:	b94c      	cbnz	r4, 800afee <__pow5mult+0x66>
 800afda:	f240 2171 	movw	r1, #625	@ 0x271
 800afde:	4638      	mov	r0, r7
 800afe0:	f7ff ff1a 	bl	800ae18 <__i2b>
 800afe4:	2300      	movs	r3, #0
 800afe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800afea:	4604      	mov	r4, r0
 800afec:	6003      	str	r3, [r0, #0]
 800afee:	f04f 0900 	mov.w	r9, #0
 800aff2:	07eb      	lsls	r3, r5, #31
 800aff4:	d50a      	bpl.n	800b00c <__pow5mult+0x84>
 800aff6:	4631      	mov	r1, r6
 800aff8:	4622      	mov	r2, r4
 800affa:	4638      	mov	r0, r7
 800affc:	f7ff ff22 	bl	800ae44 <__multiply>
 800b000:	4631      	mov	r1, r6
 800b002:	4680      	mov	r8, r0
 800b004:	4638      	mov	r0, r7
 800b006:	f7ff fe53 	bl	800acb0 <_Bfree>
 800b00a:	4646      	mov	r6, r8
 800b00c:	106d      	asrs	r5, r5, #1
 800b00e:	d00b      	beq.n	800b028 <__pow5mult+0xa0>
 800b010:	6820      	ldr	r0, [r4, #0]
 800b012:	b938      	cbnz	r0, 800b024 <__pow5mult+0x9c>
 800b014:	4622      	mov	r2, r4
 800b016:	4621      	mov	r1, r4
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff ff13 	bl	800ae44 <__multiply>
 800b01e:	6020      	str	r0, [r4, #0]
 800b020:	f8c0 9000 	str.w	r9, [r0]
 800b024:	4604      	mov	r4, r0
 800b026:	e7e4      	b.n	800aff2 <__pow5mult+0x6a>
 800b028:	4630      	mov	r0, r6
 800b02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b02e:	bf00      	nop
 800b030:	0800db28 	.word	0x0800db28
 800b034:	0800d9f5 	.word	0x0800d9f5
 800b038:	0800da75 	.word	0x0800da75

0800b03c <__lshift>:
 800b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	460c      	mov	r4, r1
 800b042:	6849      	ldr	r1, [r1, #4]
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b04a:	68a3      	ldr	r3, [r4, #8]
 800b04c:	4607      	mov	r7, r0
 800b04e:	4691      	mov	r9, r2
 800b050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b054:	f108 0601 	add.w	r6, r8, #1
 800b058:	42b3      	cmp	r3, r6
 800b05a:	db0b      	blt.n	800b074 <__lshift+0x38>
 800b05c:	4638      	mov	r0, r7
 800b05e:	f7ff fde7 	bl	800ac30 <_Balloc>
 800b062:	4605      	mov	r5, r0
 800b064:	b948      	cbnz	r0, 800b07a <__lshift+0x3e>
 800b066:	4602      	mov	r2, r0
 800b068:	4b28      	ldr	r3, [pc, #160]	@ (800b10c <__lshift+0xd0>)
 800b06a:	4829      	ldr	r0, [pc, #164]	@ (800b110 <__lshift+0xd4>)
 800b06c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b070:	f000 fbf8 	bl	800b864 <__assert_func>
 800b074:	3101      	adds	r1, #1
 800b076:	005b      	lsls	r3, r3, #1
 800b078:	e7ee      	b.n	800b058 <__lshift+0x1c>
 800b07a:	2300      	movs	r3, #0
 800b07c:	f100 0114 	add.w	r1, r0, #20
 800b080:	f100 0210 	add.w	r2, r0, #16
 800b084:	4618      	mov	r0, r3
 800b086:	4553      	cmp	r3, sl
 800b088:	db33      	blt.n	800b0f2 <__lshift+0xb6>
 800b08a:	6920      	ldr	r0, [r4, #16]
 800b08c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b090:	f104 0314 	add.w	r3, r4, #20
 800b094:	f019 091f 	ands.w	r9, r9, #31
 800b098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b09c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0a0:	d02b      	beq.n	800b0fa <__lshift+0xbe>
 800b0a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b0a6:	468a      	mov	sl, r1
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b0b0:	4310      	orrs	r0, r2
 800b0b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ba:	459c      	cmp	ip, r3
 800b0bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0c0:	d8f3      	bhi.n	800b0aa <__lshift+0x6e>
 800b0c2:	ebac 0304 	sub.w	r3, ip, r4
 800b0c6:	3b15      	subs	r3, #21
 800b0c8:	f023 0303 	bic.w	r3, r3, #3
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	f104 0015 	add.w	r0, r4, #21
 800b0d2:	4560      	cmp	r0, ip
 800b0d4:	bf88      	it	hi
 800b0d6:	2304      	movhi	r3, #4
 800b0d8:	50ca      	str	r2, [r1, r3]
 800b0da:	b10a      	cbz	r2, 800b0e0 <__lshift+0xa4>
 800b0dc:	f108 0602 	add.w	r6, r8, #2
 800b0e0:	3e01      	subs	r6, #1
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	612e      	str	r6, [r5, #16]
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	f7ff fde2 	bl	800acb0 <_Bfree>
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	e7c5      	b.n	800b086 <__lshift+0x4a>
 800b0fa:	3904      	subs	r1, #4
 800b0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b100:	f841 2f04 	str.w	r2, [r1, #4]!
 800b104:	459c      	cmp	ip, r3
 800b106:	d8f9      	bhi.n	800b0fc <__lshift+0xc0>
 800b108:	e7ea      	b.n	800b0e0 <__lshift+0xa4>
 800b10a:	bf00      	nop
 800b10c:	0800da64 	.word	0x0800da64
 800b110:	0800da75 	.word	0x0800da75

0800b114 <__mcmp>:
 800b114:	690a      	ldr	r2, [r1, #16]
 800b116:	4603      	mov	r3, r0
 800b118:	6900      	ldr	r0, [r0, #16]
 800b11a:	1a80      	subs	r0, r0, r2
 800b11c:	b530      	push	{r4, r5, lr}
 800b11e:	d10e      	bne.n	800b13e <__mcmp+0x2a>
 800b120:	3314      	adds	r3, #20
 800b122:	3114      	adds	r1, #20
 800b124:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b128:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b12c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b134:	4295      	cmp	r5, r2
 800b136:	d003      	beq.n	800b140 <__mcmp+0x2c>
 800b138:	d205      	bcs.n	800b146 <__mcmp+0x32>
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b13e:	bd30      	pop	{r4, r5, pc}
 800b140:	42a3      	cmp	r3, r4
 800b142:	d3f3      	bcc.n	800b12c <__mcmp+0x18>
 800b144:	e7fb      	b.n	800b13e <__mcmp+0x2a>
 800b146:	2001      	movs	r0, #1
 800b148:	e7f9      	b.n	800b13e <__mcmp+0x2a>
	...

0800b14c <__mdiff>:
 800b14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b150:	4689      	mov	r9, r1
 800b152:	4606      	mov	r6, r0
 800b154:	4611      	mov	r1, r2
 800b156:	4648      	mov	r0, r9
 800b158:	4614      	mov	r4, r2
 800b15a:	f7ff ffdb 	bl	800b114 <__mcmp>
 800b15e:	1e05      	subs	r5, r0, #0
 800b160:	d112      	bne.n	800b188 <__mdiff+0x3c>
 800b162:	4629      	mov	r1, r5
 800b164:	4630      	mov	r0, r6
 800b166:	f7ff fd63 	bl	800ac30 <_Balloc>
 800b16a:	4602      	mov	r2, r0
 800b16c:	b928      	cbnz	r0, 800b17a <__mdiff+0x2e>
 800b16e:	4b3f      	ldr	r3, [pc, #252]	@ (800b26c <__mdiff+0x120>)
 800b170:	f240 2137 	movw	r1, #567	@ 0x237
 800b174:	483e      	ldr	r0, [pc, #248]	@ (800b270 <__mdiff+0x124>)
 800b176:	f000 fb75 	bl	800b864 <__assert_func>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b180:	4610      	mov	r0, r2
 800b182:	b003      	add	sp, #12
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	bfbc      	itt	lt
 800b18a:	464b      	movlt	r3, r9
 800b18c:	46a1      	movlt	r9, r4
 800b18e:	4630      	mov	r0, r6
 800b190:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b194:	bfba      	itte	lt
 800b196:	461c      	movlt	r4, r3
 800b198:	2501      	movlt	r5, #1
 800b19a:	2500      	movge	r5, #0
 800b19c:	f7ff fd48 	bl	800ac30 <_Balloc>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	b918      	cbnz	r0, 800b1ac <__mdiff+0x60>
 800b1a4:	4b31      	ldr	r3, [pc, #196]	@ (800b26c <__mdiff+0x120>)
 800b1a6:	f240 2145 	movw	r1, #581	@ 0x245
 800b1aa:	e7e3      	b.n	800b174 <__mdiff+0x28>
 800b1ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1b0:	6926      	ldr	r6, [r4, #16]
 800b1b2:	60c5      	str	r5, [r0, #12]
 800b1b4:	f109 0310 	add.w	r3, r9, #16
 800b1b8:	f109 0514 	add.w	r5, r9, #20
 800b1bc:	f104 0e14 	add.w	lr, r4, #20
 800b1c0:	f100 0b14 	add.w	fp, r0, #20
 800b1c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	46d9      	mov	r9, fp
 800b1d0:	f04f 0c00 	mov.w	ip, #0
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	fa1f f38a 	uxth.w	r3, sl
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	b283      	uxth	r3, r0
 800b1e8:	1acb      	subs	r3, r1, r3
 800b1ea:	0c00      	lsrs	r0, r0, #16
 800b1ec:	4463      	add	r3, ip
 800b1ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1fc:	4576      	cmp	r6, lr
 800b1fe:	f849 3b04 	str.w	r3, [r9], #4
 800b202:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b206:	d8e5      	bhi.n	800b1d4 <__mdiff+0x88>
 800b208:	1b33      	subs	r3, r6, r4
 800b20a:	3b15      	subs	r3, #21
 800b20c:	f023 0303 	bic.w	r3, r3, #3
 800b210:	3415      	adds	r4, #21
 800b212:	3304      	adds	r3, #4
 800b214:	42a6      	cmp	r6, r4
 800b216:	bf38      	it	cc
 800b218:	2304      	movcc	r3, #4
 800b21a:	441d      	add	r5, r3
 800b21c:	445b      	add	r3, fp
 800b21e:	461e      	mov	r6, r3
 800b220:	462c      	mov	r4, r5
 800b222:	4544      	cmp	r4, r8
 800b224:	d30e      	bcc.n	800b244 <__mdiff+0xf8>
 800b226:	f108 0103 	add.w	r1, r8, #3
 800b22a:	1b49      	subs	r1, r1, r5
 800b22c:	f021 0103 	bic.w	r1, r1, #3
 800b230:	3d03      	subs	r5, #3
 800b232:	45a8      	cmp	r8, r5
 800b234:	bf38      	it	cc
 800b236:	2100      	movcc	r1, #0
 800b238:	440b      	add	r3, r1
 800b23a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b23e:	b191      	cbz	r1, 800b266 <__mdiff+0x11a>
 800b240:	6117      	str	r7, [r2, #16]
 800b242:	e79d      	b.n	800b180 <__mdiff+0x34>
 800b244:	f854 1b04 	ldr.w	r1, [r4], #4
 800b248:	46e6      	mov	lr, ip
 800b24a:	0c08      	lsrs	r0, r1, #16
 800b24c:	fa1c fc81 	uxtah	ip, ip, r1
 800b250:	4471      	add	r1, lr
 800b252:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b256:	b289      	uxth	r1, r1
 800b258:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b25c:	f846 1b04 	str.w	r1, [r6], #4
 800b260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b264:	e7dd      	b.n	800b222 <__mdiff+0xd6>
 800b266:	3f01      	subs	r7, #1
 800b268:	e7e7      	b.n	800b23a <__mdiff+0xee>
 800b26a:	bf00      	nop
 800b26c:	0800da64 	.word	0x0800da64
 800b270:	0800da75 	.word	0x0800da75

0800b274 <__d2b>:
 800b274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b278:	460f      	mov	r7, r1
 800b27a:	2101      	movs	r1, #1
 800b27c:	ec59 8b10 	vmov	r8, r9, d0
 800b280:	4616      	mov	r6, r2
 800b282:	f7ff fcd5 	bl	800ac30 <_Balloc>
 800b286:	4604      	mov	r4, r0
 800b288:	b930      	cbnz	r0, 800b298 <__d2b+0x24>
 800b28a:	4602      	mov	r2, r0
 800b28c:	4b23      	ldr	r3, [pc, #140]	@ (800b31c <__d2b+0xa8>)
 800b28e:	4824      	ldr	r0, [pc, #144]	@ (800b320 <__d2b+0xac>)
 800b290:	f240 310f 	movw	r1, #783	@ 0x30f
 800b294:	f000 fae6 	bl	800b864 <__assert_func>
 800b298:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b29c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2a0:	b10d      	cbz	r5, 800b2a6 <__d2b+0x32>
 800b2a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	f1b8 0300 	subs.w	r3, r8, #0
 800b2ac:	d023      	beq.n	800b2f6 <__d2b+0x82>
 800b2ae:	4668      	mov	r0, sp
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	f7ff fd84 	bl	800adbe <__lo0bits>
 800b2b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2ba:	b1d0      	cbz	r0, 800b2f2 <__d2b+0x7e>
 800b2bc:	f1c0 0320 	rsb	r3, r0, #32
 800b2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	40c2      	lsrs	r2, r0
 800b2c8:	6163      	str	r3, [r4, #20]
 800b2ca:	9201      	str	r2, [sp, #4]
 800b2cc:	9b01      	ldr	r3, [sp, #4]
 800b2ce:	61a3      	str	r3, [r4, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	bf0c      	ite	eq
 800b2d4:	2201      	moveq	r2, #1
 800b2d6:	2202      	movne	r2, #2
 800b2d8:	6122      	str	r2, [r4, #16]
 800b2da:	b1a5      	cbz	r5, 800b306 <__d2b+0x92>
 800b2dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2e0:	4405      	add	r5, r0
 800b2e2:	603d      	str	r5, [r7, #0]
 800b2e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2e8:	6030      	str	r0, [r6, #0]
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	b003      	add	sp, #12
 800b2ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f2:	6161      	str	r1, [r4, #20]
 800b2f4:	e7ea      	b.n	800b2cc <__d2b+0x58>
 800b2f6:	a801      	add	r0, sp, #4
 800b2f8:	f7ff fd61 	bl	800adbe <__lo0bits>
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	6163      	str	r3, [r4, #20]
 800b300:	3020      	adds	r0, #32
 800b302:	2201      	movs	r2, #1
 800b304:	e7e8      	b.n	800b2d8 <__d2b+0x64>
 800b306:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b30a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b30e:	6038      	str	r0, [r7, #0]
 800b310:	6918      	ldr	r0, [r3, #16]
 800b312:	f7ff fd35 	bl	800ad80 <__hi0bits>
 800b316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b31a:	e7e5      	b.n	800b2e8 <__d2b+0x74>
 800b31c:	0800da64 	.word	0x0800da64
 800b320:	0800da75 	.word	0x0800da75

0800b324 <__sfputc_r>:
 800b324:	6893      	ldr	r3, [r2, #8]
 800b326:	3b01      	subs	r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	b410      	push	{r4}
 800b32c:	6093      	str	r3, [r2, #8]
 800b32e:	da08      	bge.n	800b342 <__sfputc_r+0x1e>
 800b330:	6994      	ldr	r4, [r2, #24]
 800b332:	42a3      	cmp	r3, r4
 800b334:	db01      	blt.n	800b33a <__sfputc_r+0x16>
 800b336:	290a      	cmp	r1, #10
 800b338:	d103      	bne.n	800b342 <__sfputc_r+0x1e>
 800b33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b33e:	f000 b9df 	b.w	800b700 <__swbuf_r>
 800b342:	6813      	ldr	r3, [r2, #0]
 800b344:	1c58      	adds	r0, r3, #1
 800b346:	6010      	str	r0, [r2, #0]
 800b348:	7019      	strb	r1, [r3, #0]
 800b34a:	4608      	mov	r0, r1
 800b34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <__sfputs_r>:
 800b352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b354:	4606      	mov	r6, r0
 800b356:	460f      	mov	r7, r1
 800b358:	4614      	mov	r4, r2
 800b35a:	18d5      	adds	r5, r2, r3
 800b35c:	42ac      	cmp	r4, r5
 800b35e:	d101      	bne.n	800b364 <__sfputs_r+0x12>
 800b360:	2000      	movs	r0, #0
 800b362:	e007      	b.n	800b374 <__sfputs_r+0x22>
 800b364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b368:	463a      	mov	r2, r7
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ffda 	bl	800b324 <__sfputc_r>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d1f3      	bne.n	800b35c <__sfputs_r+0xa>
 800b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b378 <_vfiprintf_r>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	460d      	mov	r5, r1
 800b37e:	b09d      	sub	sp, #116	@ 0x74
 800b380:	4614      	mov	r4, r2
 800b382:	4698      	mov	r8, r3
 800b384:	4606      	mov	r6, r0
 800b386:	b118      	cbz	r0, 800b390 <_vfiprintf_r+0x18>
 800b388:	6a03      	ldr	r3, [r0, #32]
 800b38a:	b90b      	cbnz	r3, 800b390 <_vfiprintf_r+0x18>
 800b38c:	f7fe fbec 	bl	8009b68 <__sinit>
 800b390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b392:	07d9      	lsls	r1, r3, #31
 800b394:	d405      	bmi.n	800b3a2 <_vfiprintf_r+0x2a>
 800b396:	89ab      	ldrh	r3, [r5, #12]
 800b398:	059a      	lsls	r2, r3, #22
 800b39a:	d402      	bmi.n	800b3a2 <_vfiprintf_r+0x2a>
 800b39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b39e:	f7fe fcec 	bl	8009d7a <__retarget_lock_acquire_recursive>
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	071b      	lsls	r3, r3, #28
 800b3a6:	d501      	bpl.n	800b3ac <_vfiprintf_r+0x34>
 800b3a8:	692b      	ldr	r3, [r5, #16]
 800b3aa:	b99b      	cbnz	r3, 800b3d4 <_vfiprintf_r+0x5c>
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f000 f9e4 	bl	800b77c <__swsetup_r>
 800b3b4:	b170      	cbz	r0, 800b3d4 <_vfiprintf_r+0x5c>
 800b3b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3b8:	07dc      	lsls	r4, r3, #31
 800b3ba:	d504      	bpl.n	800b3c6 <_vfiprintf_r+0x4e>
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3c0:	b01d      	add	sp, #116	@ 0x74
 800b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c6:	89ab      	ldrh	r3, [r5, #12]
 800b3c8:	0598      	lsls	r0, r3, #22
 800b3ca:	d4f7      	bmi.n	800b3bc <_vfiprintf_r+0x44>
 800b3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ce:	f7fe fcd5 	bl	8009d7c <__retarget_lock_release_recursive>
 800b3d2:	e7f3      	b.n	800b3bc <_vfiprintf_r+0x44>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d8:	2320      	movs	r3, #32
 800b3da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3e2:	2330      	movs	r3, #48	@ 0x30
 800b3e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b594 <_vfiprintf_r+0x21c>
 800b3e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3ec:	f04f 0901 	mov.w	r9, #1
 800b3f0:	4623      	mov	r3, r4
 800b3f2:	469a      	mov	sl, r3
 800b3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f8:	b10a      	cbz	r2, 800b3fe <_vfiprintf_r+0x86>
 800b3fa:	2a25      	cmp	r2, #37	@ 0x25
 800b3fc:	d1f9      	bne.n	800b3f2 <_vfiprintf_r+0x7a>
 800b3fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b402:	d00b      	beq.n	800b41c <_vfiprintf_r+0xa4>
 800b404:	465b      	mov	r3, fp
 800b406:	4622      	mov	r2, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ffa1 	bl	800b352 <__sfputs_r>
 800b410:	3001      	adds	r0, #1
 800b412:	f000 80a7 	beq.w	800b564 <_vfiprintf_r+0x1ec>
 800b416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b418:	445a      	add	r2, fp
 800b41a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b41c:	f89a 3000 	ldrb.w	r3, [sl]
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 809f 	beq.w	800b564 <_vfiprintf_r+0x1ec>
 800b426:	2300      	movs	r3, #0
 800b428:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b42c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b430:	f10a 0a01 	add.w	sl, sl, #1
 800b434:	9304      	str	r3, [sp, #16]
 800b436:	9307      	str	r3, [sp, #28]
 800b438:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b43c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b43e:	4654      	mov	r4, sl
 800b440:	2205      	movs	r2, #5
 800b442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b446:	4853      	ldr	r0, [pc, #332]	@ (800b594 <_vfiprintf_r+0x21c>)
 800b448:	f7f4 fed2 	bl	80001f0 <memchr>
 800b44c:	9a04      	ldr	r2, [sp, #16]
 800b44e:	b9d8      	cbnz	r0, 800b488 <_vfiprintf_r+0x110>
 800b450:	06d1      	lsls	r1, r2, #27
 800b452:	bf44      	itt	mi
 800b454:	2320      	movmi	r3, #32
 800b456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b45a:	0713      	lsls	r3, r2, #28
 800b45c:	bf44      	itt	mi
 800b45e:	232b      	movmi	r3, #43	@ 0x2b
 800b460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b464:	f89a 3000 	ldrb.w	r3, [sl]
 800b468:	2b2a      	cmp	r3, #42	@ 0x2a
 800b46a:	d015      	beq.n	800b498 <_vfiprintf_r+0x120>
 800b46c:	9a07      	ldr	r2, [sp, #28]
 800b46e:	4654      	mov	r4, sl
 800b470:	2000      	movs	r0, #0
 800b472:	f04f 0c0a 	mov.w	ip, #10
 800b476:	4621      	mov	r1, r4
 800b478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b47c:	3b30      	subs	r3, #48	@ 0x30
 800b47e:	2b09      	cmp	r3, #9
 800b480:	d94b      	bls.n	800b51a <_vfiprintf_r+0x1a2>
 800b482:	b1b0      	cbz	r0, 800b4b2 <_vfiprintf_r+0x13a>
 800b484:	9207      	str	r2, [sp, #28]
 800b486:	e014      	b.n	800b4b2 <_vfiprintf_r+0x13a>
 800b488:	eba0 0308 	sub.w	r3, r0, r8
 800b48c:	fa09 f303 	lsl.w	r3, r9, r3
 800b490:	4313      	orrs	r3, r2
 800b492:	9304      	str	r3, [sp, #16]
 800b494:	46a2      	mov	sl, r4
 800b496:	e7d2      	b.n	800b43e <_vfiprintf_r+0xc6>
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	1d19      	adds	r1, r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	9103      	str	r1, [sp, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bfbb      	ittet	lt
 800b4a4:	425b      	neglt	r3, r3
 800b4a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4aa:	9307      	strge	r3, [sp, #28]
 800b4ac:	9307      	strlt	r3, [sp, #28]
 800b4ae:	bfb8      	it	lt
 800b4b0:	9204      	strlt	r2, [sp, #16]
 800b4b2:	7823      	ldrb	r3, [r4, #0]
 800b4b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4b6:	d10a      	bne.n	800b4ce <_vfiprintf_r+0x156>
 800b4b8:	7863      	ldrb	r3, [r4, #1]
 800b4ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4bc:	d132      	bne.n	800b524 <_vfiprintf_r+0x1ac>
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	1d1a      	adds	r2, r3, #4
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	9203      	str	r2, [sp, #12]
 800b4c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4ca:	3402      	adds	r4, #2
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5a4 <_vfiprintf_r+0x22c>
 800b4d2:	7821      	ldrb	r1, [r4, #0]
 800b4d4:	2203      	movs	r2, #3
 800b4d6:	4650      	mov	r0, sl
 800b4d8:	f7f4 fe8a 	bl	80001f0 <memchr>
 800b4dc:	b138      	cbz	r0, 800b4ee <_vfiprintf_r+0x176>
 800b4de:	9b04      	ldr	r3, [sp, #16]
 800b4e0:	eba0 000a 	sub.w	r0, r0, sl
 800b4e4:	2240      	movs	r2, #64	@ 0x40
 800b4e6:	4082      	lsls	r2, r0
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	3401      	adds	r4, #1
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f2:	4829      	ldr	r0, [pc, #164]	@ (800b598 <_vfiprintf_r+0x220>)
 800b4f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4f8:	2206      	movs	r2, #6
 800b4fa:	f7f4 fe79 	bl	80001f0 <memchr>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d03f      	beq.n	800b582 <_vfiprintf_r+0x20a>
 800b502:	4b26      	ldr	r3, [pc, #152]	@ (800b59c <_vfiprintf_r+0x224>)
 800b504:	bb1b      	cbnz	r3, 800b54e <_vfiprintf_r+0x1d6>
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	3307      	adds	r3, #7
 800b50a:	f023 0307 	bic.w	r3, r3, #7
 800b50e:	3308      	adds	r3, #8
 800b510:	9303      	str	r3, [sp, #12]
 800b512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b514:	443b      	add	r3, r7
 800b516:	9309      	str	r3, [sp, #36]	@ 0x24
 800b518:	e76a      	b.n	800b3f0 <_vfiprintf_r+0x78>
 800b51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51e:	460c      	mov	r4, r1
 800b520:	2001      	movs	r0, #1
 800b522:	e7a8      	b.n	800b476 <_vfiprintf_r+0xfe>
 800b524:	2300      	movs	r3, #0
 800b526:	3401      	adds	r4, #1
 800b528:	9305      	str	r3, [sp, #20]
 800b52a:	4619      	mov	r1, r3
 800b52c:	f04f 0c0a 	mov.w	ip, #10
 800b530:	4620      	mov	r0, r4
 800b532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b536:	3a30      	subs	r2, #48	@ 0x30
 800b538:	2a09      	cmp	r2, #9
 800b53a:	d903      	bls.n	800b544 <_vfiprintf_r+0x1cc>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0c6      	beq.n	800b4ce <_vfiprintf_r+0x156>
 800b540:	9105      	str	r1, [sp, #20]
 800b542:	e7c4      	b.n	800b4ce <_vfiprintf_r+0x156>
 800b544:	fb0c 2101 	mla	r1, ip, r1, r2
 800b548:	4604      	mov	r4, r0
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7f0      	b.n	800b530 <_vfiprintf_r+0x1b8>
 800b54e:	ab03      	add	r3, sp, #12
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	462a      	mov	r2, r5
 800b554:	4b12      	ldr	r3, [pc, #72]	@ (800b5a0 <_vfiprintf_r+0x228>)
 800b556:	a904      	add	r1, sp, #16
 800b558:	4630      	mov	r0, r6
 800b55a:	f7fd fec3 	bl	80092e4 <_printf_float>
 800b55e:	4607      	mov	r7, r0
 800b560:	1c78      	adds	r0, r7, #1
 800b562:	d1d6      	bne.n	800b512 <_vfiprintf_r+0x19a>
 800b564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b566:	07d9      	lsls	r1, r3, #31
 800b568:	d405      	bmi.n	800b576 <_vfiprintf_r+0x1fe>
 800b56a:	89ab      	ldrh	r3, [r5, #12]
 800b56c:	059a      	lsls	r2, r3, #22
 800b56e:	d402      	bmi.n	800b576 <_vfiprintf_r+0x1fe>
 800b570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b572:	f7fe fc03 	bl	8009d7c <__retarget_lock_release_recursive>
 800b576:	89ab      	ldrh	r3, [r5, #12]
 800b578:	065b      	lsls	r3, r3, #25
 800b57a:	f53f af1f 	bmi.w	800b3bc <_vfiprintf_r+0x44>
 800b57e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b580:	e71e      	b.n	800b3c0 <_vfiprintf_r+0x48>
 800b582:	ab03      	add	r3, sp, #12
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	462a      	mov	r2, r5
 800b588:	4b05      	ldr	r3, [pc, #20]	@ (800b5a0 <_vfiprintf_r+0x228>)
 800b58a:	a904      	add	r1, sp, #16
 800b58c:	4630      	mov	r0, r6
 800b58e:	f7fe f941 	bl	8009814 <_printf_i>
 800b592:	e7e4      	b.n	800b55e <_vfiprintf_r+0x1e6>
 800b594:	0800dace 	.word	0x0800dace
 800b598:	0800dad8 	.word	0x0800dad8
 800b59c:	080092e5 	.word	0x080092e5
 800b5a0:	0800b353 	.word	0x0800b353
 800b5a4:	0800dad4 	.word	0x0800dad4

0800b5a8 <__sflush_r>:
 800b5a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b0:	0716      	lsls	r6, r2, #28
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	d454      	bmi.n	800b662 <__sflush_r+0xba>
 800b5b8:	684b      	ldr	r3, [r1, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dc02      	bgt.n	800b5c4 <__sflush_r+0x1c>
 800b5be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dd48      	ble.n	800b656 <__sflush_r+0xae>
 800b5c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5c6:	2e00      	cmp	r6, #0
 800b5c8:	d045      	beq.n	800b656 <__sflush_r+0xae>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5d0:	682f      	ldr	r7, [r5, #0]
 800b5d2:	6a21      	ldr	r1, [r4, #32]
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	d030      	beq.n	800b63a <__sflush_r+0x92>
 800b5d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	0759      	lsls	r1, r3, #29
 800b5de:	d505      	bpl.n	800b5ec <__sflush_r+0x44>
 800b5e0:	6863      	ldr	r3, [r4, #4]
 800b5e2:	1ad2      	subs	r2, r2, r3
 800b5e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5e6:	b10b      	cbz	r3, 800b5ec <__sflush_r+0x44>
 800b5e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5ea:	1ad2      	subs	r2, r2, r3
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5f0:	6a21      	ldr	r1, [r4, #32]
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b0      	blx	r6
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	d106      	bne.n	800b60a <__sflush_r+0x62>
 800b5fc:	6829      	ldr	r1, [r5, #0]
 800b5fe:	291d      	cmp	r1, #29
 800b600:	d82b      	bhi.n	800b65a <__sflush_r+0xb2>
 800b602:	4a2a      	ldr	r2, [pc, #168]	@ (800b6ac <__sflush_r+0x104>)
 800b604:	40ca      	lsrs	r2, r1
 800b606:	07d6      	lsls	r6, r2, #31
 800b608:	d527      	bpl.n	800b65a <__sflush_r+0xb2>
 800b60a:	2200      	movs	r2, #0
 800b60c:	6062      	str	r2, [r4, #4]
 800b60e:	04d9      	lsls	r1, r3, #19
 800b610:	6922      	ldr	r2, [r4, #16]
 800b612:	6022      	str	r2, [r4, #0]
 800b614:	d504      	bpl.n	800b620 <__sflush_r+0x78>
 800b616:	1c42      	adds	r2, r0, #1
 800b618:	d101      	bne.n	800b61e <__sflush_r+0x76>
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	b903      	cbnz	r3, 800b620 <__sflush_r+0x78>
 800b61e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b622:	602f      	str	r7, [r5, #0]
 800b624:	b1b9      	cbz	r1, 800b656 <__sflush_r+0xae>
 800b626:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d002      	beq.n	800b634 <__sflush_r+0x8c>
 800b62e:	4628      	mov	r0, r5
 800b630:	f7ff f9fe 	bl	800aa30 <_free_r>
 800b634:	2300      	movs	r3, #0
 800b636:	6363      	str	r3, [r4, #52]	@ 0x34
 800b638:	e00d      	b.n	800b656 <__sflush_r+0xae>
 800b63a:	2301      	movs	r3, #1
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b0      	blx	r6
 800b640:	4602      	mov	r2, r0
 800b642:	1c50      	adds	r0, r2, #1
 800b644:	d1c9      	bne.n	800b5da <__sflush_r+0x32>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0c6      	beq.n	800b5da <__sflush_r+0x32>
 800b64c:	2b1d      	cmp	r3, #29
 800b64e:	d001      	beq.n	800b654 <__sflush_r+0xac>
 800b650:	2b16      	cmp	r3, #22
 800b652:	d11e      	bne.n	800b692 <__sflush_r+0xea>
 800b654:	602f      	str	r7, [r5, #0]
 800b656:	2000      	movs	r0, #0
 800b658:	e022      	b.n	800b6a0 <__sflush_r+0xf8>
 800b65a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b65e:	b21b      	sxth	r3, r3
 800b660:	e01b      	b.n	800b69a <__sflush_r+0xf2>
 800b662:	690f      	ldr	r7, [r1, #16]
 800b664:	2f00      	cmp	r7, #0
 800b666:	d0f6      	beq.n	800b656 <__sflush_r+0xae>
 800b668:	0793      	lsls	r3, r2, #30
 800b66a:	680e      	ldr	r6, [r1, #0]
 800b66c:	bf08      	it	eq
 800b66e:	694b      	ldreq	r3, [r1, #20]
 800b670:	600f      	str	r7, [r1, #0]
 800b672:	bf18      	it	ne
 800b674:	2300      	movne	r3, #0
 800b676:	eba6 0807 	sub.w	r8, r6, r7
 800b67a:	608b      	str	r3, [r1, #8]
 800b67c:	f1b8 0f00 	cmp.w	r8, #0
 800b680:	dde9      	ble.n	800b656 <__sflush_r+0xae>
 800b682:	6a21      	ldr	r1, [r4, #32]
 800b684:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b686:	4643      	mov	r3, r8
 800b688:	463a      	mov	r2, r7
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b0      	blx	r6
 800b68e:	2800      	cmp	r0, #0
 800b690:	dc08      	bgt.n	800b6a4 <__sflush_r+0xfc>
 800b692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	4407      	add	r7, r0
 800b6a6:	eba8 0800 	sub.w	r8, r8, r0
 800b6aa:	e7e7      	b.n	800b67c <__sflush_r+0xd4>
 800b6ac:	20400001 	.word	0x20400001

0800b6b0 <_fflush_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	690b      	ldr	r3, [r1, #16]
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	b913      	cbnz	r3, 800b6c0 <_fflush_r+0x10>
 800b6ba:	2500      	movs	r5, #0
 800b6bc:	4628      	mov	r0, r5
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	b118      	cbz	r0, 800b6ca <_fflush_r+0x1a>
 800b6c2:	6a03      	ldr	r3, [r0, #32]
 800b6c4:	b90b      	cbnz	r3, 800b6ca <_fflush_r+0x1a>
 800b6c6:	f7fe fa4f 	bl	8009b68 <__sinit>
 800b6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0f3      	beq.n	800b6ba <_fflush_r+0xa>
 800b6d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6d4:	07d0      	lsls	r0, r2, #31
 800b6d6:	d404      	bmi.n	800b6e2 <_fflush_r+0x32>
 800b6d8:	0599      	lsls	r1, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_fflush_r+0x32>
 800b6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6de:	f7fe fb4c 	bl	8009d7a <__retarget_lock_acquire_recursive>
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	f7ff ff5f 	bl	800b5a8 <__sflush_r>
 800b6ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6ec:	07da      	lsls	r2, r3, #31
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	d4e4      	bmi.n	800b6bc <_fflush_r+0xc>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	059b      	lsls	r3, r3, #22
 800b6f6:	d4e1      	bmi.n	800b6bc <_fflush_r+0xc>
 800b6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fa:	f7fe fb3f 	bl	8009d7c <__retarget_lock_release_recursive>
 800b6fe:	e7dd      	b.n	800b6bc <_fflush_r+0xc>

0800b700 <__swbuf_r>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	460e      	mov	r6, r1
 800b704:	4614      	mov	r4, r2
 800b706:	4605      	mov	r5, r0
 800b708:	b118      	cbz	r0, 800b712 <__swbuf_r+0x12>
 800b70a:	6a03      	ldr	r3, [r0, #32]
 800b70c:	b90b      	cbnz	r3, 800b712 <__swbuf_r+0x12>
 800b70e:	f7fe fa2b 	bl	8009b68 <__sinit>
 800b712:	69a3      	ldr	r3, [r4, #24]
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	071a      	lsls	r2, r3, #28
 800b71a:	d501      	bpl.n	800b720 <__swbuf_r+0x20>
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	b943      	cbnz	r3, 800b732 <__swbuf_r+0x32>
 800b720:	4621      	mov	r1, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f82a 	bl	800b77c <__swsetup_r>
 800b728:	b118      	cbz	r0, 800b732 <__swbuf_r+0x32>
 800b72a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b72e:	4638      	mov	r0, r7
 800b730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	6922      	ldr	r2, [r4, #16]
 800b736:	1a98      	subs	r0, r3, r2
 800b738:	6963      	ldr	r3, [r4, #20]
 800b73a:	b2f6      	uxtb	r6, r6
 800b73c:	4283      	cmp	r3, r0
 800b73e:	4637      	mov	r7, r6
 800b740:	dc05      	bgt.n	800b74e <__swbuf_r+0x4e>
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff ffb3 	bl	800b6b0 <_fflush_r>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d1ed      	bne.n	800b72a <__swbuf_r+0x2a>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	3b01      	subs	r3, #1
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	6022      	str	r2, [r4, #0]
 800b75a:	701e      	strb	r6, [r3, #0]
 800b75c:	6962      	ldr	r2, [r4, #20]
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	429a      	cmp	r2, r3
 800b762:	d004      	beq.n	800b76e <__swbuf_r+0x6e>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d5e1      	bpl.n	800b72e <__swbuf_r+0x2e>
 800b76a:	2e0a      	cmp	r6, #10
 800b76c:	d1df      	bne.n	800b72e <__swbuf_r+0x2e>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f7ff ff9d 	bl	800b6b0 <_fflush_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	d0d9      	beq.n	800b72e <__swbuf_r+0x2e>
 800b77a:	e7d6      	b.n	800b72a <__swbuf_r+0x2a>

0800b77c <__swsetup_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4b29      	ldr	r3, [pc, #164]	@ (800b824 <__swsetup_r+0xa8>)
 800b780:	4605      	mov	r5, r0
 800b782:	6818      	ldr	r0, [r3, #0]
 800b784:	460c      	mov	r4, r1
 800b786:	b118      	cbz	r0, 800b790 <__swsetup_r+0x14>
 800b788:	6a03      	ldr	r3, [r0, #32]
 800b78a:	b90b      	cbnz	r3, 800b790 <__swsetup_r+0x14>
 800b78c:	f7fe f9ec 	bl	8009b68 <__sinit>
 800b790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b794:	0719      	lsls	r1, r3, #28
 800b796:	d422      	bmi.n	800b7de <__swsetup_r+0x62>
 800b798:	06da      	lsls	r2, r3, #27
 800b79a:	d407      	bmi.n	800b7ac <__swsetup_r+0x30>
 800b79c:	2209      	movs	r2, #9
 800b79e:	602a      	str	r2, [r5, #0]
 800b7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a4:	81a3      	strh	r3, [r4, #12]
 800b7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7aa:	e033      	b.n	800b814 <__swsetup_r+0x98>
 800b7ac:	0758      	lsls	r0, r3, #29
 800b7ae:	d512      	bpl.n	800b7d6 <__swsetup_r+0x5a>
 800b7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7b2:	b141      	cbz	r1, 800b7c6 <__swsetup_r+0x4a>
 800b7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7b8:	4299      	cmp	r1, r3
 800b7ba:	d002      	beq.n	800b7c2 <__swsetup_r+0x46>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f7ff f937 	bl	800aa30 <_free_r>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	6063      	str	r3, [r4, #4]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f043 0308 	orr.w	r3, r3, #8
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	b94b      	cbnz	r3, 800b7f6 <__swsetup_r+0x7a>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7ec:	d003      	beq.n	800b7f6 <__swsetup_r+0x7a>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 f8c1 	bl	800b978 <__smakebuf_r>
 800b7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fa:	f013 0201 	ands.w	r2, r3, #1
 800b7fe:	d00a      	beq.n	800b816 <__swsetup_r+0x9a>
 800b800:	2200      	movs	r2, #0
 800b802:	60a2      	str	r2, [r4, #8]
 800b804:	6962      	ldr	r2, [r4, #20]
 800b806:	4252      	negs	r2, r2
 800b808:	61a2      	str	r2, [r4, #24]
 800b80a:	6922      	ldr	r2, [r4, #16]
 800b80c:	b942      	cbnz	r2, 800b820 <__swsetup_r+0xa4>
 800b80e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b812:	d1c5      	bne.n	800b7a0 <__swsetup_r+0x24>
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	0799      	lsls	r1, r3, #30
 800b818:	bf58      	it	pl
 800b81a:	6962      	ldrpl	r2, [r4, #20]
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	e7f4      	b.n	800b80a <__swsetup_r+0x8e>
 800b820:	2000      	movs	r0, #0
 800b822:	e7f7      	b.n	800b814 <__swsetup_r+0x98>
 800b824:	20000440 	.word	0x20000440

0800b828 <_sbrk_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	@ (800b844 <_sbrk_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f7 f836 	bl	80028a4 <_sbrk>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_sbrk_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_sbrk_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	20000c18 	.word	0x20000c18

0800b848 <memcpy>:
 800b848:	440a      	add	r2, r1
 800b84a:	4291      	cmp	r1, r2
 800b84c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b850:	d100      	bne.n	800b854 <memcpy+0xc>
 800b852:	4770      	bx	lr
 800b854:	b510      	push	{r4, lr}
 800b856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b85e:	4291      	cmp	r1, r2
 800b860:	d1f9      	bne.n	800b856 <memcpy+0xe>
 800b862:	bd10      	pop	{r4, pc}

0800b864 <__assert_func>:
 800b864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b866:	4614      	mov	r4, r2
 800b868:	461a      	mov	r2, r3
 800b86a:	4b09      	ldr	r3, [pc, #36]	@ (800b890 <__assert_func+0x2c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4605      	mov	r5, r0
 800b870:	68d8      	ldr	r0, [r3, #12]
 800b872:	b14c      	cbz	r4, 800b888 <__assert_func+0x24>
 800b874:	4b07      	ldr	r3, [pc, #28]	@ (800b894 <__assert_func+0x30>)
 800b876:	9100      	str	r1, [sp, #0]
 800b878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b87c:	4906      	ldr	r1, [pc, #24]	@ (800b898 <__assert_func+0x34>)
 800b87e:	462b      	mov	r3, r5
 800b880:	f000 f842 	bl	800b908 <fiprintf>
 800b884:	f000 f8d6 	bl	800ba34 <abort>
 800b888:	4b04      	ldr	r3, [pc, #16]	@ (800b89c <__assert_func+0x38>)
 800b88a:	461c      	mov	r4, r3
 800b88c:	e7f3      	b.n	800b876 <__assert_func+0x12>
 800b88e:	bf00      	nop
 800b890:	20000440 	.word	0x20000440
 800b894:	0800dae9 	.word	0x0800dae9
 800b898:	0800daf6 	.word	0x0800daf6
 800b89c:	0800db24 	.word	0x0800db24

0800b8a0 <_calloc_r>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	fba1 5402 	umull	r5, r4, r1, r2
 800b8a6:	b934      	cbnz	r4, 800b8b6 <_calloc_r+0x16>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7ff f935 	bl	800ab18 <_malloc_r>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	b928      	cbnz	r0, 800b8be <_calloc_r+0x1e>
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	bd70      	pop	{r4, r5, r6, pc}
 800b8b6:	220c      	movs	r2, #12
 800b8b8:	6002      	str	r2, [r0, #0]
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	e7f9      	b.n	800b8b2 <_calloc_r+0x12>
 800b8be:	462a      	mov	r2, r5
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	f7fe f9dc 	bl	8009c7e <memset>
 800b8c6:	e7f4      	b.n	800b8b2 <_calloc_r+0x12>

0800b8c8 <__ascii_mbtowc>:
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	b901      	cbnz	r1, 800b8ce <__ascii_mbtowc+0x6>
 800b8cc:	a901      	add	r1, sp, #4
 800b8ce:	b142      	cbz	r2, 800b8e2 <__ascii_mbtowc+0x1a>
 800b8d0:	b14b      	cbz	r3, 800b8e6 <__ascii_mbtowc+0x1e>
 800b8d2:	7813      	ldrb	r3, [r2, #0]
 800b8d4:	600b      	str	r3, [r1, #0]
 800b8d6:	7812      	ldrb	r2, [r2, #0]
 800b8d8:	1e10      	subs	r0, r2, #0
 800b8da:	bf18      	it	ne
 800b8dc:	2001      	movne	r0, #1
 800b8de:	b002      	add	sp, #8
 800b8e0:	4770      	bx	lr
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	e7fb      	b.n	800b8de <__ascii_mbtowc+0x16>
 800b8e6:	f06f 0001 	mvn.w	r0, #1
 800b8ea:	e7f8      	b.n	800b8de <__ascii_mbtowc+0x16>

0800b8ec <__ascii_wctomb>:
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	b141      	cbz	r1, 800b904 <__ascii_wctomb+0x18>
 800b8f2:	2aff      	cmp	r2, #255	@ 0xff
 800b8f4:	d904      	bls.n	800b900 <__ascii_wctomb+0x14>
 800b8f6:	228a      	movs	r2, #138	@ 0x8a
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8fe:	4770      	bx	lr
 800b900:	700a      	strb	r2, [r1, #0]
 800b902:	2001      	movs	r0, #1
 800b904:	4770      	bx	lr
	...

0800b908 <fiprintf>:
 800b908:	b40e      	push	{r1, r2, r3}
 800b90a:	b503      	push	{r0, r1, lr}
 800b90c:	4601      	mov	r1, r0
 800b90e:	ab03      	add	r3, sp, #12
 800b910:	4805      	ldr	r0, [pc, #20]	@ (800b928 <fiprintf+0x20>)
 800b912:	f853 2b04 	ldr.w	r2, [r3], #4
 800b916:	6800      	ldr	r0, [r0, #0]
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	f7ff fd2d 	bl	800b378 <_vfiprintf_r>
 800b91e:	b002      	add	sp, #8
 800b920:	f85d eb04 	ldr.w	lr, [sp], #4
 800b924:	b003      	add	sp, #12
 800b926:	4770      	bx	lr
 800b928:	20000440 	.word	0x20000440

0800b92c <__swhatbuf_r>:
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	460c      	mov	r4, r1
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	2900      	cmp	r1, #0
 800b936:	b096      	sub	sp, #88	@ 0x58
 800b938:	4615      	mov	r5, r2
 800b93a:	461e      	mov	r6, r3
 800b93c:	da0d      	bge.n	800b95a <__swhatbuf_r+0x2e>
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b944:	f04f 0100 	mov.w	r1, #0
 800b948:	bf14      	ite	ne
 800b94a:	2340      	movne	r3, #64	@ 0x40
 800b94c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b950:	2000      	movs	r0, #0
 800b952:	6031      	str	r1, [r6, #0]
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	b016      	add	sp, #88	@ 0x58
 800b958:	bd70      	pop	{r4, r5, r6, pc}
 800b95a:	466a      	mov	r2, sp
 800b95c:	f000 f848 	bl	800b9f0 <_fstat_r>
 800b960:	2800      	cmp	r0, #0
 800b962:	dbec      	blt.n	800b93e <__swhatbuf_r+0x12>
 800b964:	9901      	ldr	r1, [sp, #4]
 800b966:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b96a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b96e:	4259      	negs	r1, r3
 800b970:	4159      	adcs	r1, r3
 800b972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b976:	e7eb      	b.n	800b950 <__swhatbuf_r+0x24>

0800b978 <__smakebuf_r>:
 800b978:	898b      	ldrh	r3, [r1, #12]
 800b97a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b97c:	079d      	lsls	r5, r3, #30
 800b97e:	4606      	mov	r6, r0
 800b980:	460c      	mov	r4, r1
 800b982:	d507      	bpl.n	800b994 <__smakebuf_r+0x1c>
 800b984:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	2301      	movs	r3, #1
 800b98e:	6163      	str	r3, [r4, #20]
 800b990:	b003      	add	sp, #12
 800b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b994:	ab01      	add	r3, sp, #4
 800b996:	466a      	mov	r2, sp
 800b998:	f7ff ffc8 	bl	800b92c <__swhatbuf_r>
 800b99c:	9f00      	ldr	r7, [sp, #0]
 800b99e:	4605      	mov	r5, r0
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff f8b8 	bl	800ab18 <_malloc_r>
 800b9a8:	b948      	cbnz	r0, 800b9be <__smakebuf_r+0x46>
 800b9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ae:	059a      	lsls	r2, r3, #22
 800b9b0:	d4ee      	bmi.n	800b990 <__smakebuf_r+0x18>
 800b9b2:	f023 0303 	bic.w	r3, r3, #3
 800b9b6:	f043 0302 	orr.w	r3, r3, #2
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	e7e2      	b.n	800b984 <__smakebuf_r+0xc>
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	6020      	str	r0, [r4, #0]
 800b9c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9c6:	81a3      	strh	r3, [r4, #12]
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9ce:	b15b      	cbz	r3, 800b9e8 <__smakebuf_r+0x70>
 800b9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f000 f81d 	bl	800ba14 <_isatty_r>
 800b9da:	b128      	cbz	r0, 800b9e8 <__smakebuf_r+0x70>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f023 0303 	bic.w	r3, r3, #3
 800b9e2:	f043 0301 	orr.w	r3, r3, #1
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	431d      	orrs	r5, r3
 800b9ec:	81a5      	strh	r5, [r4, #12]
 800b9ee:	e7cf      	b.n	800b990 <__smakebuf_r+0x18>

0800b9f0 <_fstat_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	@ (800ba10 <_fstat_r+0x20>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	f7f6 ff28 	bl	8002852 <_fstat>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d102      	bne.n	800ba0c <_fstat_r+0x1c>
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	b103      	cbz	r3, 800ba0c <_fstat_r+0x1c>
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	bd38      	pop	{r3, r4, r5, pc}
 800ba0e:	bf00      	nop
 800ba10:	20000c18 	.word	0x20000c18

0800ba14 <_isatty_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d06      	ldr	r5, [pc, #24]	@ (800ba30 <_isatty_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f7f6 ff27 	bl	8002872 <_isatty>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_isatty_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_isatty_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	20000c18 	.word	0x20000c18

0800ba34 <abort>:
 800ba34:	b508      	push	{r3, lr}
 800ba36:	2006      	movs	r0, #6
 800ba38:	f000 f82c 	bl	800ba94 <raise>
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	f7f6 feb8 	bl	80027b2 <_exit>

0800ba42 <_raise_r>:
 800ba42:	291f      	cmp	r1, #31
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4605      	mov	r5, r0
 800ba48:	460c      	mov	r4, r1
 800ba4a:	d904      	bls.n	800ba56 <_raise_r+0x14>
 800ba4c:	2316      	movs	r3, #22
 800ba4e:	6003      	str	r3, [r0, #0]
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba58:	b112      	cbz	r2, 800ba60 <_raise_r+0x1e>
 800ba5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba5e:	b94b      	cbnz	r3, 800ba74 <_raise_r+0x32>
 800ba60:	4628      	mov	r0, r5
 800ba62:	f000 f831 	bl	800bac8 <_getpid_r>
 800ba66:	4622      	mov	r2, r4
 800ba68:	4601      	mov	r1, r0
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba70:	f000 b818 	b.w	800baa4 <_kill_r>
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d00a      	beq.n	800ba8e <_raise_r+0x4c>
 800ba78:	1c59      	adds	r1, r3, #1
 800ba7a:	d103      	bne.n	800ba84 <_raise_r+0x42>
 800ba7c:	2316      	movs	r3, #22
 800ba7e:	6003      	str	r3, [r0, #0]
 800ba80:	2001      	movs	r0, #1
 800ba82:	e7e7      	b.n	800ba54 <_raise_r+0x12>
 800ba84:	2100      	movs	r1, #0
 800ba86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	4798      	blx	r3
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e7e0      	b.n	800ba54 <_raise_r+0x12>
	...

0800ba94 <raise>:
 800ba94:	4b02      	ldr	r3, [pc, #8]	@ (800baa0 <raise+0xc>)
 800ba96:	4601      	mov	r1, r0
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	f7ff bfd2 	b.w	800ba42 <_raise_r>
 800ba9e:	bf00      	nop
 800baa0:	20000440 	.word	0x20000440

0800baa4 <_kill_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4d07      	ldr	r5, [pc, #28]	@ (800bac4 <_kill_r+0x20>)
 800baa8:	2300      	movs	r3, #0
 800baaa:	4604      	mov	r4, r0
 800baac:	4608      	mov	r0, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	f7f6 fe6e 	bl	8002792 <_kill>
 800bab6:	1c43      	adds	r3, r0, #1
 800bab8:	d102      	bne.n	800bac0 <_kill_r+0x1c>
 800baba:	682b      	ldr	r3, [r5, #0]
 800babc:	b103      	cbz	r3, 800bac0 <_kill_r+0x1c>
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	bd38      	pop	{r3, r4, r5, pc}
 800bac2:	bf00      	nop
 800bac4:	20000c18 	.word	0x20000c18

0800bac8 <_getpid_r>:
 800bac8:	f7f6 be5b 	b.w	8002782 <_getpid>

0800bacc <atan2f>:
 800bacc:	f000 b822 	b.w	800bb14 <__ieee754_atan2f>

0800bad0 <sqrtf>:
 800bad0:	b508      	push	{r3, lr}
 800bad2:	ed2d 8b02 	vpush	{d8}
 800bad6:	eeb0 8a40 	vmov.f32	s16, s0
 800bada:	f000 f817 	bl	800bb0c <__ieee754_sqrtf>
 800bade:	eeb4 8a48 	vcmp.f32	s16, s16
 800bae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae6:	d60c      	bvs.n	800bb02 <sqrtf+0x32>
 800bae8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bb08 <sqrtf+0x38>
 800baec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800baf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf4:	d505      	bpl.n	800bb02 <sqrtf+0x32>
 800baf6:	f7fe f915 	bl	8009d24 <__errno>
 800bafa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bafe:	2321      	movs	r3, #33	@ 0x21
 800bb00:	6003      	str	r3, [r0, #0]
 800bb02:	ecbd 8b02 	vpop	{d8}
 800bb06:	bd08      	pop	{r3, pc}
 800bb08:	00000000 	.word	0x00000000

0800bb0c <__ieee754_sqrtf>:
 800bb0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bb10:	4770      	bx	lr
	...

0800bb14 <__ieee754_atan2f>:
 800bb14:	ee10 2a90 	vmov	r2, s1
 800bb18:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bb1c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bb20:	b510      	push	{r4, lr}
 800bb22:	eef0 7a40 	vmov.f32	s15, s0
 800bb26:	d806      	bhi.n	800bb36 <__ieee754_atan2f+0x22>
 800bb28:	ee10 0a10 	vmov	r0, s0
 800bb2c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bb30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb34:	d904      	bls.n	800bb40 <__ieee754_atan2f+0x2c>
 800bb36:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bb3a:	eeb0 0a67 	vmov.f32	s0, s15
 800bb3e:	bd10      	pop	{r4, pc}
 800bb40:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bb44:	d103      	bne.n	800bb4e <__ieee754_atan2f+0x3a>
 800bb46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb4a:	f000 b883 	b.w	800bc54 <atanf>
 800bb4e:	1794      	asrs	r4, r2, #30
 800bb50:	f004 0402 	and.w	r4, r4, #2
 800bb54:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bb58:	b943      	cbnz	r3, 800bb6c <__ieee754_atan2f+0x58>
 800bb5a:	2c02      	cmp	r4, #2
 800bb5c:	d05e      	beq.n	800bc1c <__ieee754_atan2f+0x108>
 800bb5e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bc30 <__ieee754_atan2f+0x11c>
 800bb62:	2c03      	cmp	r4, #3
 800bb64:	bf08      	it	eq
 800bb66:	eef0 7a47 	vmoveq.f32	s15, s14
 800bb6a:	e7e6      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bb6c:	b941      	cbnz	r1, 800bb80 <__ieee754_atan2f+0x6c>
 800bb6e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bc34 <__ieee754_atan2f+0x120>
 800bb72:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bc38 <__ieee754_atan2f+0x124>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	bfa8      	it	ge
 800bb7a:	eef0 7a47 	vmovge.f32	s15, s14
 800bb7e:	e7dc      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bb80:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bb84:	d110      	bne.n	800bba8 <__ieee754_atan2f+0x94>
 800bb86:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb8a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800bb8e:	d107      	bne.n	800bba0 <__ieee754_atan2f+0x8c>
 800bb90:	2c02      	cmp	r4, #2
 800bb92:	d846      	bhi.n	800bc22 <__ieee754_atan2f+0x10e>
 800bb94:	4b29      	ldr	r3, [pc, #164]	@ (800bc3c <__ieee754_atan2f+0x128>)
 800bb96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb9a:	edd3 7a00 	vldr	s15, [r3]
 800bb9e:	e7cc      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bba0:	2c02      	cmp	r4, #2
 800bba2:	d841      	bhi.n	800bc28 <__ieee754_atan2f+0x114>
 800bba4:	4b26      	ldr	r3, [pc, #152]	@ (800bc40 <__ieee754_atan2f+0x12c>)
 800bba6:	e7f6      	b.n	800bb96 <__ieee754_atan2f+0x82>
 800bba8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bbac:	d0df      	beq.n	800bb6e <__ieee754_atan2f+0x5a>
 800bbae:	1a5b      	subs	r3, r3, r1
 800bbb0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800bbb4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bbb8:	da1a      	bge.n	800bbf0 <__ieee754_atan2f+0xdc>
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	da01      	bge.n	800bbc2 <__ieee754_atan2f+0xae>
 800bbbe:	313c      	adds	r1, #60	@ 0x3c
 800bbc0:	db19      	blt.n	800bbf6 <__ieee754_atan2f+0xe2>
 800bbc2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bbc6:	f000 f919 	bl	800bdfc <fabsf>
 800bbca:	f000 f843 	bl	800bc54 <atanf>
 800bbce:	eef0 7a40 	vmov.f32	s15, s0
 800bbd2:	2c01      	cmp	r4, #1
 800bbd4:	d012      	beq.n	800bbfc <__ieee754_atan2f+0xe8>
 800bbd6:	2c02      	cmp	r4, #2
 800bbd8:	d017      	beq.n	800bc0a <__ieee754_atan2f+0xf6>
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	d0ad      	beq.n	800bb3a <__ieee754_atan2f+0x26>
 800bbde:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bc44 <__ieee754_atan2f+0x130>
 800bbe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbe6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bc48 <__ieee754_atan2f+0x134>
 800bbea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbee:	e7a4      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bbf0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800bc38 <__ieee754_atan2f+0x124>
 800bbf4:	e7ed      	b.n	800bbd2 <__ieee754_atan2f+0xbe>
 800bbf6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bc4c <__ieee754_atan2f+0x138>
 800bbfa:	e7ea      	b.n	800bbd2 <__ieee754_atan2f+0xbe>
 800bbfc:	ee17 3a90 	vmov	r3, s15
 800bc00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	e797      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bc0a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bc44 <__ieee754_atan2f+0x130>
 800bc0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc12:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bc48 <__ieee754_atan2f+0x134>
 800bc16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc1a:	e78e      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bc1c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bc48 <__ieee754_atan2f+0x134>
 800bc20:	e78b      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bc22:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bc50 <__ieee754_atan2f+0x13c>
 800bc26:	e788      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bc28:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bc4c <__ieee754_atan2f+0x138>
 800bc2c:	e785      	b.n	800bb3a <__ieee754_atan2f+0x26>
 800bc2e:	bf00      	nop
 800bc30:	c0490fdb 	.word	0xc0490fdb
 800bc34:	bfc90fdb 	.word	0xbfc90fdb
 800bc38:	3fc90fdb 	.word	0x3fc90fdb
 800bc3c:	0800dd38 	.word	0x0800dd38
 800bc40:	0800dd2c 	.word	0x0800dd2c
 800bc44:	33bbbd2e 	.word	0x33bbbd2e
 800bc48:	40490fdb 	.word	0x40490fdb
 800bc4c:	00000000 	.word	0x00000000
 800bc50:	3f490fdb 	.word	0x3f490fdb

0800bc54 <atanf>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	ee10 5a10 	vmov	r5, s0
 800bc5a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bc5e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800bc62:	eef0 7a40 	vmov.f32	s15, s0
 800bc66:	d310      	bcc.n	800bc8a <atanf+0x36>
 800bc68:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800bc6c:	d904      	bls.n	800bc78 <atanf+0x24>
 800bc6e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bc72:	eeb0 0a67 	vmov.f32	s0, s15
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800bdb0 <atanf+0x15c>
 800bc7c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800bdb4 <atanf+0x160>
 800bc80:	2d00      	cmp	r5, #0
 800bc82:	bfc8      	it	gt
 800bc84:	eef0 7a47 	vmovgt.f32	s15, s14
 800bc88:	e7f3      	b.n	800bc72 <atanf+0x1e>
 800bc8a:	4b4b      	ldr	r3, [pc, #300]	@ (800bdb8 <atanf+0x164>)
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	d810      	bhi.n	800bcb2 <atanf+0x5e>
 800bc90:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800bc94:	d20a      	bcs.n	800bcac <atanf+0x58>
 800bc96:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800bdbc <atanf+0x168>
 800bc9a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bc9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bca2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	dce2      	bgt.n	800bc72 <atanf+0x1e>
 800bcac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcb0:	e013      	b.n	800bcda <atanf+0x86>
 800bcb2:	f000 f8a3 	bl	800bdfc <fabsf>
 800bcb6:	4b42      	ldr	r3, [pc, #264]	@ (800bdc0 <atanf+0x16c>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	d84f      	bhi.n	800bd5c <atanf+0x108>
 800bcbc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	d841      	bhi.n	800bd48 <atanf+0xf4>
 800bcc4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bcc8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bccc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bcd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bce0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bdc4 <atanf+0x170>
 800bce4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800bdc8 <atanf+0x174>
 800bce8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800bdcc <atanf+0x178>
 800bcec:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bcf0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bcf4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bdd0 <atanf+0x17c>
 800bcf8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bcfc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bdd4 <atanf+0x180>
 800bd00:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bd04:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bdd8 <atanf+0x184>
 800bd08:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bd0c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bddc <atanf+0x188>
 800bd10:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bd14:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bde0 <atanf+0x18c>
 800bd18:	eea6 5a87 	vfma.f32	s10, s13, s14
 800bd1c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bde4 <atanf+0x190>
 800bd20:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bd24:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800bde8 <atanf+0x194>
 800bd28:	eea7 5a26 	vfma.f32	s10, s14, s13
 800bd2c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bdec <atanf+0x198>
 800bd30:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bd34:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bd38:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bd3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd40:	d121      	bne.n	800bd86 <atanf+0x132>
 800bd42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd46:	e794      	b.n	800bc72 <atanf+0x1e>
 800bd48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bd4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bd50:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd54:	2301      	movs	r3, #1
 800bd56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd5a:	e7be      	b.n	800bcda <atanf+0x86>
 800bd5c:	4b24      	ldr	r3, [pc, #144]	@ (800bdf0 <atanf+0x19c>)
 800bd5e:	429c      	cmp	r4, r3
 800bd60:	d80b      	bhi.n	800bd7a <atanf+0x126>
 800bd62:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800bd66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd6a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bd6e:	2302      	movs	r3, #2
 800bd70:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bd74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd78:	e7af      	b.n	800bcda <atanf+0x86>
 800bd7a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bd7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd82:	2303      	movs	r3, #3
 800bd84:	e7a9      	b.n	800bcda <atanf+0x86>
 800bd86:	4a1b      	ldr	r2, [pc, #108]	@ (800bdf4 <atanf+0x1a0>)
 800bd88:	491b      	ldr	r1, [pc, #108]	@ (800bdf8 <atanf+0x1a4>)
 800bd8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bd8e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bd92:	edd3 6a00 	vldr	s13, [r3]
 800bd96:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bd9a:	2d00      	cmp	r5, #0
 800bd9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bda0:	edd2 7a00 	vldr	s15, [r2]
 800bda4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bda8:	bfb8      	it	lt
 800bdaa:	eef1 7a67 	vneglt.f32	s15, s15
 800bdae:	e760      	b.n	800bc72 <atanf+0x1e>
 800bdb0:	bfc90fdb 	.word	0xbfc90fdb
 800bdb4:	3fc90fdb 	.word	0x3fc90fdb
 800bdb8:	3edfffff 	.word	0x3edfffff
 800bdbc:	7149f2ca 	.word	0x7149f2ca
 800bdc0:	3f97ffff 	.word	0x3f97ffff
 800bdc4:	3c8569d7 	.word	0x3c8569d7
 800bdc8:	3d4bda59 	.word	0x3d4bda59
 800bdcc:	bd6ef16b 	.word	0xbd6ef16b
 800bdd0:	3d886b35 	.word	0x3d886b35
 800bdd4:	3dba2e6e 	.word	0x3dba2e6e
 800bdd8:	3e124925 	.word	0x3e124925
 800bddc:	3eaaaaab 	.word	0x3eaaaaab
 800bde0:	bd15a221 	.word	0xbd15a221
 800bde4:	bd9d8795 	.word	0xbd9d8795
 800bde8:	bde38e38 	.word	0xbde38e38
 800bdec:	be4ccccd 	.word	0xbe4ccccd
 800bdf0:	401bffff 	.word	0x401bffff
 800bdf4:	0800dd54 	.word	0x0800dd54
 800bdf8:	0800dd44 	.word	0x0800dd44

0800bdfc <fabsf>:
 800bdfc:	ee10 3a10 	vmov	r3, s0
 800be00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be04:	ee00 3a10 	vmov	s0, r3
 800be08:	4770      	bx	lr
	...

0800be0c <_init>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr

0800be18 <_fini>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	bf00      	nop
 800be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1e:	bc08      	pop	{r3}
 800be20:	469e      	mov	lr, r3
 800be22:	4770      	bx	lr
